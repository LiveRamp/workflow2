
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.models;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import com.rapleaf.jack.AssociationType;
import com.rapleaf.jack.AttributesWithId;
import com.rapleaf.jack.BelongsToAssociation;
import com.rapleaf.jack.DefaultAssociationMetadata;
import com.rapleaf.jack.HasManyAssociation;
import com.rapleaf.jack.HasOneAssociation;
import com.rapleaf.jack.IAssociationMetadata;
import com.rapleaf.jack.IModelAssociationMetadata;
import com.rapleaf.jack.ModelIdWrapper;
import com.rapleaf.jack.ModelWithId;
import com.rapleaf.jack.queries.AbstractTable;
import com.rapleaf.jack.queries.Column;

import com.liveramp.databases.workflow_db.IDatabases;
import com.rapleaf.jack.util.JackUtility;

public class Application extends ModelWithId<Application, IDatabases> implements Comparable<Application>{
  
  public static final long serialVersionUID = 9143540225238735868L;

  public static class Tbl extends AbstractTable<Application.Attributes, Application> {
    public final Column<Long> ID;
    public final Column<String> NAME;
    public final Column<Integer> APP_TYPE;

    private Tbl(String alias) {
      super("applications", alias, Application.Attributes.class, Application.class);
      this.ID = Column.fromId(alias);
      this.NAME = Column.fromField(alias, _Fields.name, String.class);
      this.APP_TYPE = Column.fromField(alias, _Fields.app_type, Integer.class);
      Collections.addAll(this.allColumns, ID, NAME, APP_TYPE);
    }

    public static Tbl as(String alias) {
      return new Tbl(alias);
    }
  }

  public static final Tbl TBL = new Tbl("applications");
  public static final Column<Long> ID = TBL.ID;
  public static final Column<String> NAME = TBL.NAME;
  public static final Column<Integer> APP_TYPE = TBL.APP_TYPE;

  private final Attributes attributes;

  private transient Application.Id cachedTypedId;

  // Associations
  private HasManyAssociation<WorkflowExecution> __assoc_workflow_execution;
  private HasManyAssociation<ApplicationConfiguredNotification> __assoc_application_configured_notification;
  private HasManyAssociation<ApplicationCounterSummary> __assoc_application_counter_summary;
  private HasManyAssociation<DashboardApplication> __assoc_dashboard_applications;
  private HasManyAssociation<Dashboard> __assoc_dashboards;

  public enum _Fields {
    name,
    app_type,
  }

  @Override
  public Application.Id getTypedId() {
    if (cachedTypedId == null) {
      cachedTypedId = new Application.Id(this.getId());
    }
    return cachedTypedId;
  }

  public Application(long id, final String name, final Integer app_type, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, name, app_type);
    this.__assoc_workflow_execution = new HasManyAssociation<>(databases.getWorkflowDb().workflowExecutions(), "application_id", getId());
    this.__assoc_application_configured_notification = new HasManyAssociation<>(databases.getWorkflowDb().applicationConfiguredNotifications(), "application_id", getId());
    this.__assoc_application_counter_summary = new HasManyAssociation<>(databases.getWorkflowDb().applicationCounterSummaries(), "application_id", getId());
    this.__assoc_dashboard_applications = new HasManyAssociation<>(databases.getWorkflowDb().dashboardApplications(), "application_id", getId());
    this.__assoc_dashboards = new HasManyAssociation<>(databases.getWorkflowDb().dashboards(), "application_id", getId());
  }

  public Application(long id, final String name, final Integer app_type) {
    super(null);
    attributes = new Attributes(id, name, app_type);
  }
  
  public Application(long id, final String name, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, name);
    this.__assoc_workflow_execution = new HasManyAssociation<>(databases.getWorkflowDb().workflowExecutions(), "application_id", getId());
    this.__assoc_application_configured_notification = new HasManyAssociation<>(databases.getWorkflowDb().applicationConfiguredNotifications(), "application_id", getId());
    this.__assoc_application_counter_summary = new HasManyAssociation<>(databases.getWorkflowDb().applicationCounterSummaries(), "application_id", getId());
    this.__assoc_dashboard_applications = new HasManyAssociation<>(databases.getWorkflowDb().dashboardApplications(), "application_id", getId());
    this.__assoc_dashboards = new HasManyAssociation<>(databases.getWorkflowDb().dashboards(), "application_id", getId());
  }

  public Application(long id, final String name) {
    super(null);
    attributes = new Attributes(id, name);
  }

  public static Application newDefaultInstance(long id) {
    return new Application(id, "");
  }

  public Application(Attributes attributes, IDatabases databases) {
    super(databases);
    this.attributes = attributes;

    if (databases != null) {
      this.__assoc_workflow_execution = new HasManyAssociation<>(databases.getWorkflowDb().workflowExecutions(), "application_id", getId());
      this.__assoc_application_configured_notification = new HasManyAssociation<>(databases.getWorkflowDb().applicationConfiguredNotifications(), "application_id", getId());
      this.__assoc_application_counter_summary = new HasManyAssociation<>(databases.getWorkflowDb().applicationCounterSummaries(), "application_id", getId());
      this.__assoc_dashboard_applications = new HasManyAssociation<>(databases.getWorkflowDb().dashboardApplications(), "application_id", getId());
      this.__assoc_dashboards = new HasManyAssociation<>(databases.getWorkflowDb().dashboards(), "application_id", getId());
    }
  }

  public Application(Attributes attributes) {
    this(attributes, (IDatabases) null);
  }

  public Application(long id, Map<Enum, Object> fieldsMap) {
    super(null);
    attributes = new Attributes(id, fieldsMap);
  }

  public Application (Application other) {
    this(other, (IDatabases)null);
  }

  public Application (Application other, IDatabases databases) {
    super(databases);
    attributes = new Attributes(other.getAttributes());

    if (databases != null) {
      this.__assoc_workflow_execution = new HasManyAssociation<>(databases.getWorkflowDb().workflowExecutions(), "application_id", getId());
      this.__assoc_application_configured_notification = new HasManyAssociation<>(databases.getWorkflowDb().applicationConfiguredNotifications(), "application_id", getId());
      this.__assoc_application_counter_summary = new HasManyAssociation<>(databases.getWorkflowDb().applicationCounterSummaries(), "application_id", getId());
      this.__assoc_dashboard_applications = new HasManyAssociation<>(databases.getWorkflowDb().dashboardApplications(), "application_id", getId());
      this.__assoc_dashboards = new HasManyAssociation<>(databases.getWorkflowDb().dashboards(), "application_id", getId());
    }
  }

  public Attributes getAttributes() {
    return attributes;
  }

  public String getName() {
    return attributes.getName();
  }

  public Application setName(String newval) {
    attributes.setName(newval);
    cachedHashCode = 0;
    return this;
  }

  public Integer getAppType() {
    return attributes.getAppType();
  }

  public Application setAppType(Integer newval) {
    attributes.setAppType(newval);
    cachedHashCode = 0;
    return this;
  }

  public void setField(_Fields field, Object value) {
    switch (field) {
      case name:
        setName((String)value);
        break;
      case app_type:
        setAppType((Integer)value);
        break;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }
  }
  
  public void setField(String fieldName, Object value) {
    if (fieldName.equals("name")) {
      setName((String)  value);
      return;
    }
    if (fieldName.equals("app_type")) {
      setAppType((Integer)  value);
      return;
    }
    throw new IllegalStateException("Invalid field: " + fieldName);
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
      case name:
        return String.class;
      case app_type:
        return Integer.class;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
    if (fieldName.equals("name")) {
      return String.class;
    }
    if (fieldName.equals("app_type")) {
      return Integer.class;
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public List<WorkflowExecution> getWorkflowExecution() throws IOException {
    return __assoc_workflow_execution.get();
  }

  public List<ApplicationConfiguredNotification> getApplicationConfiguredNotification() throws IOException {
    return __assoc_application_configured_notification.get();
  }

  public List<ApplicationCounterSummary> getApplicationCounterSummary() throws IOException {
    return __assoc_application_counter_summary.get();
  }

  public List<DashboardApplication> getDashboardApplications() throws IOException {
    return __assoc_dashboard_applications.get();
  }

  public List<Dashboard> getDashboards() throws IOException {
    return __assoc_dashboards.get();
  }

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
    if (fieldName.equals("name")) {
      return getName();
    }
    if (fieldName.equals("app_type")) {
      return getAppType();
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
      case name:
        return getName();
      case app_type:
        return getAppType();
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  public boolean hasField(String fieldName) {
    if (fieldName.equals("id")) {
      return true;
    }
    if (fieldName.equals("name")) {
      return true;
    }
    if (fieldName.equals("app_type")) {
      return true;
    }
    return false;
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
      case name:
        return null;
      case app_type:
        return null;
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public Application getCopy() {
    return getCopy(databases);
  }

  @Override
  public Application getCopy(IDatabases databases) {
    return new Application(this, databases);
  }

  @Override
  public boolean save() throws IOException {
    return databases.getWorkflowDb().applications().save(this);
  }

  public String toString() {
    return "<Application"
        + " id: " + this.getId()
        + " name: " + getName()
        + " app_type: " + getAppType()
        + ">";
  }

  public void unsetAssociations() {
    unsetDatabaseReference();
    __assoc_workflow_execution = null;
    __assoc_application_configured_notification = null;
    __assoc_application_counter_summary = null;
    __assoc_dashboard_applications = null;
    __assoc_dashboards = null;
  }

  public int compareTo(Application that) {
    return Long.valueOf(this.getId()).compareTo(that.getId());
  }
  
  
  public static class Attributes extends AttributesWithId {
    
    public static final long serialVersionUID = 2804963153289892298L;

    // Fields
    private String __name;
    private Integer __app_type;

    public Attributes(long id) {
      super(id);
    }

    public Attributes(long id, final String name, final Integer app_type) {
      super(id);
      this.__name = name;
      this.__app_type = app_type;
    }
    
    public Attributes(long id, final String name) {
      super(id);
      this.__name = name;
    }

    public static Attributes newDefaultInstance(long id) {
      return new Attributes(id, "");
    }

    public Attributes(long id, Map<Enum, Object> fieldsMap) {
      super(id);
      String name = (String)fieldsMap.get(Application._Fields.name);
      Integer app_type = (Integer)fieldsMap.get(Application._Fields.app_type);
      this.__name = name;
      this.__app_type = app_type;
    }

    public Attributes(Attributes other) {
      super(other.getId());
      this.__name = other.getName();
      this.__app_type = other.getAppType();
    }

    public String getName() {
      return __name;
    }

    public Attributes setName(String newval) {
      this.__name = newval;
      cachedHashCode = 0;
      return this;
    }

    public Integer getAppType() {
      return __app_type;
    }

    public Attributes setAppType(Integer newval) {
      this.__app_type = newval;
      cachedHashCode = 0;
      return this;
    }

    public void setField(_Fields field, Object value) {
      switch (field) {
        case name:
          setName((String)value);
          break;
        case app_type:
          setAppType((Integer)value);
          break;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }
    }

    public void setField(String fieldName, Object value) {
      if (fieldName.equals("name")) {
        setName((String)value);
        return;
      }
      if (fieldName.equals("app_type")) {
        setAppType((Integer)value);
        return;
      }
      throw new IllegalStateException("Invalid field: " + fieldName);
    }

    public static Class getFieldType(_Fields field) {
      switch (field) {
        case name:
          return String.class;
        case app_type:
          return Integer.class;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }    
    }

    public static Class getFieldType(String fieldName) {    
      if (fieldName.equals("name")) {
        return String.class;
      }
      if (fieldName.equals("app_type")) {
        return Integer.class;
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    @Override
    public Object getField(String fieldName) {
      if (fieldName.equals("id")) {
        return getId();
      }
      if (fieldName.equals("name")) {
        return getName();
      }
      if (fieldName.equals("app_type")) {
        return getAppType();
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    public Object getField(_Fields field) {
      switch (field) {
        case name:
          return getName();
        case app_type:
          return getAppType();
      }
      throw new IllegalStateException("Invalid field: " + field);
    }

    public boolean hasField(String fieldName) {
      if (fieldName.equals("id")) {
        return true;
      }
      if (fieldName.equals("name")) {
        return true;
      }
      if (fieldName.equals("app_type")) {
        return true;
      }
      return false;
    }

    public static Object getDefaultValue(_Fields field) {
      switch (field) {
        case name:
          return null;
        case app_type:
          return null;
      }
      throw new IllegalStateException("Invalid field: " + field);
    }
    
    @Override
    public Set<Enum> getFieldSet() {
      Set set = EnumSet.allOf(_Fields.class);
      return set;
    }
    
    public String toString() {
      return "<Application.Attributes"
          + " name: " + getName()
          + " app_type: " + getAppType()
          + ">";
    }
  }

  public static class Id implements ModelIdWrapper<Application.Id> {
    public static final long serialVersionUID = 1L;

    private final long id;

    public Id(Long id) {
      this.id = id;
    }

    @Override
    public Long getId() {
      return id;
    }

    @Override
    public int compareTo(Id other) {
      return this.getId().compareTo(other.getId());
    }

    @Override
    public boolean equals(Object other) {
      if (other instanceof Id) {
        return this.getId().equals(((Id)other).getId());
      }
      return false;
    }

    @Override
    public int hashCode() {
      return this.getId().hashCode();
    }

    @Override
    public String toString() {
      return "<Application.Id: " + this.getId() + ">";
    }
  }

  public static Set<Attributes> convertToAttributesSet(Collection<Application> models) {
    return models.stream()
        .map(Application::getAttributes)
        .collect(Collectors.toSet());
  }

  public static class AssociationMetadata implements IModelAssociationMetadata {

    private List<IAssociationMetadata> meta = new ArrayList<>();

    public AssociationMetadata(){
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_MANY, Application.class, WorkflowExecution.class, "application_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_MANY, Application.class, ApplicationConfiguredNotification.class, "application_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_MANY, Application.class, ApplicationCounterSummary.class, "application_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_MANY, Application.class, DashboardApplication.class, "application_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_MANY, Application.class, Dashboard.class, "application_id"));
    }

    @Override
    public List<IAssociationMetadata> getAssociationMetadata() {
      return meta;
    }
  }

}
