/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.query;

import java.util.Collection;

import com.rapleaf.jack.queries.AbstractQueryBuilder;
import com.rapleaf.jack.queries.Column;
import com.rapleaf.jack.queries.FieldSelector;
import com.rapleaf.jack.queries.where_operators.IWhereOperator;
import com.rapleaf.jack.queries.where_operators.JackMatchers;
import com.rapleaf.jack.queries.WhereConstraint;
import com.rapleaf.jack.queries.QueryOrder;
import com.rapleaf.jack.queries.OrderCriterion;
import com.rapleaf.jack.queries.LimitCriterion;
import com.liveramp.databases.workflow_db.iface.IBackgroundAttemptInfoPersistence;
import com.liveramp.databases.workflow_db.models.BackgroundAttemptInfo;


public class BackgroundAttemptInfoQueryBuilder extends AbstractQueryBuilder<BackgroundAttemptInfo> {

  public BackgroundAttemptInfoQueryBuilder(IBackgroundAttemptInfoPersistence caller) {
    super(caller);
  }

  public BackgroundAttemptInfoQueryBuilder select(BackgroundAttemptInfo._Fields... fields) {
    for (BackgroundAttemptInfo._Fields field : fields){
      addSelectedField(new FieldSelector(field));
    }
    return this;
  }

  public BackgroundAttemptInfoQueryBuilder selectAgg(FieldSelector... aggregatedFields) {
    addSelectedFields(aggregatedFields);
    return this;
  }

  public BackgroundAttemptInfoQueryBuilder id(Long value) {
    addId(value);
    return this;
  }

  public BackgroundAttemptInfoQueryBuilder idIn(Collection<Long> values) {
    addIds(values);
    return this;
  }

  public BackgroundAttemptInfoQueryBuilder whereId(IWhereOperator<Long> operator) {
    addWhereConstraint(new WhereConstraint<>(Column.fromId(null), operator, null));
    return this;
  }

  public BackgroundAttemptInfoQueryBuilder limit(int offset, int nResults) {
    setLimit(new LimitCriterion(offset, nResults));
    return this;
  }

  public BackgroundAttemptInfoQueryBuilder limit(int nResults) {
    setLimit(new LimitCriterion(nResults));
    return this;
  }

  public BackgroundAttemptInfoQueryBuilder groupBy(BackgroundAttemptInfo._Fields... fields) {
    addGroupByFields(fields);
    return this;
  }

  public BackgroundAttemptInfoQueryBuilder order() {
    this.addOrder(new OrderCriterion(QueryOrder.ASC));
    return this;
  }

  public BackgroundAttemptInfoQueryBuilder order(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(queryOrder));
    return this;
  }

  public BackgroundAttemptInfoQueryBuilder orderById() {
    this.addOrder(new OrderCriterion(QueryOrder.ASC));
    return this;
  }

  public BackgroundAttemptInfoQueryBuilder orderById(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(queryOrder));
    return this;
  }

  public BackgroundAttemptInfoQueryBuilder workflowAttemptId(Long value) {
    addWhereConstraint(new WhereConstraint<>(BackgroundAttemptInfo._Fields.workflow_attempt_id, JackMatchers.equalTo(value)));
    return this;
  }

  public BackgroundAttemptInfoQueryBuilder whereWorkflowAttemptId(IWhereOperator<Long> operator) {
    addWhereConstraint(new WhereConstraint<>(BackgroundAttemptInfo._Fields.workflow_attempt_id, operator));
    return this;
  }

  public BackgroundAttemptInfoQueryBuilder orderByWorkflowAttemptId() {
    this.addOrder(new OrderCriterion(BackgroundAttemptInfo._Fields.workflow_attempt_id, QueryOrder.ASC));
    return this;
  }

  public BackgroundAttemptInfoQueryBuilder orderByWorkflowAttemptId(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(BackgroundAttemptInfo._Fields.workflow_attempt_id, queryOrder));
    return this;
  }

  public BackgroundAttemptInfoQueryBuilder resourceManagerFactory(String value) {
    addWhereConstraint(new WhereConstraint<>(BackgroundAttemptInfo._Fields.resource_manager_factory, JackMatchers.equalTo(value)));
    return this;
  }

  public BackgroundAttemptInfoQueryBuilder whereResourceManagerFactory(IWhereOperator<String> operator) {
    addWhereConstraint(new WhereConstraint<>(BackgroundAttemptInfo._Fields.resource_manager_factory, operator));
    return this;
  }

  public BackgroundAttemptInfoQueryBuilder orderByResourceManagerFactory() {
    this.addOrder(new OrderCriterion(BackgroundAttemptInfo._Fields.resource_manager_factory, QueryOrder.ASC));
    return this;
  }

  public BackgroundAttemptInfoQueryBuilder orderByResourceManagerFactory(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(BackgroundAttemptInfo._Fields.resource_manager_factory, queryOrder));
    return this;
  }

  public BackgroundAttemptInfoQueryBuilder resourceManagerVersionClass(String value) {
    addWhereConstraint(new WhereConstraint<>(BackgroundAttemptInfo._Fields.resource_manager_version_class, JackMatchers.equalTo(value)));
    return this;
  }

  public BackgroundAttemptInfoQueryBuilder whereResourceManagerVersionClass(IWhereOperator<String> operator) {
    addWhereConstraint(new WhereConstraint<>(BackgroundAttemptInfo._Fields.resource_manager_version_class, operator));
    return this;
  }

  public BackgroundAttemptInfoQueryBuilder orderByResourceManagerVersionClass() {
    this.addOrder(new OrderCriterion(BackgroundAttemptInfo._Fields.resource_manager_version_class, QueryOrder.ASC));
    return this;
  }

  public BackgroundAttemptInfoQueryBuilder orderByResourceManagerVersionClass(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(BackgroundAttemptInfo._Fields.resource_manager_version_class, queryOrder));
    return this;
  }
}
