
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.models;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import com.rapleaf.jack.AssociationType;
import com.rapleaf.jack.AttributesWithId;
import com.rapleaf.jack.BelongsToAssociation;
import com.rapleaf.jack.DefaultAssociationMetadata;
import com.rapleaf.jack.HasManyAssociation;
import com.rapleaf.jack.HasOneAssociation;
import com.rapleaf.jack.IAssociationMetadata;
import com.rapleaf.jack.IModelAssociationMetadata;
import com.rapleaf.jack.ModelIdWrapper;
import com.rapleaf.jack.ModelWithId;
import com.rapleaf.jack.queries.AbstractTable;
import com.rapleaf.jack.queries.Column;

import com.liveramp.databases.workflow_db.IDatabases;
import com.rapleaf.jack.util.JackUtility;

public class BackgroundAttemptInfo extends ModelWithId<BackgroundAttemptInfo, IDatabases> implements Comparable<BackgroundAttemptInfo>{
  
  public static final long serialVersionUID = -5719518777407163969L;

  public static class Tbl extends AbstractTable<BackgroundAttemptInfo.Attributes, BackgroundAttemptInfo> {
    public final Column<Long> ID;
    public final Column<Long> WORKFLOW_ATTEMPT_ID;
    public final Column<String> RESOURCE_MANAGER_FACTORY;
    public final Column<String> RESOURCE_MANAGER_VERSION_CLASS;

    private Tbl(String alias) {
      super("background_attempt_infos", alias, BackgroundAttemptInfo.Attributes.class, BackgroundAttemptInfo.class);
      this.ID = Column.fromId(alias);
      this.WORKFLOW_ATTEMPT_ID = Column.fromField(alias, _Fields.workflow_attempt_id, Long.class);
      this.RESOURCE_MANAGER_FACTORY = Column.fromField(alias, _Fields.resource_manager_factory, String.class);
      this.RESOURCE_MANAGER_VERSION_CLASS = Column.fromField(alias, _Fields.resource_manager_version_class, String.class);
      Collections.addAll(this.allColumns, ID, WORKFLOW_ATTEMPT_ID, RESOURCE_MANAGER_FACTORY, RESOURCE_MANAGER_VERSION_CLASS);
    }

    public static Tbl as(String alias) {
      return new Tbl(alias);
    }
  }

  public static final Tbl TBL = new Tbl("background_attempt_infos");
  public static final Column<Long> ID = TBL.ID;
  public static final Column<Long> WORKFLOW_ATTEMPT_ID = TBL.WORKFLOW_ATTEMPT_ID;
  public static final Column<String> RESOURCE_MANAGER_FACTORY = TBL.RESOURCE_MANAGER_FACTORY;
  public static final Column<String> RESOURCE_MANAGER_VERSION_CLASS = TBL.RESOURCE_MANAGER_VERSION_CLASS;

  private final Attributes attributes;

  private transient BackgroundAttemptInfo.Id cachedTypedId;

  // Associations
  private BelongsToAssociation<WorkflowAttempt> __assoc_workflow_attempt;

  public enum _Fields {
    workflow_attempt_id,
    resource_manager_factory,
    resource_manager_version_class,
  }

  @Override
  public BackgroundAttemptInfo.Id getTypedId() {
    if (cachedTypedId == null) {
      cachedTypedId = new BackgroundAttemptInfo.Id(this.getId());
    }
    return cachedTypedId;
  }

  public BackgroundAttemptInfo(long id, final long workflow_attempt_id, final String resource_manager_factory, final String resource_manager_version_class, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, workflow_attempt_id, resource_manager_factory, resource_manager_version_class);
    this.__assoc_workflow_attempt = new BelongsToAssociation<>(databases.getWorkflowDb().workflowAttempts(), getWorkflowAttemptId());
  }

  public BackgroundAttemptInfo(long id, final long workflow_attempt_id, final String resource_manager_factory, final String resource_manager_version_class) {
    super(null);
    attributes = new Attributes(id, workflow_attempt_id, resource_manager_factory, resource_manager_version_class);
  }
  
  public BackgroundAttemptInfo(long id, final long workflow_attempt_id, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, workflow_attempt_id);
    this.__assoc_workflow_attempt = new BelongsToAssociation<>(databases.getWorkflowDb().workflowAttempts(), getWorkflowAttemptId());
  }

  public BackgroundAttemptInfo(long id, final long workflow_attempt_id) {
    super(null);
    attributes = new Attributes(id, workflow_attempt_id);
  }

  public static BackgroundAttemptInfo newDefaultInstance(long id) {
    return new BackgroundAttemptInfo(id, 0L);
  }

  public BackgroundAttemptInfo(Attributes attributes, IDatabases databases) {
    super(databases);
    this.attributes = attributes;

    if (databases != null) {
      this.__assoc_workflow_attempt = new BelongsToAssociation<>(databases.getWorkflowDb().workflowAttempts(), getWorkflowAttemptId());
    }
  }

  public BackgroundAttemptInfo(Attributes attributes) {
    this(attributes, (IDatabases) null);
  }

  public BackgroundAttemptInfo(long id, Map<Enum, Object> fieldsMap) {
    super(null);
    attributes = new Attributes(id, fieldsMap);
  }

  public BackgroundAttemptInfo (BackgroundAttemptInfo other) {
    this(other, (IDatabases)null);
  }

  public BackgroundAttemptInfo (BackgroundAttemptInfo other, IDatabases databases) {
    super(databases);
    attributes = new Attributes(other.getAttributes());

    if (databases != null) {
      this.__assoc_workflow_attempt = new BelongsToAssociation<>(databases.getWorkflowDb().workflowAttempts(), getWorkflowAttemptId());
    }
  }

  public Attributes getAttributes() {
    return attributes;
  }

  public long getWorkflowAttemptId() {
    return attributes.getWorkflowAttemptId();
  }

  public BackgroundAttemptInfo setWorkflowAttemptId(long newval) {
    attributes.setWorkflowAttemptId(newval);
    if(__assoc_workflow_attempt != null){
      this.__assoc_workflow_attempt.setOwnerId(newval);
    }
    cachedHashCode = 0;
    return this;
  }

  public String getResourceManagerFactory() {
    return attributes.getResourceManagerFactory();
  }

  public BackgroundAttemptInfo setResourceManagerFactory(String newval) {
    attributes.setResourceManagerFactory(newval);
    cachedHashCode = 0;
    return this;
  }

  public String getResourceManagerVersionClass() {
    return attributes.getResourceManagerVersionClass();
  }

  public BackgroundAttemptInfo setResourceManagerVersionClass(String newval) {
    attributes.setResourceManagerVersionClass(newval);
    cachedHashCode = 0;
    return this;
  }

  public void setField(_Fields field, Object value) {
    switch (field) {
      case workflow_attempt_id:
        setWorkflowAttemptId((Long)value);
        break;
      case resource_manager_factory:
        setResourceManagerFactory((String)value);
        break;
      case resource_manager_version_class:
        setResourceManagerVersionClass((String)value);
        break;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }
  }
  
  public void setField(String fieldName, Object value) {
    if (fieldName.equals("workflow_attempt_id")) {
      setWorkflowAttemptId((Long)  value);
      return;
    }
    if (fieldName.equals("resource_manager_factory")) {
      setResourceManagerFactory((String)  value);
      return;
    }
    if (fieldName.equals("resource_manager_version_class")) {
      setResourceManagerVersionClass((String)  value);
      return;
    }
    throw new IllegalStateException("Invalid field: " + fieldName);
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
      case workflow_attempt_id:
        return long.class;
      case resource_manager_factory:
        return String.class;
      case resource_manager_version_class:
        return String.class;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
    if (fieldName.equals("workflow_attempt_id")) {
      return long.class;
    }
    if (fieldName.equals("resource_manager_factory")) {
      return String.class;
    }
    if (fieldName.equals("resource_manager_version_class")) {
      return String.class;
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public WorkflowAttempt getWorkflowAttempt() throws IOException {
    return __assoc_workflow_attempt.get();
  }

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
    if (fieldName.equals("workflow_attempt_id")) {
      return getWorkflowAttemptId();
    }
    if (fieldName.equals("resource_manager_factory")) {
      return getResourceManagerFactory();
    }
    if (fieldName.equals("resource_manager_version_class")) {
      return getResourceManagerVersionClass();
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
      case workflow_attempt_id:
        return getWorkflowAttemptId();
      case resource_manager_factory:
        return getResourceManagerFactory();
      case resource_manager_version_class:
        return getResourceManagerVersionClass();
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  public boolean hasField(String fieldName) {
    if (fieldName.equals("id")) {
      return true;
    }
    if (fieldName.equals("workflow_attempt_id")) {
      return true;
    }
    if (fieldName.equals("resource_manager_factory")) {
      return true;
    }
    if (fieldName.equals("resource_manager_version_class")) {
      return true;
    }
    return false;
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
      case workflow_attempt_id:
        return null;
      case resource_manager_factory:
        return null;
      case resource_manager_version_class:
        return null;
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public BackgroundAttemptInfo getCopy() {
    return getCopy(databases);
  }

  @Override
  public BackgroundAttemptInfo getCopy(IDatabases databases) {
    return new BackgroundAttemptInfo(this, databases);
  }

  @Override
  public boolean save() throws IOException {
    return databases.getWorkflowDb().backgroundAttemptInfos().save(this);
  }

  public WorkflowAttempt createWorkflowAttempt(final int workflow_execution_id, final String system_user, final String priority, final String pool, final String host) throws IOException {
 
    WorkflowAttempt newWorkflowAttempt = databases.getWorkflowDb().workflowAttempts().create(workflow_execution_id, system_user, priority, pool, host);
    setWorkflowAttemptId(newWorkflowAttempt.getId());
    save();
    __assoc_workflow_attempt.clearCache();
    return newWorkflowAttempt;
  }

  public WorkflowAttempt createWorkflowAttempt(final int workflow_execution_id, final String system_user, final String shutdown_reason, final String priority, final String pool, final String host, final Long start_time, final Long end_time, final Integer status, final Long last_heartbeat, final String launch_dir, final String launch_jar, final String error_email, final String info_email, final String scm_remote, final String commit_revision, final String description) throws IOException {
 
    WorkflowAttempt newWorkflowAttempt = databases.getWorkflowDb().workflowAttempts().create(workflow_execution_id, system_user, shutdown_reason, priority, pool, host, start_time, end_time, status, last_heartbeat, launch_dir, launch_jar, error_email, info_email, scm_remote, commit_revision, description);
    setWorkflowAttemptId(newWorkflowAttempt.getId());
    save();
    __assoc_workflow_attempt.clearCache();
    return newWorkflowAttempt;
  }

  public WorkflowAttempt createWorkflowAttempt() throws IOException {
 
    WorkflowAttempt newWorkflowAttempt = databases.getWorkflowDb().workflowAttempts().create(0, "", "", "", "");
    setWorkflowAttemptId(newWorkflowAttempt.getId());
    save();
    __assoc_workflow_attempt.clearCache();
    return newWorkflowAttempt;
  }

  public String toString() {
    return "<BackgroundAttemptInfo"
        + " id: " + this.getId()
        + " workflow_attempt_id: " + getWorkflowAttemptId()
        + " resource_manager_factory: " + getResourceManagerFactory()
        + " resource_manager_version_class: " + getResourceManagerVersionClass()
        + ">";
  }

  public void unsetAssociations() {
    unsetDatabaseReference();
    __assoc_workflow_attempt = null;
  }

  public int compareTo(BackgroundAttemptInfo that) {
    return Long.valueOf(this.getId()).compareTo(that.getId());
  }
  
  
  public static class Attributes extends AttributesWithId {
    
    public static final long serialVersionUID = 2851371612327310945L;

    // Fields
    private long __workflow_attempt_id;
    private String __resource_manager_factory;
    private String __resource_manager_version_class;

    public Attributes(long id) {
      super(id);
    }

    public Attributes(long id, final long workflow_attempt_id, final String resource_manager_factory, final String resource_manager_version_class) {
      super(id);
      this.__workflow_attempt_id = workflow_attempt_id;
      this.__resource_manager_factory = resource_manager_factory;
      this.__resource_manager_version_class = resource_manager_version_class;
    }
    
    public Attributes(long id, final long workflow_attempt_id) {
      super(id);
      this.__workflow_attempt_id = workflow_attempt_id;
    }

    public static Attributes newDefaultInstance(long id) {
      return new Attributes(id, 0L);
    }

    public Attributes(long id, Map<Enum, Object> fieldsMap) {
      super(id);
      long workflow_attempt_id = (Long)fieldsMap.get(BackgroundAttemptInfo._Fields.workflow_attempt_id);
      String resource_manager_factory = (String)fieldsMap.get(BackgroundAttemptInfo._Fields.resource_manager_factory);
      String resource_manager_version_class = (String)fieldsMap.get(BackgroundAttemptInfo._Fields.resource_manager_version_class);
      this.__workflow_attempt_id = workflow_attempt_id;
      this.__resource_manager_factory = resource_manager_factory;
      this.__resource_manager_version_class = resource_manager_version_class;
    }

    public Attributes(Attributes other) {
      super(other.getId());
      this.__workflow_attempt_id = other.getWorkflowAttemptId();
      this.__resource_manager_factory = other.getResourceManagerFactory();
      this.__resource_manager_version_class = other.getResourceManagerVersionClass();
    }

    public long getWorkflowAttemptId() {
      return __workflow_attempt_id;
    }

    public Attributes setWorkflowAttemptId(long newval) {
      this.__workflow_attempt_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getResourceManagerFactory() {
      return __resource_manager_factory;
    }

    public Attributes setResourceManagerFactory(String newval) {
      this.__resource_manager_factory = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getResourceManagerVersionClass() {
      return __resource_manager_version_class;
    }

    public Attributes setResourceManagerVersionClass(String newval) {
      this.__resource_manager_version_class = newval;
      cachedHashCode = 0;
      return this;
    }

    public void setField(_Fields field, Object value) {
      switch (field) {
        case workflow_attempt_id:
          setWorkflowAttemptId((Long)value);
          break;
        case resource_manager_factory:
          setResourceManagerFactory((String)value);
          break;
        case resource_manager_version_class:
          setResourceManagerVersionClass((String)value);
          break;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }
    }

    public void setField(String fieldName, Object value) {
      if (fieldName.equals("workflow_attempt_id")) {
        setWorkflowAttemptId((Long)value);
        return;
      }
      if (fieldName.equals("resource_manager_factory")) {
        setResourceManagerFactory((String)value);
        return;
      }
      if (fieldName.equals("resource_manager_version_class")) {
        setResourceManagerVersionClass((String)value);
        return;
      }
      throw new IllegalStateException("Invalid field: " + fieldName);
    }

    public static Class getFieldType(_Fields field) {
      switch (field) {
        case workflow_attempt_id:
          return long.class;
        case resource_manager_factory:
          return String.class;
        case resource_manager_version_class:
          return String.class;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }    
    }

    public static Class getFieldType(String fieldName) {    
      if (fieldName.equals("workflow_attempt_id")) {
        return long.class;
      }
      if (fieldName.equals("resource_manager_factory")) {
        return String.class;
      }
      if (fieldName.equals("resource_manager_version_class")) {
        return String.class;
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    @Override
    public Object getField(String fieldName) {
      if (fieldName.equals("id")) {
        return getId();
      }
      if (fieldName.equals("workflow_attempt_id")) {
        return getWorkflowAttemptId();
      }
      if (fieldName.equals("resource_manager_factory")) {
        return getResourceManagerFactory();
      }
      if (fieldName.equals("resource_manager_version_class")) {
        return getResourceManagerVersionClass();
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    public Object getField(_Fields field) {
      switch (field) {
        case workflow_attempt_id:
          return getWorkflowAttemptId();
        case resource_manager_factory:
          return getResourceManagerFactory();
        case resource_manager_version_class:
          return getResourceManagerVersionClass();
      }
      throw new IllegalStateException("Invalid field: " + field);
    }

    public boolean hasField(String fieldName) {
      if (fieldName.equals("id")) {
        return true;
      }
      if (fieldName.equals("workflow_attempt_id")) {
        return true;
      }
      if (fieldName.equals("resource_manager_factory")) {
        return true;
      }
      if (fieldName.equals("resource_manager_version_class")) {
        return true;
      }
      return false;
    }

    public static Object getDefaultValue(_Fields field) {
      switch (field) {
        case workflow_attempt_id:
          return null;
        case resource_manager_factory:
          return null;
        case resource_manager_version_class:
          return null;
      }
      throw new IllegalStateException("Invalid field: " + field);
    }
    
    @Override
    public Set<Enum> getFieldSet() {
      Set set = EnumSet.allOf(_Fields.class);
      return set;
    }
    
    public String toString() {
      return "<BackgroundAttemptInfo.Attributes"
          + " workflow_attempt_id: " + getWorkflowAttemptId()
          + " resource_manager_factory: " + getResourceManagerFactory()
          + " resource_manager_version_class: " + getResourceManagerVersionClass()
          + ">";
    }
  }

  public static class Id implements ModelIdWrapper<BackgroundAttemptInfo.Id> {
    public static final long serialVersionUID = 1L;

    private final long id;

    public Id(Long id) {
      this.id = id;
    }

    @Override
    public Long getId() {
      return id;
    }

    @Override
    public int compareTo(Id other) {
      return this.getId().compareTo(other.getId());
    }

    @Override
    public boolean equals(Object other) {
      if (other instanceof Id) {
        return this.getId().equals(((Id)other).getId());
      }
      return false;
    }

    @Override
    public int hashCode() {
      return this.getId().hashCode();
    }

    @Override
    public String toString() {
      return "<BackgroundAttemptInfo.Id: " + this.getId() + ">";
    }
  }

  public static Set<Attributes> convertToAttributesSet(Collection<BackgroundAttemptInfo> models) {
    return models.stream()
        .map(BackgroundAttemptInfo::getAttributes)
        .collect(Collectors.toSet());
  }

  public static class AssociationMetadata implements IModelAssociationMetadata {

    private List<IAssociationMetadata> meta = new ArrayList<>();

    public AssociationMetadata(){
      meta.add(new DefaultAssociationMetadata(AssociationType.BELONGS_TO, BackgroundAttemptInfo.class, WorkflowAttempt.class, "workflow_attempt_id"));
    }

    @Override
    public List<IAssociationMetadata> getAssociationMetadata() {
      return meta;
    }
  }

}
