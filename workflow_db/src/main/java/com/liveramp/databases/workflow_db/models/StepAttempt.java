
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.models;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import com.rapleaf.jack.AssociationType;
import com.rapleaf.jack.AttributesWithId;
import com.rapleaf.jack.BelongsToAssociation;
import com.rapleaf.jack.DefaultAssociationMetadata;
import com.rapleaf.jack.HasManyAssociation;
import com.rapleaf.jack.HasOneAssociation;
import com.rapleaf.jack.IAssociationMetadata;
import com.rapleaf.jack.IModelAssociationMetadata;
import com.rapleaf.jack.ModelIdWrapper;
import com.rapleaf.jack.ModelWithId;
import com.rapleaf.jack.queries.AbstractTable;
import com.rapleaf.jack.queries.Column;

import com.liveramp.databases.workflow_db.IDatabases;
import com.rapleaf.jack.util.JackUtility;

public class StepAttempt extends ModelWithId<StepAttempt, IDatabases> implements Comparable<StepAttempt>{
  
  public static final long serialVersionUID = -2075875460696677910L;

  public static class Tbl extends AbstractTable<StepAttempt.Attributes, StepAttempt> {
    public final Column<Long> ID;
    public final Column<Integer> WORKFLOW_ATTEMPT_ID;
    public final Column<String> STEP_TOKEN;
    public final Column<Long> START_TIME;
    public final Column<Long> END_TIME;
    public final Column<Integer> STEP_STATUS;
    public final Column<String> FAILURE_CAUSE;
    public final Column<String> FAILURE_TRACE;
    public final Column<String> ACTION_CLASS;
    public final Column<String> STATUS_MESSAGE;

    private Tbl(String alias) {
      super("step_attempts", alias, StepAttempt.Attributes.class, StepAttempt.class);
      this.ID = Column.fromId(alias);
      this.WORKFLOW_ATTEMPT_ID = Column.fromField(alias, _Fields.workflow_attempt_id, Integer.class);
      this.STEP_TOKEN = Column.fromField(alias, _Fields.step_token, String.class);
      this.START_TIME = Column.fromTimestamp(alias, _Fields.start_time);
      this.END_TIME = Column.fromTimestamp(alias, _Fields.end_time);
      this.STEP_STATUS = Column.fromField(alias, _Fields.step_status, Integer.class);
      this.FAILURE_CAUSE = Column.fromField(alias, _Fields.failure_cause, String.class);
      this.FAILURE_TRACE = Column.fromField(alias, _Fields.failure_trace, String.class);
      this.ACTION_CLASS = Column.fromField(alias, _Fields.action_class, String.class);
      this.STATUS_MESSAGE = Column.fromField(alias, _Fields.status_message, String.class);
      Collections.addAll(this.allColumns, ID, WORKFLOW_ATTEMPT_ID, STEP_TOKEN, START_TIME, END_TIME, STEP_STATUS, FAILURE_CAUSE, FAILURE_TRACE, ACTION_CLASS, STATUS_MESSAGE);
    }

    public static Tbl as(String alias) {
      return new Tbl(alias);
    }
  }

  public static final Tbl TBL = new Tbl("step_attempts");
  public static final Column<Long> ID = TBL.ID;
  public static final Column<Integer> WORKFLOW_ATTEMPT_ID = TBL.WORKFLOW_ATTEMPT_ID;
  public static final Column<String> STEP_TOKEN = TBL.STEP_TOKEN;
  public static final Column<Long> START_TIME = TBL.START_TIME;
  public static final Column<Long> END_TIME = TBL.END_TIME;
  public static final Column<Integer> STEP_STATUS = TBL.STEP_STATUS;
  public static final Column<String> FAILURE_CAUSE = TBL.FAILURE_CAUSE;
  public static final Column<String> FAILURE_TRACE = TBL.FAILURE_TRACE;
  public static final Column<String> ACTION_CLASS = TBL.ACTION_CLASS;
  public static final Column<String> STATUS_MESSAGE = TBL.STATUS_MESSAGE;

  private final Attributes attributes;

  private transient StepAttempt.Id cachedTypedId;

  // Associations
  private BelongsToAssociation<WorkflowAttempt> __assoc_workflow_attempt;
  private HasManyAssociation<StepDependency> __assoc_step_dependencies;
  private HasManyAssociation<StepDependency> __assoc_dependent_steps;
  private HasManyAssociation<StepAttemptDatastore> __assoc_step_attempt_datastores;
  private HasManyAssociation<MapreduceJob> __assoc_mapreduce_jobs;
  private HasManyAssociation<StepStatistic> __assoc_step_statistics;
  private HasOneAssociation<BackgroundStepAttemptInfo> __assoc_background_step_attempt_info;

  public enum _Fields {
    workflow_attempt_id,
    step_token,
    start_time,
    end_time,
    step_status,
    failure_cause,
    failure_trace,
    action_class,
    status_message,
  }

  @Override
  public StepAttempt.Id getTypedId() {
    if (cachedTypedId == null) {
      cachedTypedId = new StepAttempt.Id(this.getId());
    }
    return cachedTypedId;
  }

  public StepAttempt(long id, final int workflow_attempt_id, final String step_token, final Long start_time, final Long end_time, final int step_status, final String failure_cause, final String failure_trace, final String action_class, final String status_message, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, workflow_attempt_id, step_token, start_time, end_time, step_status, failure_cause, failure_trace, action_class, status_message);
    this.__assoc_workflow_attempt = new BelongsToAssociation<>(databases.getWorkflowDb().workflowAttempts(), (long) getWorkflowAttemptId());
    this.__assoc_step_dependencies = new HasManyAssociation<>(databases.getWorkflowDb().stepDependencies(), "step_attempt_id", getId());
    this.__assoc_dependent_steps = new HasManyAssociation<>(databases.getWorkflowDb().stepDependencies(), "dependency_attempt_id", getId());
    this.__assoc_step_attempt_datastores = new HasManyAssociation<>(databases.getWorkflowDb().stepAttemptDatastores(), "step_attempt_id", getId());
    this.__assoc_mapreduce_jobs = new HasManyAssociation<>(databases.getWorkflowDb().mapreduceJobs(), "step_attempt_id", getId());
    this.__assoc_step_statistics = new HasManyAssociation<>(databases.getWorkflowDb().stepStatistics(), "step_attempt_id", getId());
    this.__assoc_background_step_attempt_info = new HasOneAssociation<>(databases.getWorkflowDb().backgroundStepAttemptInfos(), "step_attempt_id", getId());
  }

  public StepAttempt(long id, final int workflow_attempt_id, final String step_token, final Long start_time, final Long end_time, final int step_status, final String failure_cause, final String failure_trace, final String action_class, final String status_message) {
    super(null);
    attributes = new Attributes(id, workflow_attempt_id, step_token, start_time, end_time, step_status, failure_cause, failure_trace, action_class, status_message);
  }
  
  public StepAttempt(long id, final int workflow_attempt_id, final String step_token, final int step_status, final String action_class, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, workflow_attempt_id, step_token, step_status, action_class);
    this.__assoc_workflow_attempt = new BelongsToAssociation<>(databases.getWorkflowDb().workflowAttempts(), (long) getWorkflowAttemptId());
    this.__assoc_step_dependencies = new HasManyAssociation<>(databases.getWorkflowDb().stepDependencies(), "step_attempt_id", getId());
    this.__assoc_dependent_steps = new HasManyAssociation<>(databases.getWorkflowDb().stepDependencies(), "dependency_attempt_id", getId());
    this.__assoc_step_attempt_datastores = new HasManyAssociation<>(databases.getWorkflowDb().stepAttemptDatastores(), "step_attempt_id", getId());
    this.__assoc_mapreduce_jobs = new HasManyAssociation<>(databases.getWorkflowDb().mapreduceJobs(), "step_attempt_id", getId());
    this.__assoc_step_statistics = new HasManyAssociation<>(databases.getWorkflowDb().stepStatistics(), "step_attempt_id", getId());
    this.__assoc_background_step_attempt_info = new HasOneAssociation<>(databases.getWorkflowDb().backgroundStepAttemptInfos(), "step_attempt_id", getId());
  }

  public StepAttempt(long id, final int workflow_attempt_id, final String step_token, final int step_status, final String action_class) {
    super(null);
    attributes = new Attributes(id, workflow_attempt_id, step_token, step_status, action_class);
  }

  public static StepAttempt newDefaultInstance(long id) {
    return new StepAttempt(id, 0, "", 0, "");
  }

  public StepAttempt(Attributes attributes, IDatabases databases) {
    super(databases);
    this.attributes = attributes;

    if (databases != null) {
      this.__assoc_workflow_attempt = new BelongsToAssociation<>(databases.getWorkflowDb().workflowAttempts(), (long) getWorkflowAttemptId());
      this.__assoc_step_dependencies = new HasManyAssociation<>(databases.getWorkflowDb().stepDependencies(), "step_attempt_id", getId());
      this.__assoc_dependent_steps = new HasManyAssociation<>(databases.getWorkflowDb().stepDependencies(), "dependency_attempt_id", getId());
      this.__assoc_step_attempt_datastores = new HasManyAssociation<>(databases.getWorkflowDb().stepAttemptDatastores(), "step_attempt_id", getId());
      this.__assoc_mapreduce_jobs = new HasManyAssociation<>(databases.getWorkflowDb().mapreduceJobs(), "step_attempt_id", getId());
      this.__assoc_step_statistics = new HasManyAssociation<>(databases.getWorkflowDb().stepStatistics(), "step_attempt_id", getId());
      this.__assoc_background_step_attempt_info = new HasOneAssociation<>(databases.getWorkflowDb().backgroundStepAttemptInfos(), "step_attempt_id", getId());
    }
  }

  public StepAttempt(Attributes attributes) {
    this(attributes, (IDatabases) null);
  }

  public StepAttempt(long id, Map<Enum, Object> fieldsMap) {
    super(null);
    attributes = new Attributes(id, fieldsMap);
  }

  public StepAttempt (StepAttempt other) {
    this(other, (IDatabases)null);
  }

  public StepAttempt (StepAttempt other, IDatabases databases) {
    super(databases);
    attributes = new Attributes(other.getAttributes());

    if (databases != null) {
      this.__assoc_workflow_attempt = new BelongsToAssociation<>(databases.getWorkflowDb().workflowAttempts(), (long) getWorkflowAttemptId());
      this.__assoc_step_dependencies = new HasManyAssociation<>(databases.getWorkflowDb().stepDependencies(), "step_attempt_id", getId());
      this.__assoc_dependent_steps = new HasManyAssociation<>(databases.getWorkflowDb().stepDependencies(), "dependency_attempt_id", getId());
      this.__assoc_step_attempt_datastores = new HasManyAssociation<>(databases.getWorkflowDb().stepAttemptDatastores(), "step_attempt_id", getId());
      this.__assoc_mapreduce_jobs = new HasManyAssociation<>(databases.getWorkflowDb().mapreduceJobs(), "step_attempt_id", getId());
      this.__assoc_step_statistics = new HasManyAssociation<>(databases.getWorkflowDb().stepStatistics(), "step_attempt_id", getId());
      this.__assoc_background_step_attempt_info = new HasOneAssociation<>(databases.getWorkflowDb().backgroundStepAttemptInfos(), "step_attempt_id", getId());
    }
  }

  public Attributes getAttributes() {
    return attributes;
  }

  public int getWorkflowAttemptId() {
    return attributes.getWorkflowAttemptId();
  }

  public StepAttempt setWorkflowAttemptId(int newval) {
    attributes.setWorkflowAttemptId(newval);
    if(__assoc_workflow_attempt != null){
      this.__assoc_workflow_attempt.setOwnerId(newval);
    }
    cachedHashCode = 0;
    return this;
  }

  public String getStepToken() {
    return attributes.getStepToken();
  }

  public StepAttempt setStepToken(String newval) {
    attributes.setStepToken(newval);
    cachedHashCode = 0;
    return this;
  }

  public Long getStartTime() {
    return attributes.getStartTime();
  }

  public StepAttempt setStartTime(Long newval) {
    attributes.setStartTime(newval);
    cachedHashCode = 0;
    return this;
  }

  public Long getEndTime() {
    return attributes.getEndTime();
  }

  public StepAttempt setEndTime(Long newval) {
    attributes.setEndTime(newval);
    cachedHashCode = 0;
    return this;
  }

  public int getStepStatus() {
    return attributes.getStepStatus();
  }

  public StepAttempt setStepStatus(int newval) {
    attributes.setStepStatus(newval);
    cachedHashCode = 0;
    return this;
  }

  public String getFailureCause() {
    return attributes.getFailureCause();
  }

  public StepAttempt setFailureCause(String newval) {
    attributes.setFailureCause(newval);
    cachedHashCode = 0;
    return this;
  }

  public String getFailureTrace() {
    return attributes.getFailureTrace();
  }

  public StepAttempt setFailureTrace(String newval) {
    attributes.setFailureTrace(newval);
    cachedHashCode = 0;
    return this;
  }

  public String getActionClass() {
    return attributes.getActionClass();
  }

  public StepAttempt setActionClass(String newval) {
    attributes.setActionClass(newval);
    cachedHashCode = 0;
    return this;
  }

  public String getStatusMessage() {
    return attributes.getStatusMessage();
  }

  public StepAttempt setStatusMessage(String newval) {
    attributes.setStatusMessage(newval);
    cachedHashCode = 0;
    return this;
  }

  public void setField(_Fields field, Object value) {
    switch (field) {
      case workflow_attempt_id:
        setWorkflowAttemptId((Integer)value);
        break;
      case step_token:
        setStepToken((String)value);
        break;
      case start_time:
        setStartTime((Long)value);
        break;
      case end_time:
        setEndTime((Long)value);
        break;
      case step_status:
        setStepStatus((Integer)value);
        break;
      case failure_cause:
        setFailureCause((String)value);
        break;
      case failure_trace:
        setFailureTrace((String)value);
        break;
      case action_class:
        setActionClass((String)value);
        break;
      case status_message:
        setStatusMessage((String)value);
        break;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }
  }
  
  public void setField(String fieldName, Object value) {
    if (fieldName.equals("workflow_attempt_id")) {
      setWorkflowAttemptId((Integer)  value);
      return;
    }
    if (fieldName.equals("step_token")) {
      setStepToken((String)  value);
      return;
    }
    if (fieldName.equals("start_time")) {
      setStartTime((Long)  value);
      return;
    }
    if (fieldName.equals("end_time")) {
      setEndTime((Long)  value);
      return;
    }
    if (fieldName.equals("step_status")) {
      setStepStatus((Integer)  value);
      return;
    }
    if (fieldName.equals("failure_cause")) {
      setFailureCause((String)  value);
      return;
    }
    if (fieldName.equals("failure_trace")) {
      setFailureTrace((String)  value);
      return;
    }
    if (fieldName.equals("action_class")) {
      setActionClass((String)  value);
      return;
    }
    if (fieldName.equals("status_message")) {
      setStatusMessage((String)  value);
      return;
    }
    throw new IllegalStateException("Invalid field: " + fieldName);
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
      case workflow_attempt_id:
        return int.class;
      case step_token:
        return String.class;
      case start_time:
        return Long.class;
      case end_time:
        return Long.class;
      case step_status:
        return int.class;
      case failure_cause:
        return String.class;
      case failure_trace:
        return String.class;
      case action_class:
        return String.class;
      case status_message:
        return String.class;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
    if (fieldName.equals("workflow_attempt_id")) {
      return int.class;
    }
    if (fieldName.equals("step_token")) {
      return String.class;
    }
    if (fieldName.equals("start_time")) {
      return Long.class;
    }
    if (fieldName.equals("end_time")) {
      return Long.class;
    }
    if (fieldName.equals("step_status")) {
      return int.class;
    }
    if (fieldName.equals("failure_cause")) {
      return String.class;
    }
    if (fieldName.equals("failure_trace")) {
      return String.class;
    }
    if (fieldName.equals("action_class")) {
      return String.class;
    }
    if (fieldName.equals("status_message")) {
      return String.class;
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public WorkflowAttempt getWorkflowAttempt() throws IOException {
    return __assoc_workflow_attempt.get();
  }

  public List<StepDependency> getStepDependencies() throws IOException {
    return __assoc_step_dependencies.get();
  }

  public List<StepDependency> getDependentSteps() throws IOException {
    return __assoc_dependent_steps.get();
  }

  public List<StepAttemptDatastore> getStepAttemptDatastores() throws IOException {
    return __assoc_step_attempt_datastores.get();
  }

  public List<MapreduceJob> getMapreduceJobs() throws IOException {
    return __assoc_mapreduce_jobs.get();
  }

  public List<StepStatistic> getStepStatistics() throws IOException {
    return __assoc_step_statistics.get();
  }

  public BackgroundStepAttemptInfo getBackgroundStepAttemptInfo() throws IOException {
    return __assoc_background_step_attempt_info.get();
  }

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
    if (fieldName.equals("workflow_attempt_id")) {
      return getWorkflowAttemptId();
    }
    if (fieldName.equals("step_token")) {
      return getStepToken();
    }
    if (fieldName.equals("start_time")) {
      return getStartTime();
    }
    if (fieldName.equals("end_time")) {
      return getEndTime();
    }
    if (fieldName.equals("step_status")) {
      return getStepStatus();
    }
    if (fieldName.equals("failure_cause")) {
      return getFailureCause();
    }
    if (fieldName.equals("failure_trace")) {
      return getFailureTrace();
    }
    if (fieldName.equals("action_class")) {
      return getActionClass();
    }
    if (fieldName.equals("status_message")) {
      return getStatusMessage();
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
      case workflow_attempt_id:
        return getWorkflowAttemptId();
      case step_token:
        return getStepToken();
      case start_time:
        return getStartTime();
      case end_time:
        return getEndTime();
      case step_status:
        return getStepStatus();
      case failure_cause:
        return getFailureCause();
      case failure_trace:
        return getFailureTrace();
      case action_class:
        return getActionClass();
      case status_message:
        return getStatusMessage();
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  public boolean hasField(String fieldName) {
    if (fieldName.equals("id")) {
      return true;
    }
    if (fieldName.equals("workflow_attempt_id")) {
      return true;
    }
    if (fieldName.equals("step_token")) {
      return true;
    }
    if (fieldName.equals("start_time")) {
      return true;
    }
    if (fieldName.equals("end_time")) {
      return true;
    }
    if (fieldName.equals("step_status")) {
      return true;
    }
    if (fieldName.equals("failure_cause")) {
      return true;
    }
    if (fieldName.equals("failure_trace")) {
      return true;
    }
    if (fieldName.equals("action_class")) {
      return true;
    }
    if (fieldName.equals("status_message")) {
      return true;
    }
    return false;
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
      case workflow_attempt_id:
        return null;
      case step_token:
        return null;
      case start_time:
        return null;
      case end_time:
        return null;
      case step_status:
        return null;
      case failure_cause:
        return null;
      case failure_trace:
        return null;
      case action_class:
        return null;
      case status_message:
        return null;
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public StepAttempt getCopy() {
    return getCopy(databases);
  }

  @Override
  public StepAttempt getCopy(IDatabases databases) {
    return new StepAttempt(this, databases);
  }

  @Override
  public boolean save() throws IOException {
    return databases.getWorkflowDb().stepAttempts().save(this);
  }

  public WorkflowAttempt createWorkflowAttempt(final int workflow_execution_id, final String system_user, final String priority, final String pool, final String host) throws IOException {
 
    WorkflowAttempt newWorkflowAttempt = databases.getWorkflowDb().workflowAttempts().create(workflow_execution_id, system_user, priority, pool, host);
    setWorkflowAttemptId(JackUtility.safeLongToInt(newWorkflowAttempt.getId()));
    save();
    __assoc_workflow_attempt.clearCache();
    return newWorkflowAttempt;
  }

  public WorkflowAttempt createWorkflowAttempt(final int workflow_execution_id, final String system_user, final String shutdown_reason, final String priority, final String pool, final String host, final Long start_time, final Long end_time, final Integer status, final Long last_heartbeat, final String launch_dir, final String launch_jar, final String error_email, final String info_email, final String scm_remote, final String commit_revision, final String description) throws IOException {
 
    WorkflowAttempt newWorkflowAttempt = databases.getWorkflowDb().workflowAttempts().create(workflow_execution_id, system_user, shutdown_reason, priority, pool, host, start_time, end_time, status, last_heartbeat, launch_dir, launch_jar, error_email, info_email, scm_remote, commit_revision, description);
    setWorkflowAttemptId(JackUtility.safeLongToInt(newWorkflowAttempt.getId()));
    save();
    __assoc_workflow_attempt.clearCache();
    return newWorkflowAttempt;
  }

  public WorkflowAttempt createWorkflowAttempt() throws IOException {
 
    WorkflowAttempt newWorkflowAttempt = databases.getWorkflowDb().workflowAttempts().create(0, "", "", "", "");
    setWorkflowAttemptId(JackUtility.safeLongToInt(newWorkflowAttempt.getId()));
    save();
    __assoc_workflow_attempt.clearCache();
    return newWorkflowAttempt;
  }

  public String toString() {
    return "<StepAttempt"
        + " id: " + this.getId()
        + " workflow_attempt_id: " + getWorkflowAttemptId()
        + " step_token: " + getStepToken()
        + " start_time: " + getStartTime()
        + " end_time: " + getEndTime()
        + " step_status: " + getStepStatus()
        + " failure_cause: " + getFailureCause()
        + " failure_trace: " + getFailureTrace()
        + " action_class: " + getActionClass()
        + " status_message: " + getStatusMessage()
        + ">";
  }

  public void unsetAssociations() {
    unsetDatabaseReference();
    __assoc_workflow_attempt = null;
    __assoc_step_dependencies = null;
    __assoc_dependent_steps = null;
    __assoc_step_attempt_datastores = null;
    __assoc_mapreduce_jobs = null;
    __assoc_step_statistics = null;
    __assoc_background_step_attempt_info = null;
  }

  public int compareTo(StepAttempt that) {
    return Long.valueOf(this.getId()).compareTo(that.getId());
  }
  
  
  public static class Attributes extends AttributesWithId {
    
    public static final long serialVersionUID = 3265631533786845359L;

    // Fields
    private int __workflow_attempt_id;
    private String __step_token;
    private Long __start_time;
    private Long __end_time;
    private int __step_status;
    private String __failure_cause;
    private String __failure_trace;
    private String __action_class;
    private String __status_message;

    public Attributes(long id) {
      super(id);
    }

    public Attributes(long id, final int workflow_attempt_id, final String step_token, final Long start_time, final Long end_time, final int step_status, final String failure_cause, final String failure_trace, final String action_class, final String status_message) {
      super(id);
      this.__workflow_attempt_id = workflow_attempt_id;
      this.__step_token = step_token;
      this.__start_time = start_time;
      this.__end_time = end_time;
      this.__step_status = step_status;
      this.__failure_cause = failure_cause;
      this.__failure_trace = failure_trace;
      this.__action_class = action_class;
      this.__status_message = status_message;
    }
    
    public Attributes(long id, final int workflow_attempt_id, final String step_token, final int step_status, final String action_class) {
      super(id);
      this.__workflow_attempt_id = workflow_attempt_id;
      this.__step_token = step_token;
      this.__step_status = step_status;
      this.__action_class = action_class;
    }

    public static Attributes newDefaultInstance(long id) {
      return new Attributes(id, 0, "", 0, "");
    }

    public Attributes(long id, Map<Enum, Object> fieldsMap) {
      super(id);
      int workflow_attempt_id = (Integer)fieldsMap.get(StepAttempt._Fields.workflow_attempt_id);
      String step_token = (String)fieldsMap.get(StepAttempt._Fields.step_token);
      Long start_time = (Long)fieldsMap.get(StepAttempt._Fields.start_time);
      Long end_time = (Long)fieldsMap.get(StepAttempt._Fields.end_time);
      int step_status = (Integer)fieldsMap.get(StepAttempt._Fields.step_status);
      String failure_cause = (String)fieldsMap.get(StepAttempt._Fields.failure_cause);
      String failure_trace = (String)fieldsMap.get(StepAttempt._Fields.failure_trace);
      String action_class = (String)fieldsMap.get(StepAttempt._Fields.action_class);
      String status_message = (String)fieldsMap.get(StepAttempt._Fields.status_message);
      this.__workflow_attempt_id = workflow_attempt_id;
      this.__step_token = step_token;
      this.__start_time = start_time;
      this.__end_time = end_time;
      this.__step_status = step_status;
      this.__failure_cause = failure_cause;
      this.__failure_trace = failure_trace;
      this.__action_class = action_class;
      this.__status_message = status_message;
    }

    public Attributes(Attributes other) {
      super(other.getId());
      this.__workflow_attempt_id = other.getWorkflowAttemptId();
      this.__step_token = other.getStepToken();
      this.__start_time = other.getStartTime();
      this.__end_time = other.getEndTime();
      this.__step_status = other.getStepStatus();
      this.__failure_cause = other.getFailureCause();
      this.__failure_trace = other.getFailureTrace();
      this.__action_class = other.getActionClass();
      this.__status_message = other.getStatusMessage();
    }

    public int getWorkflowAttemptId() {
      return __workflow_attempt_id;
    }

    public Attributes setWorkflowAttemptId(int newval) {
      this.__workflow_attempt_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getStepToken() {
      return __step_token;
    }

    public Attributes setStepToken(String newval) {
      this.__step_token = newval;
      cachedHashCode = 0;
      return this;
    }

    public Long getStartTime() {
      return __start_time;
    }

    public Attributes setStartTime(Long newval) {
      this.__start_time = newval;
      cachedHashCode = 0;
      return this;
    }

    public Long getEndTime() {
      return __end_time;
    }

    public Attributes setEndTime(Long newval) {
      this.__end_time = newval;
      cachedHashCode = 0;
      return this;
    }

    public int getStepStatus() {
      return __step_status;
    }

    public Attributes setStepStatus(int newval) {
      this.__step_status = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getFailureCause() {
      return __failure_cause;
    }

    public Attributes setFailureCause(String newval) {
      this.__failure_cause = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getFailureTrace() {
      return __failure_trace;
    }

    public Attributes setFailureTrace(String newval) {
      this.__failure_trace = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getActionClass() {
      return __action_class;
    }

    public Attributes setActionClass(String newval) {
      this.__action_class = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getStatusMessage() {
      return __status_message;
    }

    public Attributes setStatusMessage(String newval) {
      this.__status_message = newval;
      cachedHashCode = 0;
      return this;
    }

    public void setField(_Fields field, Object value) {
      switch (field) {
        case workflow_attempt_id:
          setWorkflowAttemptId((Integer)value);
          break;
        case step_token:
          setStepToken((String)value);
          break;
        case start_time:
          setStartTime((Long)value);
          break;
        case end_time:
          setEndTime((Long)value);
          break;
        case step_status:
          setStepStatus((Integer)value);
          break;
        case failure_cause:
          setFailureCause((String)value);
          break;
        case failure_trace:
          setFailureTrace((String)value);
          break;
        case action_class:
          setActionClass((String)value);
          break;
        case status_message:
          setStatusMessage((String)value);
          break;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }
    }

    public void setField(String fieldName, Object value) {
      if (fieldName.equals("workflow_attempt_id")) {
        setWorkflowAttemptId((Integer)value);
        return;
      }
      if (fieldName.equals("step_token")) {
        setStepToken((String)value);
        return;
      }
      if (fieldName.equals("start_time")) {
        setStartTime((Long)value);
        return;
      }
      if (fieldName.equals("end_time")) {
        setEndTime((Long)value);
        return;
      }
      if (fieldName.equals("step_status")) {
        setStepStatus((Integer)value);
        return;
      }
      if (fieldName.equals("failure_cause")) {
        setFailureCause((String)value);
        return;
      }
      if (fieldName.equals("failure_trace")) {
        setFailureTrace((String)value);
        return;
      }
      if (fieldName.equals("action_class")) {
        setActionClass((String)value);
        return;
      }
      if (fieldName.equals("status_message")) {
        setStatusMessage((String)value);
        return;
      }
      throw new IllegalStateException("Invalid field: " + fieldName);
    }

    public static Class getFieldType(_Fields field) {
      switch (field) {
        case workflow_attempt_id:
          return int.class;
        case step_token:
          return String.class;
        case start_time:
          return Long.class;
        case end_time:
          return Long.class;
        case step_status:
          return int.class;
        case failure_cause:
          return String.class;
        case failure_trace:
          return String.class;
        case action_class:
          return String.class;
        case status_message:
          return String.class;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }    
    }

    public static Class getFieldType(String fieldName) {    
      if (fieldName.equals("workflow_attempt_id")) {
        return int.class;
      }
      if (fieldName.equals("step_token")) {
        return String.class;
      }
      if (fieldName.equals("start_time")) {
        return Long.class;
      }
      if (fieldName.equals("end_time")) {
        return Long.class;
      }
      if (fieldName.equals("step_status")) {
        return int.class;
      }
      if (fieldName.equals("failure_cause")) {
        return String.class;
      }
      if (fieldName.equals("failure_trace")) {
        return String.class;
      }
      if (fieldName.equals("action_class")) {
        return String.class;
      }
      if (fieldName.equals("status_message")) {
        return String.class;
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    @Override
    public Object getField(String fieldName) {
      if (fieldName.equals("id")) {
        return getId();
      }
      if (fieldName.equals("workflow_attempt_id")) {
        return getWorkflowAttemptId();
      }
      if (fieldName.equals("step_token")) {
        return getStepToken();
      }
      if (fieldName.equals("start_time")) {
        return getStartTime();
      }
      if (fieldName.equals("end_time")) {
        return getEndTime();
      }
      if (fieldName.equals("step_status")) {
        return getStepStatus();
      }
      if (fieldName.equals("failure_cause")) {
        return getFailureCause();
      }
      if (fieldName.equals("failure_trace")) {
        return getFailureTrace();
      }
      if (fieldName.equals("action_class")) {
        return getActionClass();
      }
      if (fieldName.equals("status_message")) {
        return getStatusMessage();
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    public Object getField(_Fields field) {
      switch (field) {
        case workflow_attempt_id:
          return getWorkflowAttemptId();
        case step_token:
          return getStepToken();
        case start_time:
          return getStartTime();
        case end_time:
          return getEndTime();
        case step_status:
          return getStepStatus();
        case failure_cause:
          return getFailureCause();
        case failure_trace:
          return getFailureTrace();
        case action_class:
          return getActionClass();
        case status_message:
          return getStatusMessage();
      }
      throw new IllegalStateException("Invalid field: " + field);
    }

    public boolean hasField(String fieldName) {
      if (fieldName.equals("id")) {
        return true;
      }
      if (fieldName.equals("workflow_attempt_id")) {
        return true;
      }
      if (fieldName.equals("step_token")) {
        return true;
      }
      if (fieldName.equals("start_time")) {
        return true;
      }
      if (fieldName.equals("end_time")) {
        return true;
      }
      if (fieldName.equals("step_status")) {
        return true;
      }
      if (fieldName.equals("failure_cause")) {
        return true;
      }
      if (fieldName.equals("failure_trace")) {
        return true;
      }
      if (fieldName.equals("action_class")) {
        return true;
      }
      if (fieldName.equals("status_message")) {
        return true;
      }
      return false;
    }

    public static Object getDefaultValue(_Fields field) {
      switch (field) {
        case workflow_attempt_id:
          return null;
        case step_token:
          return null;
        case start_time:
          return null;
        case end_time:
          return null;
        case step_status:
          return null;
        case failure_cause:
          return null;
        case failure_trace:
          return null;
        case action_class:
          return null;
        case status_message:
          return null;
      }
      throw new IllegalStateException("Invalid field: " + field);
    }
    
    @Override
    public Set<Enum> getFieldSet() {
      Set set = EnumSet.allOf(_Fields.class);
      return set;
    }
    
    public String toString() {
      return "<StepAttempt.Attributes"
          + " workflow_attempt_id: " + getWorkflowAttemptId()
          + " step_token: " + getStepToken()
          + " start_time: " + getStartTime()
          + " end_time: " + getEndTime()
          + " step_status: " + getStepStatus()
          + " failure_cause: " + getFailureCause()
          + " failure_trace: " + getFailureTrace()
          + " action_class: " + getActionClass()
          + " status_message: " + getStatusMessage()
          + ">";
    }
  }

  public static class Id implements ModelIdWrapper<StepAttempt.Id> {
    public static final long serialVersionUID = 1L;

    private final long id;

    public Id(Long id) {
      this.id = id;
    }

    @Override
    public Long getId() {
      return id;
    }

    @Override
    public int compareTo(Id other) {
      return this.getId().compareTo(other.getId());
    }

    @Override
    public boolean equals(Object other) {
      if (other instanceof Id) {
        return this.getId().equals(((Id)other).getId());
      }
      return false;
    }

    @Override
    public int hashCode() {
      return this.getId().hashCode();
    }

    @Override
    public String toString() {
      return "<StepAttempt.Id: " + this.getId() + ">";
    }
  }

  public static Set<Attributes> convertToAttributesSet(Collection<StepAttempt> models) {
    return models.stream()
        .map(StepAttempt::getAttributes)
        .collect(Collectors.toSet());
  }

  public static class AssociationMetadata implements IModelAssociationMetadata {

    private List<IAssociationMetadata> meta = new ArrayList<>();

    public AssociationMetadata(){
      meta.add(new DefaultAssociationMetadata(AssociationType.BELONGS_TO, StepAttempt.class, WorkflowAttempt.class, "workflow_attempt_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_MANY, StepAttempt.class, StepDependency.class, "step_attempt_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_MANY, StepAttempt.class, StepDependency.class, "dependency_attempt_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_MANY, StepAttempt.class, StepAttemptDatastore.class, "step_attempt_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_MANY, StepAttempt.class, MapreduceJob.class, "step_attempt_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_MANY, StepAttempt.class, StepStatistic.class, "step_attempt_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_ONE, StepAttempt.class, BackgroundStepAttemptInfo.class, "step_attempt_id"));
    }

    @Override
    public List<IAssociationMetadata> getAssociationMetadata() {
      return meta;
    }
  }

}
