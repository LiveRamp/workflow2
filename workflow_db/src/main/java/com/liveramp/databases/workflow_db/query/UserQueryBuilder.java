/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.query;

import java.util.Collection;

import com.rapleaf.jack.queries.AbstractQueryBuilder;
import com.rapleaf.jack.queries.Column;
import com.rapleaf.jack.queries.FieldSelector;
import com.rapleaf.jack.queries.where_operators.IWhereOperator;
import com.rapleaf.jack.queries.where_operators.JackMatchers;
import com.rapleaf.jack.queries.WhereConstraint;
import com.rapleaf.jack.queries.QueryOrder;
import com.rapleaf.jack.queries.OrderCriterion;
import com.rapleaf.jack.queries.LimitCriterion;
import com.liveramp.databases.workflow_db.iface.IUserPersistence;
import com.liveramp.databases.workflow_db.models.User;


public class UserQueryBuilder extends AbstractQueryBuilder<User> {

  public UserQueryBuilder(IUserPersistence caller) {
    super(caller);
  }

  public UserQueryBuilder select(User._Fields... fields) {
    for (User._Fields field : fields){
      addSelectedField(new FieldSelector(field));
    }
    return this;
  }

  public UserQueryBuilder selectAgg(FieldSelector... aggregatedFields) {
    addSelectedFields(aggregatedFields);
    return this;
  }

  public UserQueryBuilder id(Long value) {
    addId(value);
    return this;
  }

  public UserQueryBuilder idIn(Collection<Long> values) {
    addIds(values);
    return this;
  }

  public UserQueryBuilder whereId(IWhereOperator<Long> operator) {
    addWhereConstraint(new WhereConstraint<>(Column.fromId(null), operator, null));
    return this;
  }

  public UserQueryBuilder limit(int offset, int nResults) {
    setLimit(new LimitCriterion(offset, nResults));
    return this;
  }

  public UserQueryBuilder limit(int nResults) {
    setLimit(new LimitCriterion(nResults));
    return this;
  }

  public UserQueryBuilder groupBy(User._Fields... fields) {
    addGroupByFields(fields);
    return this;
  }

  public UserQueryBuilder order() {
    this.addOrder(new OrderCriterion(QueryOrder.ASC));
    return this;
  }

  public UserQueryBuilder order(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(queryOrder));
    return this;
  }

  public UserQueryBuilder orderById() {
    this.addOrder(new OrderCriterion(QueryOrder.ASC));
    return this;
  }

  public UserQueryBuilder orderById(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(queryOrder));
    return this;
  }

  public UserQueryBuilder username(String value) {
    addWhereConstraint(new WhereConstraint<>(User._Fields.username, JackMatchers.equalTo(value)));
    return this;
  }

  public UserQueryBuilder whereUsername(IWhereOperator<String> operator) {
    addWhereConstraint(new WhereConstraint<>(User._Fields.username, operator));
    return this;
  }

  public UserQueryBuilder orderByUsername() {
    this.addOrder(new OrderCriterion(User._Fields.username, QueryOrder.ASC));
    return this;
  }

  public UserQueryBuilder orderByUsername(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(User._Fields.username, queryOrder));
    return this;
  }

  public UserQueryBuilder notificationEmail(String value) {
    addWhereConstraint(new WhereConstraint<>(User._Fields.notification_email, JackMatchers.equalTo(value)));
    return this;
  }

  public UserQueryBuilder whereNotificationEmail(IWhereOperator<String> operator) {
    addWhereConstraint(new WhereConstraint<>(User._Fields.notification_email, operator));
    return this;
  }

  public UserQueryBuilder orderByNotificationEmail() {
    this.addOrder(new OrderCriterion(User._Fields.notification_email, QueryOrder.ASC));
    return this;
  }

  public UserQueryBuilder orderByNotificationEmail(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(User._Fields.notification_email, queryOrder));
    return this;
  }
}
