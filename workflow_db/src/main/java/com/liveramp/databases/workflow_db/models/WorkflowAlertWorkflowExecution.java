
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.models;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import com.rapleaf.jack.AssociationType;
import com.rapleaf.jack.AttributesWithId;
import com.rapleaf.jack.BelongsToAssociation;
import com.rapleaf.jack.DefaultAssociationMetadata;
import com.rapleaf.jack.HasManyAssociation;
import com.rapleaf.jack.HasOneAssociation;
import com.rapleaf.jack.IAssociationMetadata;
import com.rapleaf.jack.IModelAssociationMetadata;
import com.rapleaf.jack.ModelIdWrapper;
import com.rapleaf.jack.ModelWithId;
import com.rapleaf.jack.queries.AbstractTable;
import com.rapleaf.jack.queries.Column;

import com.liveramp.databases.workflow_db.IDatabases;
import com.rapleaf.jack.util.JackUtility;

public class WorkflowAlertWorkflowExecution extends ModelWithId<WorkflowAlertWorkflowExecution, IDatabases> implements Comparable<WorkflowAlertWorkflowExecution>{
  
  public static final long serialVersionUID = 9039359899511813425L;

  public static class Tbl extends AbstractTable<WorkflowAlertWorkflowExecution.Attributes, WorkflowAlertWorkflowExecution> {
    public final Column<Long> ID;
    public final Column<Long> WORKFLOW_ALERT_ID;
    public final Column<Long> WORKFLOW_EXECUTION_ID;

    private Tbl(String alias) {
      super("workflow_alert_workflow_executions", alias, WorkflowAlertWorkflowExecution.Attributes.class, WorkflowAlertWorkflowExecution.class);
      this.ID = Column.fromId(alias);
      this.WORKFLOW_ALERT_ID = Column.fromField(alias, _Fields.workflow_alert_id, Long.class);
      this.WORKFLOW_EXECUTION_ID = Column.fromField(alias, _Fields.workflow_execution_id, Long.class);
      Collections.addAll(this.allColumns, ID, WORKFLOW_ALERT_ID, WORKFLOW_EXECUTION_ID);
    }

    public static Tbl as(String alias) {
      return new Tbl(alias);
    }
  }

  public static final Tbl TBL = new Tbl("workflow_alert_workflow_executions");
  public static final Column<Long> ID = TBL.ID;
  public static final Column<Long> WORKFLOW_ALERT_ID = TBL.WORKFLOW_ALERT_ID;
  public static final Column<Long> WORKFLOW_EXECUTION_ID = TBL.WORKFLOW_EXECUTION_ID;

  private final Attributes attributes;

  private transient WorkflowAlertWorkflowExecution.Id cachedTypedId;

  // Associations
  private BelongsToAssociation<WorkflowExecution> __assoc_workflow_execution;
  private BelongsToAssociation<WorkflowAlert> __assoc_workflow_alert;

  public enum _Fields {
    workflow_alert_id,
    workflow_execution_id,
  }

  @Override
  public WorkflowAlertWorkflowExecution.Id getTypedId() {
    if (cachedTypedId == null) {
      cachedTypedId = new WorkflowAlertWorkflowExecution.Id(this.getId());
    }
    return cachedTypedId;
  }

  public WorkflowAlertWorkflowExecution(long id, final long workflow_alert_id, final long workflow_execution_id, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, workflow_alert_id, workflow_execution_id);
    this.__assoc_workflow_execution = new BelongsToAssociation<>(databases.getWorkflowDb().workflowExecutions(), getWorkflowExecutionId());
    this.__assoc_workflow_alert = new BelongsToAssociation<>(databases.getWorkflowDb().workflowAlerts(), getWorkflowAlertId());
  }

  public WorkflowAlertWorkflowExecution(long id, final long workflow_alert_id, final long workflow_execution_id) {
    super(null);
    attributes = new Attributes(id, workflow_alert_id, workflow_execution_id);
  }

  public static WorkflowAlertWorkflowExecution newDefaultInstance(long id) {
    return new WorkflowAlertWorkflowExecution(id, 0L, 0L);
  }

  public WorkflowAlertWorkflowExecution(Attributes attributes, IDatabases databases) {
    super(databases);
    this.attributes = attributes;

    if (databases != null) {
      this.__assoc_workflow_execution = new BelongsToAssociation<>(databases.getWorkflowDb().workflowExecutions(), getWorkflowExecutionId());
      this.__assoc_workflow_alert = new BelongsToAssociation<>(databases.getWorkflowDb().workflowAlerts(), getWorkflowAlertId());
    }
  }

  public WorkflowAlertWorkflowExecution(Attributes attributes) {
    this(attributes, (IDatabases) null);
  }

  public WorkflowAlertWorkflowExecution(long id, Map<Enum, Object> fieldsMap) {
    super(null);
    attributes = new Attributes(id, fieldsMap);
  }

  public WorkflowAlertWorkflowExecution (WorkflowAlertWorkflowExecution other) {
    this(other, (IDatabases)null);
  }

  public WorkflowAlertWorkflowExecution (WorkflowAlertWorkflowExecution other, IDatabases databases) {
    super(databases);
    attributes = new Attributes(other.getAttributes());

    if (databases != null) {
      this.__assoc_workflow_execution = new BelongsToAssociation<>(databases.getWorkflowDb().workflowExecutions(), getWorkflowExecutionId());
      this.__assoc_workflow_alert = new BelongsToAssociation<>(databases.getWorkflowDb().workflowAlerts(), getWorkflowAlertId());
    }
  }

  public Attributes getAttributes() {
    return attributes;
  }

  public long getWorkflowAlertId() {
    return attributes.getWorkflowAlertId();
  }

  public WorkflowAlertWorkflowExecution setWorkflowAlertId(long newval) {
    attributes.setWorkflowAlertId(newval);
    if(__assoc_workflow_alert != null){
      this.__assoc_workflow_alert.setOwnerId(newval);
    }
    cachedHashCode = 0;
    return this;
  }

  public long getWorkflowExecutionId() {
    return attributes.getWorkflowExecutionId();
  }

  public WorkflowAlertWorkflowExecution setWorkflowExecutionId(long newval) {
    attributes.setWorkflowExecutionId(newval);
    if(__assoc_workflow_execution != null){
      this.__assoc_workflow_execution.setOwnerId(newval);
    }
    cachedHashCode = 0;
    return this;
  }

  public void setField(_Fields field, Object value) {
    switch (field) {
      case workflow_alert_id:
        setWorkflowAlertId((Long)value);
        break;
      case workflow_execution_id:
        setWorkflowExecutionId((Long)value);
        break;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }
  }
  
  public void setField(String fieldName, Object value) {
    if (fieldName.equals("workflow_alert_id")) {
      setWorkflowAlertId((Long)  value);
      return;
    }
    if (fieldName.equals("workflow_execution_id")) {
      setWorkflowExecutionId((Long)  value);
      return;
    }
    throw new IllegalStateException("Invalid field: " + fieldName);
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
      case workflow_alert_id:
        return long.class;
      case workflow_execution_id:
        return long.class;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
    if (fieldName.equals("workflow_alert_id")) {
      return long.class;
    }
    if (fieldName.equals("workflow_execution_id")) {
      return long.class;
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public WorkflowExecution getWorkflowExecution() throws IOException {
    return __assoc_workflow_execution.get();
  }

  public WorkflowAlert getWorkflowAlert() throws IOException {
    return __assoc_workflow_alert.get();
  }

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
    if (fieldName.equals("workflow_alert_id")) {
      return getWorkflowAlertId();
    }
    if (fieldName.equals("workflow_execution_id")) {
      return getWorkflowExecutionId();
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
      case workflow_alert_id:
        return getWorkflowAlertId();
      case workflow_execution_id:
        return getWorkflowExecutionId();
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  public boolean hasField(String fieldName) {
    if (fieldName.equals("id")) {
      return true;
    }
    if (fieldName.equals("workflow_alert_id")) {
      return true;
    }
    if (fieldName.equals("workflow_execution_id")) {
      return true;
    }
    return false;
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
      case workflow_alert_id:
        return null;
      case workflow_execution_id:
        return null;
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public WorkflowAlertWorkflowExecution getCopy() {
    return getCopy(databases);
  }

  @Override
  public WorkflowAlertWorkflowExecution getCopy(IDatabases databases) {
    return new WorkflowAlertWorkflowExecution(this, databases);
  }

  @Override
  public boolean save() throws IOException {
    return databases.getWorkflowDb().workflowAlertWorkflowExecutions().save(this);
  }

  public WorkflowExecution createWorkflowExecution(final String name, final int status) throws IOException {
 
    WorkflowExecution newWorkflowExecution = databases.getWorkflowDb().workflowExecutions().create(name, status);
    setWorkflowExecutionId(newWorkflowExecution.getId());
    save();
    __assoc_workflow_execution.clearCache();
    return newWorkflowExecution;
  }

  public WorkflowExecution createWorkflowExecution(final Integer app_type, final String name, final String scope_identifier, final int status, final Long start_time, final Long end_time, final Integer application_id, final String pool_override) throws IOException {
 
    WorkflowExecution newWorkflowExecution = databases.getWorkflowDb().workflowExecutions().create(app_type, name, scope_identifier, status, start_time, end_time, application_id, pool_override);
    setWorkflowExecutionId(newWorkflowExecution.getId());
    save();
    __assoc_workflow_execution.clearCache();
    return newWorkflowExecution;
  }

  public WorkflowExecution createWorkflowExecution() throws IOException {
 
    WorkflowExecution newWorkflowExecution = databases.getWorkflowDb().workflowExecutions().create("", 0);
    setWorkflowExecutionId(newWorkflowExecution.getId());
    save();
    __assoc_workflow_execution.clearCache();
    return newWorkflowExecution;
  }

  public WorkflowAlert createWorkflowAlert() throws IOException {
 
    WorkflowAlert newWorkflowAlert = databases.getWorkflowDb().workflowAlerts().create();
    setWorkflowAlertId(newWorkflowAlert.getId());
    save();
    __assoc_workflow_alert.clearCache();
    return newWorkflowAlert;
  }

  public WorkflowAlert createWorkflowAlert(final String alert_class, final String message) throws IOException {
 
    WorkflowAlert newWorkflowAlert = databases.getWorkflowDb().workflowAlerts().create(alert_class, message);
    setWorkflowAlertId(newWorkflowAlert.getId());
    save();
    __assoc_workflow_alert.clearCache();
    return newWorkflowAlert;
  }

  public String toString() {
    return "<WorkflowAlertWorkflowExecution"
        + " id: " + this.getId()
        + " workflow_alert_id: " + getWorkflowAlertId()
        + " workflow_execution_id: " + getWorkflowExecutionId()
        + ">";
  }

  public void unsetAssociations() {
    unsetDatabaseReference();
    __assoc_workflow_execution = null;
    __assoc_workflow_alert = null;
  }

  public int compareTo(WorkflowAlertWorkflowExecution that) {
    return Long.valueOf(this.getId()).compareTo(that.getId());
  }
  
  
  public static class Attributes extends AttributesWithId {
    
    public static final long serialVersionUID = 5840558989709925536L;

    // Fields
    private long __workflow_alert_id;
    private long __workflow_execution_id;

    public Attributes(long id) {
      super(id);
    }

    public Attributes(long id, final long workflow_alert_id, final long workflow_execution_id) {
      super(id);
      this.__workflow_alert_id = workflow_alert_id;
      this.__workflow_execution_id = workflow_execution_id;
    }

    public static Attributes newDefaultInstance(long id) {
      return new Attributes(id, 0L, 0L);
    }

    public Attributes(long id, Map<Enum, Object> fieldsMap) {
      super(id);
      long workflow_alert_id = (Long)fieldsMap.get(WorkflowAlertWorkflowExecution._Fields.workflow_alert_id);
      long workflow_execution_id = (Long)fieldsMap.get(WorkflowAlertWorkflowExecution._Fields.workflow_execution_id);
      this.__workflow_alert_id = workflow_alert_id;
      this.__workflow_execution_id = workflow_execution_id;
    }

    public Attributes(Attributes other) {
      super(other.getId());
      this.__workflow_alert_id = other.getWorkflowAlertId();
      this.__workflow_execution_id = other.getWorkflowExecutionId();
    }

    public long getWorkflowAlertId() {
      return __workflow_alert_id;
    }

    public Attributes setWorkflowAlertId(long newval) {
      this.__workflow_alert_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public long getWorkflowExecutionId() {
      return __workflow_execution_id;
    }

    public Attributes setWorkflowExecutionId(long newval) {
      this.__workflow_execution_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public void setField(_Fields field, Object value) {
      switch (field) {
        case workflow_alert_id:
          setWorkflowAlertId((Long)value);
          break;
        case workflow_execution_id:
          setWorkflowExecutionId((Long)value);
          break;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }
    }

    public void setField(String fieldName, Object value) {
      if (fieldName.equals("workflow_alert_id")) {
        setWorkflowAlertId((Long)value);
        return;
      }
      if (fieldName.equals("workflow_execution_id")) {
        setWorkflowExecutionId((Long)value);
        return;
      }
      throw new IllegalStateException("Invalid field: " + fieldName);
    }

    public static Class getFieldType(_Fields field) {
      switch (field) {
        case workflow_alert_id:
          return long.class;
        case workflow_execution_id:
          return long.class;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }    
    }

    public static Class getFieldType(String fieldName) {    
      if (fieldName.equals("workflow_alert_id")) {
        return long.class;
      }
      if (fieldName.equals("workflow_execution_id")) {
        return long.class;
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    @Override
    public Object getField(String fieldName) {
      if (fieldName.equals("id")) {
        return getId();
      }
      if (fieldName.equals("workflow_alert_id")) {
        return getWorkflowAlertId();
      }
      if (fieldName.equals("workflow_execution_id")) {
        return getWorkflowExecutionId();
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    public Object getField(_Fields field) {
      switch (field) {
        case workflow_alert_id:
          return getWorkflowAlertId();
        case workflow_execution_id:
          return getWorkflowExecutionId();
      }
      throw new IllegalStateException("Invalid field: " + field);
    }

    public boolean hasField(String fieldName) {
      if (fieldName.equals("id")) {
        return true;
      }
      if (fieldName.equals("workflow_alert_id")) {
        return true;
      }
      if (fieldName.equals("workflow_execution_id")) {
        return true;
      }
      return false;
    }

    public static Object getDefaultValue(_Fields field) {
      switch (field) {
        case workflow_alert_id:
          return null;
        case workflow_execution_id:
          return null;
      }
      throw new IllegalStateException("Invalid field: " + field);
    }
    
    @Override
    public Set<Enum> getFieldSet() {
      Set set = EnumSet.allOf(_Fields.class);
      return set;
    }
    
    public String toString() {
      return "<WorkflowAlertWorkflowExecution.Attributes"
          + " workflow_alert_id: " + getWorkflowAlertId()
          + " workflow_execution_id: " + getWorkflowExecutionId()
          + ">";
    }
  }

  public static class Id implements ModelIdWrapper<WorkflowAlertWorkflowExecution.Id> {
    public static final long serialVersionUID = 1L;

    private final long id;

    public Id(Long id) {
      this.id = id;
    }

    @Override
    public Long getId() {
      return id;
    }

    @Override
    public int compareTo(Id other) {
      return this.getId().compareTo(other.getId());
    }

    @Override
    public boolean equals(Object other) {
      if (other instanceof Id) {
        return this.getId().equals(((Id)other).getId());
      }
      return false;
    }

    @Override
    public int hashCode() {
      return this.getId().hashCode();
    }

    @Override
    public String toString() {
      return "<WorkflowAlertWorkflowExecution.Id: " + this.getId() + ">";
    }
  }

  public static Set<Attributes> convertToAttributesSet(Collection<WorkflowAlertWorkflowExecution> models) {
    return models.stream()
        .map(WorkflowAlertWorkflowExecution::getAttributes)
        .collect(Collectors.toSet());
  }

  public static class AssociationMetadata implements IModelAssociationMetadata {

    private List<IAssociationMetadata> meta = new ArrayList<>();

    public AssociationMetadata(){
      meta.add(new DefaultAssociationMetadata(AssociationType.BELONGS_TO, WorkflowAlertWorkflowExecution.class, WorkflowExecution.class, "workflow_execution_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.BELONGS_TO, WorkflowAlertWorkflowExecution.class, WorkflowAlert.class, "workflow_alert_id"));
    }

    @Override
    public List<IAssociationMetadata> getAssociationMetadata() {
      return meta;
    }
  }

}
