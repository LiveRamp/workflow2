/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.query;

import java.util.Collection;

import com.rapleaf.jack.queries.AbstractQueryBuilder;
import com.rapleaf.jack.queries.Column;
import com.rapleaf.jack.queries.FieldSelector;
import com.rapleaf.jack.queries.where_operators.IWhereOperator;
import com.rapleaf.jack.queries.where_operators.JackMatchers;
import com.rapleaf.jack.queries.WhereConstraint;
import com.rapleaf.jack.queries.QueryOrder;
import com.rapleaf.jack.queries.OrderCriterion;
import com.rapleaf.jack.queries.LimitCriterion;
import com.liveramp.databases.workflow_db.iface.IBackgroundStepAttemptInfoPersistence;
import com.liveramp.databases.workflow_db.models.BackgroundStepAttemptInfo;


public class BackgroundStepAttemptInfoQueryBuilder extends AbstractQueryBuilder<BackgroundStepAttemptInfo> {

  public BackgroundStepAttemptInfoQueryBuilder(IBackgroundStepAttemptInfoPersistence caller) {
    super(caller);
  }

  public BackgroundStepAttemptInfoQueryBuilder select(BackgroundStepAttemptInfo._Fields... fields) {
    for (BackgroundStepAttemptInfo._Fields field : fields){
      addSelectedField(new FieldSelector(field));
    }
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder selectAgg(FieldSelector... aggregatedFields) {
    addSelectedFields(aggregatedFields);
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder id(Long value) {
    addId(value);
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder idIn(Collection<Long> values) {
    addIds(values);
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder whereId(IWhereOperator<Long> operator) {
    addWhereConstraint(new WhereConstraint<>(Column.fromId(null), operator, null));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder limit(int offset, int nResults) {
    setLimit(new LimitCriterion(offset, nResults));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder limit(int nResults) {
    setLimit(new LimitCriterion(nResults));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder groupBy(BackgroundStepAttemptInfo._Fields... fields) {
    addGroupByFields(fields);
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder order() {
    this.addOrder(new OrderCriterion(QueryOrder.ASC));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder order(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(queryOrder));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder orderById() {
    this.addOrder(new OrderCriterion(QueryOrder.ASC));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder orderById(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(queryOrder));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder stepAttemptId(Long value) {
    addWhereConstraint(new WhereConstraint<>(BackgroundStepAttemptInfo._Fields.step_attempt_id, JackMatchers.equalTo(value)));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder whereStepAttemptId(IWhereOperator<Long> operator) {
    addWhereConstraint(new WhereConstraint<>(BackgroundStepAttemptInfo._Fields.step_attempt_id, operator));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder orderByStepAttemptId() {
    this.addOrder(new OrderCriterion(BackgroundStepAttemptInfo._Fields.step_attempt_id, QueryOrder.ASC));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder orderByStepAttemptId(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(BackgroundStepAttemptInfo._Fields.step_attempt_id, queryOrder));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder serializedContext(byte[] value) {
    addWhereConstraint(new WhereConstraint<>(BackgroundStepAttemptInfo._Fields.serialized_context, JackMatchers.equalTo(value)));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder whereSerializedContext(IWhereOperator<byte[]> operator) {
    addWhereConstraint(new WhereConstraint<>(BackgroundStepAttemptInfo._Fields.serialized_context, operator));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder orderBySerializedContext() {
    this.addOrder(new OrderCriterion(BackgroundStepAttemptInfo._Fields.serialized_context, QueryOrder.ASC));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder orderBySerializedContext(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(BackgroundStepAttemptInfo._Fields.serialized_context, queryOrder));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder nextExecuteCheck(Long value) {
    addWhereConstraint(new WhereConstraint<>(BackgroundStepAttemptInfo._Fields.next_execute_check, JackMatchers.equalTo(value)));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder whereNextExecuteCheck(IWhereOperator<Long> operator) {
    addWhereConstraint(new WhereConstraint<>(BackgroundStepAttemptInfo._Fields.next_execute_check, operator));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder orderByNextExecuteCheck() {
    this.addOrder(new OrderCriterion(BackgroundStepAttemptInfo._Fields.next_execute_check, QueryOrder.ASC));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder orderByNextExecuteCheck(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(BackgroundStepAttemptInfo._Fields.next_execute_check, queryOrder));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder executeCheckCooldownSeconds(Integer value) {
    addWhereConstraint(new WhereConstraint<>(BackgroundStepAttemptInfo._Fields.execute_check_cooldown_seconds, JackMatchers.equalTo(value)));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder whereExecuteCheckCooldownSeconds(IWhereOperator<Integer> operator) {
    addWhereConstraint(new WhereConstraint<>(BackgroundStepAttemptInfo._Fields.execute_check_cooldown_seconds, operator));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder orderByExecuteCheckCooldownSeconds() {
    this.addOrder(new OrderCriterion(BackgroundStepAttemptInfo._Fields.execute_check_cooldown_seconds, QueryOrder.ASC));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder orderByExecuteCheckCooldownSeconds(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(BackgroundStepAttemptInfo._Fields.execute_check_cooldown_seconds, queryOrder));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder claimedByWorker(String value) {
    addWhereConstraint(new WhereConstraint<>(BackgroundStepAttemptInfo._Fields.claimed_by_worker, JackMatchers.equalTo(value)));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder whereClaimedByWorker(IWhereOperator<String> operator) {
    addWhereConstraint(new WhereConstraint<>(BackgroundStepAttemptInfo._Fields.claimed_by_worker, operator));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder orderByClaimedByWorker() {
    this.addOrder(new OrderCriterion(BackgroundStepAttemptInfo._Fields.claimed_by_worker, QueryOrder.ASC));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder orderByClaimedByWorker(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(BackgroundStepAttemptInfo._Fields.claimed_by_worker, queryOrder));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder backgroundWorkflowExecutorInfoId(Integer value) {
    addWhereConstraint(new WhereConstraint<>(BackgroundStepAttemptInfo._Fields.background_workflow_executor_info_id, JackMatchers.equalTo(value)));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder whereBackgroundWorkflowExecutorInfoId(IWhereOperator<Integer> operator) {
    addWhereConstraint(new WhereConstraint<>(BackgroundStepAttemptInfo._Fields.background_workflow_executor_info_id, operator));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder orderByBackgroundWorkflowExecutorInfoId() {
    this.addOrder(new OrderCriterion(BackgroundStepAttemptInfo._Fields.background_workflow_executor_info_id, QueryOrder.ASC));
    return this;
  }

  public BackgroundStepAttemptInfoQueryBuilder orderByBackgroundWorkflowExecutorInfoId(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(BackgroundStepAttemptInfo._Fields.background_workflow_executor_info_id, queryOrder));
    return this;
  }
}
