
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.impl;

import java.sql.SQLRecoverableException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Collection;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Timestamp;

import com.rapleaf.jack.AbstractDatabaseModel;
import com.rapleaf.jack.BaseDatabaseConnection;
import com.rapleaf.jack.queries.WhereConstraint;
import com.rapleaf.jack.queries.WhereClause;
import com.rapleaf.jack.util.JackUtility;
import com.liveramp.databases.workflow_db.iface.IWorkflowExecutionPersistence;
import com.liveramp.databases.workflow_db.models.WorkflowExecution;
import com.liveramp.databases.workflow_db.query.WorkflowExecutionQueryBuilder;
import com.liveramp.databases.workflow_db.query.WorkflowExecutionDeleteBuilder;

import com.liveramp.databases.workflow_db.IDatabases;

public class BaseWorkflowExecutionPersistenceImpl extends AbstractDatabaseModel<WorkflowExecution> implements IWorkflowExecutionPersistence {
  private final IDatabases databases;

  public BaseWorkflowExecutionPersistenceImpl(BaseDatabaseConnection conn, IDatabases databases) {
    super(conn, "workflow_executions", Arrays.<String>asList("app_type", "name", "scope_identifier", "status", "start_time", "end_time", "application_id", "pool_override"));
    this.databases = databases;
  }

  @Override
  public WorkflowExecution create(Map<Enum, Object> fieldsMap) throws IOException {
    Integer app_type = (Integer) fieldsMap.get(WorkflowExecution._Fields.app_type);
    String name = (String) fieldsMap.get(WorkflowExecution._Fields.name);
    String scope_identifier = (String) fieldsMap.get(WorkflowExecution._Fields.scope_identifier);
    int status = (Integer) fieldsMap.get(WorkflowExecution._Fields.status);
    Long start_time = (Long) fieldsMap.get(WorkflowExecution._Fields.start_time);
    Long end_time = (Long) fieldsMap.get(WorkflowExecution._Fields.end_time);
    Integer application_id = (Integer) fieldsMap.get(WorkflowExecution._Fields.application_id);
    String pool_override = (String) fieldsMap.get(WorkflowExecution._Fields.pool_override);
    return create(app_type, name, scope_identifier, status, start_time, end_time, application_id, pool_override);
  }

  public WorkflowExecution create(final Integer app_type, final String name, final String scope_identifier, final int status, final Long start_time, final Long end_time, final Integer application_id, final String pool_override) throws IOException {
    StatementCreator statementCreator = new StatementCreator() {
      private final List<String> nonNullFields = new ArrayList<>();
      private final List<AttrSetter> statementSetters = new ArrayList<>();

      {
        int index = 1;

        if (app_type != null) {
          nonNullFields.add("app_type");
          int fieldIndex0 = index++;
          statementSetters.add(stmt -> stmt.setInt(fieldIndex0, app_type));
        }

        nonNullFields.add("name");
        int fieldIndex1 = index++;
        statementSetters.add(stmt -> stmt.setString(fieldIndex1, name));

        if (scope_identifier != null) {
          nonNullFields.add("scope_identifier");
          int fieldIndex2 = index++;
          statementSetters.add(stmt -> stmt.setString(fieldIndex2, scope_identifier));
        }

        nonNullFields.add("status");
        int fieldIndex3 = index++;
        statementSetters.add(stmt -> stmt.setInt(fieldIndex3, status));

        if (start_time != null) {
          nonNullFields.add("start_time");
          int fieldIndex4 = index++;
          statementSetters.add(stmt -> stmt.setTimestamp(fieldIndex4, new Timestamp(start_time)));
        }

        if (end_time != null) {
          nonNullFields.add("end_time");
          int fieldIndex5 = index++;
          statementSetters.add(stmt -> stmt.setTimestamp(fieldIndex5, new Timestamp(end_time)));
        }

        if (application_id != null) {
          nonNullFields.add("application_id");
          int fieldIndex6 = index++;
          statementSetters.add(stmt -> stmt.setInt(fieldIndex6, application_id));
        }

        if (pool_override != null) {
          nonNullFields.add("pool_override");
          int fieldIndex7 = index++;
          statementSetters.add(stmt -> stmt.setString(fieldIndex7, pool_override));
        }
      }

      @Override
      public String getStatement() {
        return getInsertStatement(nonNullFields);
      }

      @Override
      public void setStatement(PreparedStatement statement) throws SQLException {
        for (AttrSetter setter : statementSetters) {
          setter.set(statement);
        }
      }
    };

    long __id = realCreate(statementCreator);
    WorkflowExecution newInst = new WorkflowExecution(__id, app_type, name, scope_identifier, status, start_time, end_time, application_id, pool_override, databases);
    newInst.setCreated(true);
    cachedById.put(__id, newInst);
    clearForeignKeyCache();
    return newInst;
  }

  public WorkflowExecution create(final String name, final int status) throws IOException {
    StatementCreator statementCreator = new StatementCreator() {
      private final List<String> nonNullFields = new ArrayList<>();
      private final List<AttrSetter> statementSetters = new ArrayList<>();

      {
        int index = 1;

        nonNullFields.add("name");
        int fieldIndex1 = index++;
        statementSetters.add(stmt -> stmt.setString(fieldIndex1, name));

        nonNullFields.add("status");
        int fieldIndex3 = index++;
        statementSetters.add(stmt -> stmt.setInt(fieldIndex3, status));
      }

      @Override
      public String getStatement() {
        return getInsertStatement(nonNullFields);
      }

      @Override
      public void setStatement(PreparedStatement statement) throws SQLException {
        for (AttrSetter setter : statementSetters) {
          setter.set(statement);
        }
      }
    };

    long __id = realCreate(statementCreator);
    WorkflowExecution newInst = new WorkflowExecution(__id, null, name, null, status, null, null, null, null, databases);
    newInst.setCreated(true);
    cachedById.put(__id, newInst);
    clearForeignKeyCache();
    return newInst;
  }

  public WorkflowExecution createDefaultInstance() throws IOException {
    return create("", 0);
  }

  public List<WorkflowExecution> find(Map<Enum, Object> fieldsMap) throws IOException {
    return find(null, fieldsMap);
  }

  public List<WorkflowExecution> find(Collection<Long> ids, Map<Enum, Object> fieldsMap) throws IOException {
    List<WorkflowExecution> foundList = new ArrayList<>();

    if (fieldsMap == null || fieldsMap.isEmpty()) {
      return foundList;
    }

    StringBuilder statementString = new StringBuilder();
    statementString.append("SELECT * FROM workflow_executions WHERE (");
    List<Object> nonNullValues = new ArrayList<>();
    List<WorkflowExecution._Fields> nonNullValueFields = new ArrayList<>();

    Iterator<Map.Entry<Enum, Object>> iter = fieldsMap.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Enum, Object> entry = iter.next();
      Enum field = entry.getKey();
      Object value = entry.getValue();

      String queryValue = value != null ? " = ? " : " IS NULL";
      if (value != null) {
        nonNullValueFields.add((WorkflowExecution._Fields) field);
        nonNullValues.add(value);
      }

      statementString.append(field).append(queryValue);
      if (iter.hasNext()) {
        statementString.append(" AND ");
      }
    }
    if (ids != null) statementString.append(" AND ").append(getIdSetCondition(ids));
    statementString.append(")");

    int retryCount = 0;
    PreparedStatement preparedStatement;

    while (true) {
      preparedStatement = getPreparedStatement(statementString.toString());

      for (int i = 0; i < nonNullValues.size(); i++) {
        WorkflowExecution._Fields field = nonNullValueFields.get(i);
        try {
          switch (field) {
            case app_type:
              preparedStatement.setInt(i+1, (Integer) nonNullValues.get(i));
              break;
            case name:
              preparedStatement.setString(i+1, (String) nonNullValues.get(i));
              break;
            case scope_identifier:
              preparedStatement.setString(i+1, (String) nonNullValues.get(i));
              break;
            case status:
              preparedStatement.setInt(i+1, (Integer) nonNullValues.get(i));
              break;
            case start_time:
              preparedStatement.setTimestamp(i+1, new Timestamp((Long) nonNullValues.get(i)));
              break;
            case end_time:
              preparedStatement.setTimestamp(i+1, new Timestamp((Long) nonNullValues.get(i)));
              break;
            case application_id:
              preparedStatement.setInt(i+1, (Integer) nonNullValues.get(i));
              break;
            case pool_override:
              preparedStatement.setString(i+1, (String) nonNullValues.get(i));
              break;
          }
        } catch (SQLException e) {
          throw new IOException(e);
        }
      }

      try {
        executeQuery(foundList, preparedStatement);
        return foundList;
      } catch (SQLRecoverableException e) {
        if (++retryCount > AbstractDatabaseModel.MAX_CONNECTION_RETRIES) {
          throw new IOException(e);
        }
      } catch (SQLException e) {
        throw new IOException(e);
      }
    }
  }

  @Override
  protected void setStatementParameters(PreparedStatement preparedStatement, WhereClause whereClause) throws IOException {
    int index = 0;
    for (WhereConstraint constraint : whereClause.getWhereConstraints()) {
      for (Object parameter : constraint.getParameters()) {
        if (parameter == null) {
          continue;
        }
        try {
          if (constraint.isId()) {
            preparedStatement.setLong(++index, (Long)parameter);
          } else {
            WorkflowExecution._Fields field = (WorkflowExecution._Fields)constraint.getField();
            switch (field) {
              case app_type:
                preparedStatement.setInt(++index, (Integer) parameter);
                break;
              case name:
                preparedStatement.setString(++index, (String) parameter);
                break;
              case scope_identifier:
                preparedStatement.setString(++index, (String) parameter);
                break;
              case status:
                preparedStatement.setInt(++index, (Integer) parameter);
                break;
              case start_time:
                preparedStatement.setTimestamp(++index, new Timestamp((Long) parameter));
                break;
              case end_time:
                preparedStatement.setTimestamp(++index, new Timestamp((Long) parameter));
                break;
              case application_id:
                preparedStatement.setInt(++index, (Integer) parameter);
                break;
              case pool_override:
                preparedStatement.setString(++index, (String) parameter);
                break;
            }
          }
        } catch (SQLException e) {
          throw new IOException(e);
        }
      }
    }
  }

  @Override
  protected void setAttrs(WorkflowExecution model, PreparedStatement stmt, boolean setNull) throws SQLException {
    int index = 1;
    if (setNull && model.getAppType() == null) {
      stmt.setNull(index++, java.sql.Types.INTEGER);
    } else if (model.getAppType() != null) {
      stmt.setInt(index++, model.getAppType());
    }
    {
      stmt.setString(index++, model.getName());
    }
    if (setNull && model.getScopeIdentifier() == null) {
      stmt.setNull(index++, java.sql.Types.CHAR);
    } else if (model.getScopeIdentifier() != null) {
      stmt.setString(index++, model.getScopeIdentifier());
    }
    {
      stmt.setInt(index++, model.getStatus());
    }
    if (setNull && model.getStartTime() == null) {
      stmt.setNull(index++, java.sql.Types.DATE);
    } else if (model.getStartTime() != null) {
      stmt.setTimestamp(index++, new Timestamp(model.getStartTime()));
    }
    if (setNull && model.getEndTime() == null) {
      stmt.setNull(index++, java.sql.Types.DATE);
    } else if (model.getEndTime() != null) {
      stmt.setTimestamp(index++, new Timestamp(model.getEndTime()));
    }
    if (setNull && model.getApplicationId() == null) {
      stmt.setNull(index++, java.sql.Types.INTEGER);
    } else if (model.getApplicationId() != null) {
      stmt.setInt(index++, model.getApplicationId());
    }
    if (setNull && model.getPoolOverride() == null) {
      stmt.setNull(index++, java.sql.Types.CHAR);
    } else if (model.getPoolOverride() != null) {
      stmt.setString(index++, model.getPoolOverride());
    }
    stmt.setLong(index, model.getId());
  }

  @Override
  protected WorkflowExecution instanceFromResultSet(ResultSet rs, Collection<Enum> selectedFields) throws SQLException {
    boolean allFields = selectedFields == null || selectedFields.isEmpty();
    long id = rs.getLong("id");
    return new WorkflowExecution(id,
      allFields || selectedFields.contains(WorkflowExecution._Fields.app_type) ? getIntOrNull(rs, "app_type") : null,
      allFields || selectedFields.contains(WorkflowExecution._Fields.name) ? rs.getString("name") : "",
      allFields || selectedFields.contains(WorkflowExecution._Fields.scope_identifier) ? rs.getString("scope_identifier") : null,
      allFields || selectedFields.contains(WorkflowExecution._Fields.status) ? getIntOrNull(rs, "status") : 0,
      allFields || selectedFields.contains(WorkflowExecution._Fields.start_time) ? getDateAsLong(rs, "start_time") : null,
      allFields || selectedFields.contains(WorkflowExecution._Fields.end_time) ? getDateAsLong(rs, "end_time") : null,
      allFields || selectedFields.contains(WorkflowExecution._Fields.application_id) ? getIntOrNull(rs, "application_id") : null,
      allFields || selectedFields.contains(WorkflowExecution._Fields.pool_override) ? rs.getString("pool_override") : null,
      databases
    );
  }

  public List<WorkflowExecution> findByAppType(final Integer value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(WorkflowExecution._Fields.app_type, value));
  }

  public List<WorkflowExecution> findByName(final String value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(WorkflowExecution._Fields.name, value));
  }

  public List<WorkflowExecution> findByScopeIdentifier(final String value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(WorkflowExecution._Fields.scope_identifier, value));
  }

  public List<WorkflowExecution> findByStatus(final int value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(WorkflowExecution._Fields.status, value));
  }

  public List<WorkflowExecution> findByStartTime(final Long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(WorkflowExecution._Fields.start_time, value));
  }

  public List<WorkflowExecution> findByEndTime(final Long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(WorkflowExecution._Fields.end_time, value));
  }

  public List<WorkflowExecution> findByApplicationId(final Integer value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(WorkflowExecution._Fields.application_id, value));
  }

  public List<WorkflowExecution> findByPoolOverride(final String value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(WorkflowExecution._Fields.pool_override, value));
  }

  public WorkflowExecutionQueryBuilder query() {
    return new WorkflowExecutionQueryBuilder(this);
  }

  public WorkflowExecutionDeleteBuilder delete() {
    return new WorkflowExecutionDeleteBuilder(this);
  }
}
