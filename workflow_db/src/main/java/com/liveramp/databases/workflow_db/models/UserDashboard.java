
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.models;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import com.rapleaf.jack.AssociationType;
import com.rapleaf.jack.AttributesWithId;
import com.rapleaf.jack.BelongsToAssociation;
import com.rapleaf.jack.DefaultAssociationMetadata;
import com.rapleaf.jack.HasManyAssociation;
import com.rapleaf.jack.HasOneAssociation;
import com.rapleaf.jack.IAssociationMetadata;
import com.rapleaf.jack.IModelAssociationMetadata;
import com.rapleaf.jack.ModelIdWrapper;
import com.rapleaf.jack.ModelWithId;
import com.rapleaf.jack.queries.AbstractTable;
import com.rapleaf.jack.queries.Column;

import com.liveramp.databases.workflow_db.IDatabases;
import com.rapleaf.jack.util.JackUtility;

public class UserDashboard extends ModelWithId<UserDashboard, IDatabases> implements Comparable<UserDashboard>{
  
  public static final long serialVersionUID = 8872884355484834117L;

  public static class Tbl extends AbstractTable<UserDashboard.Attributes, UserDashboard> {
    public final Column<Long> ID;
    public final Column<Integer> USER_ID;
    public final Column<Integer> DASHBOARD_ID;

    private Tbl(String alias) {
      super("user_dashboards", alias, UserDashboard.Attributes.class, UserDashboard.class);
      this.ID = Column.fromId(alias);
      this.USER_ID = Column.fromField(alias, _Fields.user_id, Integer.class);
      this.DASHBOARD_ID = Column.fromField(alias, _Fields.dashboard_id, Integer.class);
      Collections.addAll(this.allColumns, ID, USER_ID, DASHBOARD_ID);
    }

    public static Tbl as(String alias) {
      return new Tbl(alias);
    }
  }

  public static final Tbl TBL = new Tbl("user_dashboards");
  public static final Column<Long> ID = TBL.ID;
  public static final Column<Integer> USER_ID = TBL.USER_ID;
  public static final Column<Integer> DASHBOARD_ID = TBL.DASHBOARD_ID;

  private final Attributes attributes;

  private transient UserDashboard.Id cachedTypedId;

  // Associations
  private BelongsToAssociation<User> __assoc_user;
  private BelongsToAssociation<Dashboard> __assoc_dashboard;

  public enum _Fields {
    user_id,
    dashboard_id,
  }

  @Override
  public UserDashboard.Id getTypedId() {
    if (cachedTypedId == null) {
      cachedTypedId = new UserDashboard.Id(this.getId());
    }
    return cachedTypedId;
  }

  public UserDashboard(long id, final int user_id, final int dashboard_id, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, user_id, dashboard_id);
    this.__assoc_user = new BelongsToAssociation<>(databases.getWorkflowDb().users(), (long) getUserId());
    this.__assoc_dashboard = new BelongsToAssociation<>(databases.getWorkflowDb().dashboards(), (long) getDashboardId());
  }

  public UserDashboard(long id, final int user_id, final int dashboard_id) {
    super(null);
    attributes = new Attributes(id, user_id, dashboard_id);
  }

  public static UserDashboard newDefaultInstance(long id) {
    return new UserDashboard(id, 0, 0);
  }

  public UserDashboard(Attributes attributes, IDatabases databases) {
    super(databases);
    this.attributes = attributes;

    if (databases != null) {
      this.__assoc_user = new BelongsToAssociation<>(databases.getWorkflowDb().users(), (long) getUserId());
      this.__assoc_dashboard = new BelongsToAssociation<>(databases.getWorkflowDb().dashboards(), (long) getDashboardId());
    }
  }

  public UserDashboard(Attributes attributes) {
    this(attributes, (IDatabases) null);
  }

  public UserDashboard(long id, Map<Enum, Object> fieldsMap) {
    super(null);
    attributes = new Attributes(id, fieldsMap);
  }

  public UserDashboard (UserDashboard other) {
    this(other, (IDatabases)null);
  }

  public UserDashboard (UserDashboard other, IDatabases databases) {
    super(databases);
    attributes = new Attributes(other.getAttributes());

    if (databases != null) {
      this.__assoc_user = new BelongsToAssociation<>(databases.getWorkflowDb().users(), (long) getUserId());
      this.__assoc_dashboard = new BelongsToAssociation<>(databases.getWorkflowDb().dashboards(), (long) getDashboardId());
    }
  }

  public Attributes getAttributes() {
    return attributes;
  }

  public int getUserId() {
    return attributes.getUserId();
  }

  public UserDashboard setUserId(int newval) {
    attributes.setUserId(newval);
    if(__assoc_user != null){
      this.__assoc_user.setOwnerId(newval);
    }
    cachedHashCode = 0;
    return this;
  }

  public int getDashboardId() {
    return attributes.getDashboardId();
  }

  public UserDashboard setDashboardId(int newval) {
    attributes.setDashboardId(newval);
    if(__assoc_dashboard != null){
      this.__assoc_dashboard.setOwnerId(newval);
    }
    cachedHashCode = 0;
    return this;
  }

  public void setField(_Fields field, Object value) {
    switch (field) {
      case user_id:
        setUserId((Integer)value);
        break;
      case dashboard_id:
        setDashboardId((Integer)value);
        break;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }
  }
  
  public void setField(String fieldName, Object value) {
    if (fieldName.equals("user_id")) {
      setUserId((Integer)  value);
      return;
    }
    if (fieldName.equals("dashboard_id")) {
      setDashboardId((Integer)  value);
      return;
    }
    throw new IllegalStateException("Invalid field: " + fieldName);
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
      case user_id:
        return int.class;
      case dashboard_id:
        return int.class;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
    if (fieldName.equals("user_id")) {
      return int.class;
    }
    if (fieldName.equals("dashboard_id")) {
      return int.class;
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public User getUser() throws IOException {
    return __assoc_user.get();
  }

  public Dashboard getDashboard() throws IOException {
    return __assoc_dashboard.get();
  }

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
    if (fieldName.equals("user_id")) {
      return getUserId();
    }
    if (fieldName.equals("dashboard_id")) {
      return getDashboardId();
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
      case user_id:
        return getUserId();
      case dashboard_id:
        return getDashboardId();
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  public boolean hasField(String fieldName) {
    if (fieldName.equals("id")) {
      return true;
    }
    if (fieldName.equals("user_id")) {
      return true;
    }
    if (fieldName.equals("dashboard_id")) {
      return true;
    }
    return false;
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
      case user_id:
        return null;
      case dashboard_id:
        return null;
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public UserDashboard getCopy() {
    return getCopy(databases);
  }

  @Override
  public UserDashboard getCopy(IDatabases databases) {
    return new UserDashboard(this, databases);
  }

  @Override
  public boolean save() throws IOException {
    return databases.getWorkflowDb().userDashboards().save(this);
  }

  public User createUser(final String username, final String notification_email) throws IOException {
 
    User newUser = databases.getWorkflowDb().users().create(username, notification_email);
    setUserId(JackUtility.safeLongToInt(newUser.getId()));
    save();
    __assoc_user.clearCache();
    return newUser;
  }

  public User createUser() throws IOException {
 
    User newUser = databases.getWorkflowDb().users().create("", "");
    setUserId(JackUtility.safeLongToInt(newUser.getId()));
    save();
    __assoc_user.clearCache();
    return newUser;
  }

  public Dashboard createDashboard(final String name) throws IOException {
 
    Dashboard newDashboard = databases.getWorkflowDb().dashboards().create(name);
    setDashboardId(JackUtility.safeLongToInt(newDashboard.getId()));
    save();
    __assoc_dashboard.clearCache();
    return newDashboard;
  }

  public Dashboard createDashboard() throws IOException {
 
    Dashboard newDashboard = databases.getWorkflowDb().dashboards().create("");
    setDashboardId(JackUtility.safeLongToInt(newDashboard.getId()));
    save();
    __assoc_dashboard.clearCache();
    return newDashboard;
  }

  public String toString() {
    return "<UserDashboard"
        + " id: " + this.getId()
        + " user_id: " + getUserId()
        + " dashboard_id: " + getDashboardId()
        + ">";
  }

  public void unsetAssociations() {
    unsetDatabaseReference();
    __assoc_user = null;
    __assoc_dashboard = null;
  }

  public int compareTo(UserDashboard that) {
    return Long.valueOf(this.getId()).compareTo(that.getId());
  }
  
  
  public static class Attributes extends AttributesWithId {
    
    public static final long serialVersionUID = 6061301293352739971L;

    // Fields
    private int __user_id;
    private int __dashboard_id;

    public Attributes(long id) {
      super(id);
    }

    public Attributes(long id, final int user_id, final int dashboard_id) {
      super(id);
      this.__user_id = user_id;
      this.__dashboard_id = dashboard_id;
    }

    public static Attributes newDefaultInstance(long id) {
      return new Attributes(id, 0, 0);
    }

    public Attributes(long id, Map<Enum, Object> fieldsMap) {
      super(id);
      int user_id = (Integer)fieldsMap.get(UserDashboard._Fields.user_id);
      int dashboard_id = (Integer)fieldsMap.get(UserDashboard._Fields.dashboard_id);
      this.__user_id = user_id;
      this.__dashboard_id = dashboard_id;
    }

    public Attributes(Attributes other) {
      super(other.getId());
      this.__user_id = other.getUserId();
      this.__dashboard_id = other.getDashboardId();
    }

    public int getUserId() {
      return __user_id;
    }

    public Attributes setUserId(int newval) {
      this.__user_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public int getDashboardId() {
      return __dashboard_id;
    }

    public Attributes setDashboardId(int newval) {
      this.__dashboard_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public void setField(_Fields field, Object value) {
      switch (field) {
        case user_id:
          setUserId((Integer)value);
          break;
        case dashboard_id:
          setDashboardId((Integer)value);
          break;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }
    }

    public void setField(String fieldName, Object value) {
      if (fieldName.equals("user_id")) {
        setUserId((Integer)value);
        return;
      }
      if (fieldName.equals("dashboard_id")) {
        setDashboardId((Integer)value);
        return;
      }
      throw new IllegalStateException("Invalid field: " + fieldName);
    }

    public static Class getFieldType(_Fields field) {
      switch (field) {
        case user_id:
          return int.class;
        case dashboard_id:
          return int.class;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }    
    }

    public static Class getFieldType(String fieldName) {    
      if (fieldName.equals("user_id")) {
        return int.class;
      }
      if (fieldName.equals("dashboard_id")) {
        return int.class;
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    @Override
    public Object getField(String fieldName) {
      if (fieldName.equals("id")) {
        return getId();
      }
      if (fieldName.equals("user_id")) {
        return getUserId();
      }
      if (fieldName.equals("dashboard_id")) {
        return getDashboardId();
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    public Object getField(_Fields field) {
      switch (field) {
        case user_id:
          return getUserId();
        case dashboard_id:
          return getDashboardId();
      }
      throw new IllegalStateException("Invalid field: " + field);
    }

    public boolean hasField(String fieldName) {
      if (fieldName.equals("id")) {
        return true;
      }
      if (fieldName.equals("user_id")) {
        return true;
      }
      if (fieldName.equals("dashboard_id")) {
        return true;
      }
      return false;
    }

    public static Object getDefaultValue(_Fields field) {
      switch (field) {
        case user_id:
          return null;
        case dashboard_id:
          return null;
      }
      throw new IllegalStateException("Invalid field: " + field);
    }
    
    @Override
    public Set<Enum> getFieldSet() {
      Set set = EnumSet.allOf(_Fields.class);
      return set;
    }
    
    public String toString() {
      return "<UserDashboard.Attributes"
          + " user_id: " + getUserId()
          + " dashboard_id: " + getDashboardId()
          + ">";
    }
  }

  public static class Id implements ModelIdWrapper<UserDashboard.Id> {
    public static final long serialVersionUID = 1L;

    private final long id;

    public Id(Long id) {
      this.id = id;
    }

    @Override
    public Long getId() {
      return id;
    }

    @Override
    public int compareTo(Id other) {
      return this.getId().compareTo(other.getId());
    }

    @Override
    public boolean equals(Object other) {
      if (other instanceof Id) {
        return this.getId().equals(((Id)other).getId());
      }
      return false;
    }

    @Override
    public int hashCode() {
      return this.getId().hashCode();
    }

    @Override
    public String toString() {
      return "<UserDashboard.Id: " + this.getId() + ">";
    }
  }

  public static Set<Attributes> convertToAttributesSet(Collection<UserDashboard> models) {
    return models.stream()
        .map(UserDashboard::getAttributes)
        .collect(Collectors.toSet());
  }

  public static class AssociationMetadata implements IModelAssociationMetadata {

    private List<IAssociationMetadata> meta = new ArrayList<>();

    public AssociationMetadata(){
      meta.add(new DefaultAssociationMetadata(AssociationType.BELONGS_TO, UserDashboard.class, User.class, "user_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.BELONGS_TO, UserDashboard.class, Dashboard.class, "dashboard_id"));
    }

    @Override
    public List<IAssociationMetadata> getAssociationMetadata() {
      return meta;
    }
  }

}
