
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.impl;

import java.sql.SQLRecoverableException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Collection;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Timestamp;

import com.rapleaf.jack.AbstractDatabaseModel;
import com.rapleaf.jack.BaseDatabaseConnection;
import com.rapleaf.jack.queries.WhereConstraint;
import com.rapleaf.jack.queries.WhereClause;
import com.rapleaf.jack.util.JackUtility;
import com.liveramp.databases.workflow_db.iface.IApplicationCounterSummaryPersistence;
import com.liveramp.databases.workflow_db.models.ApplicationCounterSummary;
import com.liveramp.databases.workflow_db.query.ApplicationCounterSummaryQueryBuilder;
import com.liveramp.databases.workflow_db.query.ApplicationCounterSummaryDeleteBuilder;

import com.liveramp.databases.workflow_db.IDatabases;

public class BaseApplicationCounterSummaryPersistenceImpl extends AbstractDatabaseModel<ApplicationCounterSummary> implements IApplicationCounterSummaryPersistence {
  private final IDatabases databases;

  public BaseApplicationCounterSummaryPersistenceImpl(BaseDatabaseConnection conn, IDatabases databases) {
    super(conn, "application_counter_summaries", Arrays.<String>asList("application_id", "group", "name", "value", "date"));
    this.databases = databases;
  }

  @Override
  public ApplicationCounterSummary create(Map<Enum, Object> fieldsMap) throws IOException {
    Integer application_id = (Integer) fieldsMap.get(ApplicationCounterSummary._Fields.application_id);
    String group = (String) fieldsMap.get(ApplicationCounterSummary._Fields.group);
    String name = (String) fieldsMap.get(ApplicationCounterSummary._Fields.name);
    Long value = (Long) fieldsMap.get(ApplicationCounterSummary._Fields.value);
    Long date = (Long) fieldsMap.get(ApplicationCounterSummary._Fields.date);
    return create(application_id, group, name, value, date);
  }

  public ApplicationCounterSummary create(final Integer application_id, final String group, final String name, final Long value, final Long date) throws IOException {
    StatementCreator statementCreator = new StatementCreator() {
      private final List<String> nonNullFields = new ArrayList<>();
      private final List<AttrSetter> statementSetters = new ArrayList<>();

      {
        int index = 1;

        if (application_id != null) {
          nonNullFields.add("application_id");
          int fieldIndex0 = index++;
          statementSetters.add(stmt -> stmt.setInt(fieldIndex0, application_id));
        }

        if (group != null) {
          nonNullFields.add("group");
          int fieldIndex1 = index++;
          statementSetters.add(stmt -> stmt.setString(fieldIndex1, group));
        }

        if (name != null) {
          nonNullFields.add("name");
          int fieldIndex2 = index++;
          statementSetters.add(stmt -> stmt.setString(fieldIndex2, name));
        }

        if (value != null) {
          nonNullFields.add("value");
          int fieldIndex3 = index++;
          statementSetters.add(stmt -> stmt.setLong(fieldIndex3, value));
        }

        if (date != null) {
          nonNullFields.add("date");
          int fieldIndex4 = index++;
          statementSetters.add(stmt -> stmt.setDate(fieldIndex4, new Date(date)));
        }
      }

      @Override
      public String getStatement() {
        return getInsertStatement(nonNullFields);
      }

      @Override
      public void setStatement(PreparedStatement statement) throws SQLException {
        for (AttrSetter setter : statementSetters) {
          setter.set(statement);
        }
      }
    };

    long __id = realCreate(statementCreator);
    ApplicationCounterSummary newInst = new ApplicationCounterSummary(__id, application_id, group, name, value, date, databases);
    newInst.setCreated(true);
    cachedById.put(__id, newInst);
    clearForeignKeyCache();
    return newInst;
  }

  public ApplicationCounterSummary create() throws IOException {
    StatementCreator statementCreator = new StatementCreator() {
      private final List<String> nonNullFields = new ArrayList<>();
      private final List<AttrSetter> statementSetters = new ArrayList<>();

      @Override
      public String getStatement() {
        return getInsertStatement(nonNullFields);
      }

      @Override
      public void setStatement(PreparedStatement statement) throws SQLException {
        for (AttrSetter setter : statementSetters) {
          setter.set(statement);
        }
      }
    };

    long __id = realCreate(statementCreator);
    ApplicationCounterSummary newInst = new ApplicationCounterSummary(__id, null, null, null, null, null, databases);
    newInst.setCreated(true);
    cachedById.put(__id, newInst);
    clearForeignKeyCache();
    return newInst;
  }

  public ApplicationCounterSummary createDefaultInstance() throws IOException {
    return create();
  }

  public List<ApplicationCounterSummary> find(Map<Enum, Object> fieldsMap) throws IOException {
    return find(null, fieldsMap);
  }

  public List<ApplicationCounterSummary> find(Collection<Long> ids, Map<Enum, Object> fieldsMap) throws IOException {
    List<ApplicationCounterSummary> foundList = new ArrayList<>();

    if (fieldsMap == null || fieldsMap.isEmpty()) {
      return foundList;
    }

    StringBuilder statementString = new StringBuilder();
    statementString.append("SELECT * FROM application_counter_summaries WHERE (");
    List<Object> nonNullValues = new ArrayList<>();
    List<ApplicationCounterSummary._Fields> nonNullValueFields = new ArrayList<>();

    Iterator<Map.Entry<Enum, Object>> iter = fieldsMap.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Enum, Object> entry = iter.next();
      Enum field = entry.getKey();
      Object value = entry.getValue();

      String queryValue = value != null ? " = ? " : " IS NULL";
      if (value != null) {
        nonNullValueFields.add((ApplicationCounterSummary._Fields) field);
        nonNullValues.add(value);
      }

      statementString.append(field).append(queryValue);
      if (iter.hasNext()) {
        statementString.append(" AND ");
      }
    }
    if (ids != null) statementString.append(" AND ").append(getIdSetCondition(ids));
    statementString.append(")");

    int retryCount = 0;
    PreparedStatement preparedStatement;

    while (true) {
      preparedStatement = getPreparedStatement(statementString.toString());

      for (int i = 0; i < nonNullValues.size(); i++) {
        ApplicationCounterSummary._Fields field = nonNullValueFields.get(i);
        try {
          switch (field) {
            case application_id:
              preparedStatement.setInt(i+1, (Integer) nonNullValues.get(i));
              break;
            case group:
              preparedStatement.setString(i+1, (String) nonNullValues.get(i));
              break;
            case name:
              preparedStatement.setString(i+1, (String) nonNullValues.get(i));
              break;
            case value:
              preparedStatement.setLong(i+1, (Long) nonNullValues.get(i));
              break;
            case date:
              preparedStatement.setDate(i+1, new Date((Long) nonNullValues.get(i)));
              break;
          }
        } catch (SQLException e) {
          throw new IOException(e);
        }
      }

      try {
        executeQuery(foundList, preparedStatement);
        return foundList;
      } catch (SQLRecoverableException e) {
        if (++retryCount > AbstractDatabaseModel.MAX_CONNECTION_RETRIES) {
          throw new IOException(e);
        }
      } catch (SQLException e) {
        throw new IOException(e);
      }
    }
  }

  @Override
  protected void setStatementParameters(PreparedStatement preparedStatement, WhereClause whereClause) throws IOException {
    int index = 0;
    for (WhereConstraint constraint : whereClause.getWhereConstraints()) {
      for (Object parameter : constraint.getParameters()) {
        if (parameter == null) {
          continue;
        }
        try {
          if (constraint.isId()) {
            preparedStatement.setLong(++index, (Long)parameter);
          } else {
            ApplicationCounterSummary._Fields field = (ApplicationCounterSummary._Fields)constraint.getField();
            switch (field) {
              case application_id:
                preparedStatement.setInt(++index, (Integer) parameter);
                break;
              case group:
                preparedStatement.setString(++index, (String) parameter);
                break;
              case name:
                preparedStatement.setString(++index, (String) parameter);
                break;
              case value:
                preparedStatement.setLong(++index, (Long) parameter);
                break;
              case date:
                preparedStatement.setDate(++index, new Date((Long) parameter));
                break;
            }
          }
        } catch (SQLException e) {
          throw new IOException(e);
        }
      }
    }
  }

  @Override
  protected void setAttrs(ApplicationCounterSummary model, PreparedStatement stmt, boolean setNull) throws SQLException {
    int index = 1;
    if (setNull && model.getApplicationId() == null) {
      stmt.setNull(index++, java.sql.Types.INTEGER);
    } else if (model.getApplicationId() != null) {
      stmt.setInt(index++, model.getApplicationId());
    }
    if (setNull && model.getGroup() == null) {
      stmt.setNull(index++, java.sql.Types.CHAR);
    } else if (model.getGroup() != null) {
      stmt.setString(index++, model.getGroup());
    }
    if (setNull && model.getName() == null) {
      stmt.setNull(index++, java.sql.Types.CHAR);
    } else if (model.getName() != null) {
      stmt.setString(index++, model.getName());
    }
    if (setNull && model.getValue() == null) {
      stmt.setNull(index++, java.sql.Types.INTEGER);
    } else if (model.getValue() != null) {
      stmt.setLong(index++, model.getValue());
    }
    if (setNull && model.getDate() == null) {
      stmt.setNull(index++, java.sql.Types.DATE);
    } else if (model.getDate() != null) {
      stmt.setDate(index++, new Date(model.getDate()));
    }
    stmt.setLong(index, model.getId());
  }

  @Override
  protected ApplicationCounterSummary instanceFromResultSet(ResultSet rs, Collection<Enum> selectedFields) throws SQLException {
    boolean allFields = selectedFields == null || selectedFields.isEmpty();
    long id = rs.getLong("id");
    return new ApplicationCounterSummary(id,
      allFields || selectedFields.contains(ApplicationCounterSummary._Fields.application_id) ? getIntOrNull(rs, "application_id") : null,
      allFields || selectedFields.contains(ApplicationCounterSummary._Fields.group) ? rs.getString("group") : null,
      allFields || selectedFields.contains(ApplicationCounterSummary._Fields.name) ? rs.getString("name") : null,
      allFields || selectedFields.contains(ApplicationCounterSummary._Fields.value) ? getLongOrNull(rs, "value") : null,
      allFields || selectedFields.contains(ApplicationCounterSummary._Fields.date) ? getDateAsLong(rs, "date") : null,
      databases
    );
  }

  public List<ApplicationCounterSummary> findByApplicationId(final Integer value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(ApplicationCounterSummary._Fields.application_id, value));
  }

  public List<ApplicationCounterSummary> findByGroup(final String value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(ApplicationCounterSummary._Fields.group, value));
  }

  public List<ApplicationCounterSummary> findByName(final String value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(ApplicationCounterSummary._Fields.name, value));
  }

  public List<ApplicationCounterSummary> findByValue(final Long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(ApplicationCounterSummary._Fields.value, value));
  }

  public List<ApplicationCounterSummary> findByDate(final Long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(ApplicationCounterSummary._Fields.date, value));
  }

  public ApplicationCounterSummaryQueryBuilder query() {
    return new ApplicationCounterSummaryQueryBuilder(this);
  }

  public ApplicationCounterSummaryDeleteBuilder delete() {
    return new ApplicationCounterSummaryDeleteBuilder(this);
  }
}
