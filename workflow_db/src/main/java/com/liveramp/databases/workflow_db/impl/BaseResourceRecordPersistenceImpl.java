
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.impl;

import java.sql.SQLRecoverableException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Collection;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Timestamp;

import com.rapleaf.jack.AbstractDatabaseModel;
import com.rapleaf.jack.BaseDatabaseConnection;
import com.rapleaf.jack.queries.WhereConstraint;
import com.rapleaf.jack.queries.WhereClause;
import com.rapleaf.jack.util.JackUtility;
import com.liveramp.databases.workflow_db.iface.IResourceRecordPersistence;
import com.liveramp.databases.workflow_db.models.ResourceRecord;
import com.liveramp.databases.workflow_db.query.ResourceRecordQueryBuilder;
import com.liveramp.databases.workflow_db.query.ResourceRecordDeleteBuilder;

import com.liveramp.databases.workflow_db.IDatabases;

public class BaseResourceRecordPersistenceImpl extends AbstractDatabaseModel<ResourceRecord> implements IResourceRecordPersistence {
  private final IDatabases databases;

  public BaseResourceRecordPersistenceImpl(BaseDatabaseConnection conn, IDatabases databases) {
    super(conn, "resource_records", Arrays.<String>asList("name", "resource_root_id", "json", "created_at", "class_path"));
    this.databases = databases;
  }

  @Override
  public ResourceRecord create(Map<Enum, Object> fieldsMap) throws IOException {
    String name = (String) fieldsMap.get(ResourceRecord._Fields.name);
    int resource_root_id = (Integer) fieldsMap.get(ResourceRecord._Fields.resource_root_id);
    String json = (String) fieldsMap.get(ResourceRecord._Fields.json);
    Long created_at = (Long) fieldsMap.get(ResourceRecord._Fields.created_at);
    String class_path = (String) fieldsMap.get(ResourceRecord._Fields.class_path);
    return create(name, resource_root_id, json, created_at, class_path);
  }

  public ResourceRecord create(final String name, final int resource_root_id, final String json, final Long created_at, final String class_path) throws IOException {
    StatementCreator statementCreator = new StatementCreator() {
      private final List<String> nonNullFields = new ArrayList<>();
      private final List<AttrSetter> statementSetters = new ArrayList<>();

      {
        int index = 1;

        nonNullFields.add("name");
        int fieldIndex0 = index++;
        statementSetters.add(stmt -> stmt.setString(fieldIndex0, name));

        nonNullFields.add("resource_root_id");
        int fieldIndex1 = index++;
        statementSetters.add(stmt -> stmt.setInt(fieldIndex1, resource_root_id));

        nonNullFields.add("json");
        int fieldIndex2 = index++;
        statementSetters.add(stmt -> stmt.setString(fieldIndex2, json));

        if (created_at != null) {
          nonNullFields.add("created_at");
          int fieldIndex3 = index++;
          statementSetters.add(stmt -> stmt.setTimestamp(fieldIndex3, new Timestamp(created_at)));
        }

        if (class_path != null) {
          nonNullFields.add("class_path");
          int fieldIndex4 = index++;
          statementSetters.add(stmt -> stmt.setString(fieldIndex4, class_path));
        }
      }

      @Override
      public String getStatement() {
        return getInsertStatement(nonNullFields);
      }

      @Override
      public void setStatement(PreparedStatement statement) throws SQLException {
        for (AttrSetter setter : statementSetters) {
          setter.set(statement);
        }
      }
    };

    long __id = realCreate(statementCreator);
    ResourceRecord newInst = new ResourceRecord(__id, name, resource_root_id, json, created_at, class_path, databases);
    newInst.setCreated(true);
    cachedById.put(__id, newInst);
    clearForeignKeyCache();
    return newInst;
  }

  public ResourceRecord create(final String name, final int resource_root_id, final String json) throws IOException {
    StatementCreator statementCreator = new StatementCreator() {
      private final List<String> nonNullFields = new ArrayList<>();
      private final List<AttrSetter> statementSetters = new ArrayList<>();

      {
        int index = 1;

        nonNullFields.add("name");
        int fieldIndex0 = index++;
        statementSetters.add(stmt -> stmt.setString(fieldIndex0, name));

        nonNullFields.add("resource_root_id");
        int fieldIndex1 = index++;
        statementSetters.add(stmt -> stmt.setInt(fieldIndex1, resource_root_id));

        nonNullFields.add("json");
        int fieldIndex2 = index++;
        statementSetters.add(stmt -> stmt.setString(fieldIndex2, json));
      }

      @Override
      public String getStatement() {
        return getInsertStatement(nonNullFields);
      }

      @Override
      public void setStatement(PreparedStatement statement) throws SQLException {
        for (AttrSetter setter : statementSetters) {
          setter.set(statement);
        }
      }
    };

    long __id = realCreate(statementCreator);
    ResourceRecord newInst = new ResourceRecord(__id, name, resource_root_id, json, null, null, databases);
    newInst.setCreated(true);
    cachedById.put(__id, newInst);
    clearForeignKeyCache();
    return newInst;
  }

  public ResourceRecord createDefaultInstance() throws IOException {
    return create("", 0, "");
  }

  public List<ResourceRecord> find(Map<Enum, Object> fieldsMap) throws IOException {
    return find(null, fieldsMap);
  }

  public List<ResourceRecord> find(Collection<Long> ids, Map<Enum, Object> fieldsMap) throws IOException {
    List<ResourceRecord> foundList = new ArrayList<>();

    if (fieldsMap == null || fieldsMap.isEmpty()) {
      return foundList;
    }

    StringBuilder statementString = new StringBuilder();
    statementString.append("SELECT * FROM resource_records WHERE (");
    List<Object> nonNullValues = new ArrayList<>();
    List<ResourceRecord._Fields> nonNullValueFields = new ArrayList<>();

    Iterator<Map.Entry<Enum, Object>> iter = fieldsMap.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Enum, Object> entry = iter.next();
      Enum field = entry.getKey();
      Object value = entry.getValue();

      String queryValue = value != null ? " = ? " : " IS NULL";
      if (value != null) {
        nonNullValueFields.add((ResourceRecord._Fields) field);
        nonNullValues.add(value);
      }

      statementString.append(field).append(queryValue);
      if (iter.hasNext()) {
        statementString.append(" AND ");
      }
    }
    if (ids != null) statementString.append(" AND ").append(getIdSetCondition(ids));
    statementString.append(")");

    int retryCount = 0;
    PreparedStatement preparedStatement;

    while (true) {
      preparedStatement = getPreparedStatement(statementString.toString());

      for (int i = 0; i < nonNullValues.size(); i++) {
        ResourceRecord._Fields field = nonNullValueFields.get(i);
        try {
          switch (field) {
            case name:
              preparedStatement.setString(i+1, (String) nonNullValues.get(i));
              break;
            case resource_root_id:
              preparedStatement.setInt(i+1, (Integer) nonNullValues.get(i));
              break;
            case json:
              preparedStatement.setString(i+1, (String) nonNullValues.get(i));
              break;
            case created_at:
              preparedStatement.setTimestamp(i+1, new Timestamp((Long) nonNullValues.get(i)));
              break;
            case class_path:
              preparedStatement.setString(i+1, (String) nonNullValues.get(i));
              break;
          }
        } catch (SQLException e) {
          throw new IOException(e);
        }
      }

      try {
        executeQuery(foundList, preparedStatement);
        return foundList;
      } catch (SQLRecoverableException e) {
        if (++retryCount > AbstractDatabaseModel.MAX_CONNECTION_RETRIES) {
          throw new IOException(e);
        }
      } catch (SQLException e) {
        throw new IOException(e);
      }
    }
  }

  @Override
  protected void setStatementParameters(PreparedStatement preparedStatement, WhereClause whereClause) throws IOException {
    int index = 0;
    for (WhereConstraint constraint : whereClause.getWhereConstraints()) {
      for (Object parameter : constraint.getParameters()) {
        if (parameter == null) {
          continue;
        }
        try {
          if (constraint.isId()) {
            preparedStatement.setLong(++index, (Long)parameter);
          } else {
            ResourceRecord._Fields field = (ResourceRecord._Fields)constraint.getField();
            switch (field) {
              case name:
                preparedStatement.setString(++index, (String) parameter);
                break;
              case resource_root_id:
                preparedStatement.setInt(++index, (Integer) parameter);
                break;
              case json:
                preparedStatement.setString(++index, (String) parameter);
                break;
              case created_at:
                preparedStatement.setTimestamp(++index, new Timestamp((Long) parameter));
                break;
              case class_path:
                preparedStatement.setString(++index, (String) parameter);
                break;
            }
          }
        } catch (SQLException e) {
          throw new IOException(e);
        }
      }
    }
  }

  @Override
  protected void setAttrs(ResourceRecord model, PreparedStatement stmt, boolean setNull) throws SQLException {
    int index = 1;
    {
      stmt.setString(index++, model.getName());
    }
    {
      stmt.setInt(index++, model.getResourceRootId());
    }
    {
      stmt.setString(index++, model.getJson());
    }
    if (setNull && model.getCreatedAt() == null) {
      stmt.setNull(index++, java.sql.Types.DATE);
    } else if (model.getCreatedAt() != null) {
      stmt.setTimestamp(index++, new Timestamp(model.getCreatedAt()));
    }
    if (setNull && model.getClassPath() == null) {
      stmt.setNull(index++, java.sql.Types.CHAR);
    } else if (model.getClassPath() != null) {
      stmt.setString(index++, model.getClassPath());
    }
    stmt.setLong(index, model.getId());
  }

  @Override
  protected ResourceRecord instanceFromResultSet(ResultSet rs, Collection<Enum> selectedFields) throws SQLException {
    boolean allFields = selectedFields == null || selectedFields.isEmpty();
    long id = rs.getLong("id");
    return new ResourceRecord(id,
      allFields || selectedFields.contains(ResourceRecord._Fields.name) ? rs.getString("name") : "",
      allFields || selectedFields.contains(ResourceRecord._Fields.resource_root_id) ? getIntOrNull(rs, "resource_root_id") : 0,
      allFields || selectedFields.contains(ResourceRecord._Fields.json) ? rs.getString("json") : "",
      allFields || selectedFields.contains(ResourceRecord._Fields.created_at) ? getDateAsLong(rs, "created_at") : null,
      allFields || selectedFields.contains(ResourceRecord._Fields.class_path) ? rs.getString("class_path") : null,
      databases
    );
  }

  public List<ResourceRecord> findByName(final String value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(ResourceRecord._Fields.name, value));
  }

  public List<ResourceRecord> findByResourceRootId(final int value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(ResourceRecord._Fields.resource_root_id, value));
  }

  public List<ResourceRecord> findByJson(final String value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(ResourceRecord._Fields.json, value));
  }

  public List<ResourceRecord> findByCreatedAt(final Long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(ResourceRecord._Fields.created_at, value));
  }

  public List<ResourceRecord> findByClassPath(final String value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(ResourceRecord._Fields.class_path, value));
  }

  public ResourceRecordQueryBuilder query() {
    return new ResourceRecordQueryBuilder(this);
  }

  public ResourceRecordDeleteBuilder delete() {
    return new ResourceRecordDeleteBuilder(this);
  }
}
