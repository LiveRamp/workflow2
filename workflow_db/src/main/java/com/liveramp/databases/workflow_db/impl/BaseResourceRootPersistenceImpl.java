
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.impl;

import java.sql.SQLRecoverableException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Collection;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Timestamp;

import com.rapleaf.jack.AbstractDatabaseModel;
import com.rapleaf.jack.BaseDatabaseConnection;
import com.rapleaf.jack.queries.WhereConstraint;
import com.rapleaf.jack.queries.WhereClause;
import com.rapleaf.jack.util.JackUtility;
import com.liveramp.databases.workflow_db.iface.IResourceRootPersistence;
import com.liveramp.databases.workflow_db.models.ResourceRoot;
import com.liveramp.databases.workflow_db.query.ResourceRootQueryBuilder;
import com.liveramp.databases.workflow_db.query.ResourceRootDeleteBuilder;

import com.liveramp.databases.workflow_db.IDatabases;

public class BaseResourceRootPersistenceImpl extends AbstractDatabaseModel<ResourceRoot> implements IResourceRootPersistence {
  private final IDatabases databases;

  public BaseResourceRootPersistenceImpl(BaseDatabaseConnection conn, IDatabases databases) {
    super(conn, "resource_roots", Arrays.<String>asList("name", "created_at", "updated_at", "scope_identifier", "version", "version_type"));
    this.databases = databases;
  }

  @Override
  public ResourceRoot create(Map<Enum, Object> fieldsMap) throws IOException {
    String name = (String) fieldsMap.get(ResourceRoot._Fields.name);
    Long created_at = (Long) fieldsMap.get(ResourceRoot._Fields.created_at);
    Long updated_at = (Long) fieldsMap.get(ResourceRoot._Fields.updated_at);
    String scope_identifier = (String) fieldsMap.get(ResourceRoot._Fields.scope_identifier);
    Long version = (Long) fieldsMap.get(ResourceRoot._Fields.version);
    String version_type = (String) fieldsMap.get(ResourceRoot._Fields.version_type);
    return create(name, created_at, updated_at, scope_identifier, version, version_type);
  }

  public ResourceRoot create(final String name, final Long created_at, final Long updated_at, final String scope_identifier, final Long version, final String version_type) throws IOException {
    StatementCreator statementCreator = new StatementCreator() {
      private final List<String> nonNullFields = new ArrayList<>();
      private final List<AttrSetter> statementSetters = new ArrayList<>();

      {
        int index = 1;

        if (name != null) {
          nonNullFields.add("name");
          int fieldIndex0 = index++;
          statementSetters.add(stmt -> stmt.setString(fieldIndex0, name));
        }

        if (created_at != null) {
          nonNullFields.add("created_at");
          int fieldIndex1 = index++;
          statementSetters.add(stmt -> stmt.setTimestamp(fieldIndex1, new Timestamp(created_at)));
        }

        if (updated_at != null) {
          nonNullFields.add("updated_at");
          int fieldIndex2 = index++;
          statementSetters.add(stmt -> stmt.setTimestamp(fieldIndex2, new Timestamp(updated_at)));
        }

        if (scope_identifier != null) {
          nonNullFields.add("scope_identifier");
          int fieldIndex3 = index++;
          statementSetters.add(stmt -> stmt.setString(fieldIndex3, scope_identifier));
        }

        if (version != null) {
          nonNullFields.add("version");
          int fieldIndex4 = index++;
          statementSetters.add(stmt -> stmt.setLong(fieldIndex4, version));
        }

        if (version_type != null) {
          nonNullFields.add("version_type");
          int fieldIndex5 = index++;
          statementSetters.add(stmt -> stmt.setString(fieldIndex5, version_type));
        }
      }

      @Override
      public String getStatement() {
        return getInsertStatement(nonNullFields);
      }

      @Override
      public void setStatement(PreparedStatement statement) throws SQLException {
        for (AttrSetter setter : statementSetters) {
          setter.set(statement);
        }
      }
    };

    long __id = realCreate(statementCreator);
    ResourceRoot newInst = new ResourceRoot(__id, name, created_at, updated_at, scope_identifier, version, version_type, databases);
    newInst.setCreated(true);
    cachedById.put(__id, newInst);
    clearForeignKeyCache();
    return newInst;
  }

  public ResourceRoot create() throws IOException {
    StatementCreator statementCreator = new StatementCreator() {
      private final List<String> nonNullFields = new ArrayList<>();
      private final List<AttrSetter> statementSetters = new ArrayList<>();

      @Override
      public String getStatement() {
        return getInsertStatement(nonNullFields);
      }

      @Override
      public void setStatement(PreparedStatement statement) throws SQLException {
        for (AttrSetter setter : statementSetters) {
          setter.set(statement);
        }
      }
    };

    long __id = realCreate(statementCreator);
    ResourceRoot newInst = new ResourceRoot(__id, null, null, null, null, null, null, databases);
    newInst.setCreated(true);
    cachedById.put(__id, newInst);
    clearForeignKeyCache();
    return newInst;
  }

  public ResourceRoot createDefaultInstance() throws IOException {
    return create();
  }

  public List<ResourceRoot> find(Map<Enum, Object> fieldsMap) throws IOException {
    return find(null, fieldsMap);
  }

  public List<ResourceRoot> find(Collection<Long> ids, Map<Enum, Object> fieldsMap) throws IOException {
    List<ResourceRoot> foundList = new ArrayList<>();

    if (fieldsMap == null || fieldsMap.isEmpty()) {
      return foundList;
    }

    StringBuilder statementString = new StringBuilder();
    statementString.append("SELECT * FROM resource_roots WHERE (");
    List<Object> nonNullValues = new ArrayList<>();
    List<ResourceRoot._Fields> nonNullValueFields = new ArrayList<>();

    Iterator<Map.Entry<Enum, Object>> iter = fieldsMap.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Enum, Object> entry = iter.next();
      Enum field = entry.getKey();
      Object value = entry.getValue();

      String queryValue = value != null ? " = ? " : " IS NULL";
      if (value != null) {
        nonNullValueFields.add((ResourceRoot._Fields) field);
        nonNullValues.add(value);
      }

      statementString.append(field).append(queryValue);
      if (iter.hasNext()) {
        statementString.append(" AND ");
      }
    }
    if (ids != null) statementString.append(" AND ").append(getIdSetCondition(ids));
    statementString.append(")");

    int retryCount = 0;
    PreparedStatement preparedStatement;

    while (true) {
      preparedStatement = getPreparedStatement(statementString.toString());

      for (int i = 0; i < nonNullValues.size(); i++) {
        ResourceRoot._Fields field = nonNullValueFields.get(i);
        try {
          switch (field) {
            case name:
              preparedStatement.setString(i+1, (String) nonNullValues.get(i));
              break;
            case created_at:
              preparedStatement.setTimestamp(i+1, new Timestamp((Long) nonNullValues.get(i)));
              break;
            case updated_at:
              preparedStatement.setTimestamp(i+1, new Timestamp((Long) nonNullValues.get(i)));
              break;
            case scope_identifier:
              preparedStatement.setString(i+1, (String) nonNullValues.get(i));
              break;
            case version:
              preparedStatement.setLong(i+1, (Long) nonNullValues.get(i));
              break;
            case version_type:
              preparedStatement.setString(i+1, (String) nonNullValues.get(i));
              break;
          }
        } catch (SQLException e) {
          throw new IOException(e);
        }
      }

      try {
        executeQuery(foundList, preparedStatement);
        return foundList;
      } catch (SQLRecoverableException e) {
        if (++retryCount > AbstractDatabaseModel.MAX_CONNECTION_RETRIES) {
          throw new IOException(e);
        }
      } catch (SQLException e) {
        throw new IOException(e);
      }
    }
  }

  @Override
  protected void setStatementParameters(PreparedStatement preparedStatement, WhereClause whereClause) throws IOException {
    int index = 0;
    for (WhereConstraint constraint : whereClause.getWhereConstraints()) {
      for (Object parameter : constraint.getParameters()) {
        if (parameter == null) {
          continue;
        }
        try {
          if (constraint.isId()) {
            preparedStatement.setLong(++index, (Long)parameter);
          } else {
            ResourceRoot._Fields field = (ResourceRoot._Fields)constraint.getField();
            switch (field) {
              case name:
                preparedStatement.setString(++index, (String) parameter);
                break;
              case created_at:
                preparedStatement.setTimestamp(++index, new Timestamp((Long) parameter));
                break;
              case updated_at:
                preparedStatement.setTimestamp(++index, new Timestamp((Long) parameter));
                break;
              case scope_identifier:
                preparedStatement.setString(++index, (String) parameter);
                break;
              case version:
                preparedStatement.setLong(++index, (Long) parameter);
                break;
              case version_type:
                preparedStatement.setString(++index, (String) parameter);
                break;
            }
          }
        } catch (SQLException e) {
          throw new IOException(e);
        }
      }
    }
  }

  @Override
  protected void setAttrs(ResourceRoot model, PreparedStatement stmt, boolean setNull) throws SQLException {
    int index = 1;
    if (setNull && model.getName() == null) {
      stmt.setNull(index++, java.sql.Types.CHAR);
    } else if (model.getName() != null) {
      stmt.setString(index++, model.getName());
    }
    if (setNull && model.getCreatedAt() == null) {
      stmt.setNull(index++, java.sql.Types.DATE);
    } else if (model.getCreatedAt() != null) {
      stmt.setTimestamp(index++, new Timestamp(model.getCreatedAt()));
    }
    if (setNull && model.getUpdatedAt() == null) {
      stmt.setNull(index++, java.sql.Types.DATE);
    } else if (model.getUpdatedAt() != null) {
      stmt.setTimestamp(index++, new Timestamp(model.getUpdatedAt()));
    }
    if (setNull && model.getScopeIdentifier() == null) {
      stmt.setNull(index++, java.sql.Types.CHAR);
    } else if (model.getScopeIdentifier() != null) {
      stmt.setString(index++, model.getScopeIdentifier());
    }
    if (setNull && model.getVersion() == null) {
      stmt.setNull(index++, java.sql.Types.INTEGER);
    } else if (model.getVersion() != null) {
      stmt.setLong(index++, model.getVersion());
    }
    if (setNull && model.getVersionType() == null) {
      stmt.setNull(index++, java.sql.Types.CHAR);
    } else if (model.getVersionType() != null) {
      stmt.setString(index++, model.getVersionType());
    }
    stmt.setLong(index, model.getId());
  }

  @Override
  protected ResourceRoot instanceFromResultSet(ResultSet rs, Collection<Enum> selectedFields) throws SQLException {
    boolean allFields = selectedFields == null || selectedFields.isEmpty();
    long id = rs.getLong("id");
    return new ResourceRoot(id,
      allFields || selectedFields.contains(ResourceRoot._Fields.name) ? rs.getString("name") : null,
      allFields || selectedFields.contains(ResourceRoot._Fields.created_at) ? getDateAsLong(rs, "created_at") : null,
      allFields || selectedFields.contains(ResourceRoot._Fields.updated_at) ? getDateAsLong(rs, "updated_at") : null,
      allFields || selectedFields.contains(ResourceRoot._Fields.scope_identifier) ? rs.getString("scope_identifier") : null,
      allFields || selectedFields.contains(ResourceRoot._Fields.version) ? getLongOrNull(rs, "version") : null,
      allFields || selectedFields.contains(ResourceRoot._Fields.version_type) ? rs.getString("version_type") : null,
      databases
    );
  }

  public List<ResourceRoot> findByName(final String value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(ResourceRoot._Fields.name, value));
  }

  public List<ResourceRoot> findByCreatedAt(final Long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(ResourceRoot._Fields.created_at, value));
  }

  public List<ResourceRoot> findByUpdatedAt(final Long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(ResourceRoot._Fields.updated_at, value));
  }

  public List<ResourceRoot> findByScopeIdentifier(final String value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(ResourceRoot._Fields.scope_identifier, value));
  }

  public List<ResourceRoot> findByVersion(final Long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(ResourceRoot._Fields.version, value));
  }

  public List<ResourceRoot> findByVersionType(final String value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(ResourceRoot._Fields.version_type, value));
  }

  public ResourceRootQueryBuilder query() {
    return new ResourceRootQueryBuilder(this);
  }

  public ResourceRootDeleteBuilder delete() {
    return new ResourceRootDeleteBuilder(this);
  }
}
