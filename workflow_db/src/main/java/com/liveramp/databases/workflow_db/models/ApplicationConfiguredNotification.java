
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.models;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import com.rapleaf.jack.AssociationType;
import com.rapleaf.jack.AttributesWithId;
import com.rapleaf.jack.BelongsToAssociation;
import com.rapleaf.jack.DefaultAssociationMetadata;
import com.rapleaf.jack.HasManyAssociation;
import com.rapleaf.jack.HasOneAssociation;
import com.rapleaf.jack.IAssociationMetadata;
import com.rapleaf.jack.IModelAssociationMetadata;
import com.rapleaf.jack.ModelIdWrapper;
import com.rapleaf.jack.ModelWithId;
import com.rapleaf.jack.queries.AbstractTable;
import com.rapleaf.jack.queries.Column;

import com.liveramp.databases.workflow_db.IDatabases;
import com.rapleaf.jack.util.JackUtility;

public class ApplicationConfiguredNotification extends ModelWithId<ApplicationConfiguredNotification, IDatabases> implements Comparable<ApplicationConfiguredNotification>{
  
  public static final long serialVersionUID = -6567123577537385255L;

  public static class Tbl extends AbstractTable<ApplicationConfiguredNotification.Attributes, ApplicationConfiguredNotification> {
    public final Column<Long> ID;
    public final Column<Long> APPLICATION_ID;
    public final Column<Long> CONFIGURED_NOTIFICATION_ID;

    private Tbl(String alias) {
      super("application_configured_notifications", alias, ApplicationConfiguredNotification.Attributes.class, ApplicationConfiguredNotification.class);
      this.ID = Column.fromId(alias);
      this.APPLICATION_ID = Column.fromField(alias, _Fields.application_id, Long.class);
      this.CONFIGURED_NOTIFICATION_ID = Column.fromField(alias, _Fields.configured_notification_id, Long.class);
      Collections.addAll(this.allColumns, ID, APPLICATION_ID, CONFIGURED_NOTIFICATION_ID);
    }

    public static Tbl as(String alias) {
      return new Tbl(alias);
    }
  }

  public static final Tbl TBL = new Tbl("application_configured_notifications");
  public static final Column<Long> ID = TBL.ID;
  public static final Column<Long> APPLICATION_ID = TBL.APPLICATION_ID;
  public static final Column<Long> CONFIGURED_NOTIFICATION_ID = TBL.CONFIGURED_NOTIFICATION_ID;

  private final Attributes attributes;

  private transient ApplicationConfiguredNotification.Id cachedTypedId;

  // Associations
  private BelongsToAssociation<ConfiguredNotification> __assoc_configured_notification;
  private BelongsToAssociation<Application> __assoc_application;

  public enum _Fields {
    application_id,
    configured_notification_id,
  }

  @Override
  public ApplicationConfiguredNotification.Id getTypedId() {
    if (cachedTypedId == null) {
      cachedTypedId = new ApplicationConfiguredNotification.Id(this.getId());
    }
    return cachedTypedId;
  }

  public ApplicationConfiguredNotification(long id, final long application_id, final long configured_notification_id, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, application_id, configured_notification_id);
    this.__assoc_configured_notification = new BelongsToAssociation<>(databases.getWorkflowDb().configuredNotifications(), getConfiguredNotificationId());
    this.__assoc_application = new BelongsToAssociation<>(databases.getWorkflowDb().applications(), getApplicationId());
  }

  public ApplicationConfiguredNotification(long id, final long application_id, final long configured_notification_id) {
    super(null);
    attributes = new Attributes(id, application_id, configured_notification_id);
  }

  public static ApplicationConfiguredNotification newDefaultInstance(long id) {
    return new ApplicationConfiguredNotification(id, 0L, 0L);
  }

  public ApplicationConfiguredNotification(Attributes attributes, IDatabases databases) {
    super(databases);
    this.attributes = attributes;

    if (databases != null) {
      this.__assoc_configured_notification = new BelongsToAssociation<>(databases.getWorkflowDb().configuredNotifications(), getConfiguredNotificationId());
      this.__assoc_application = new BelongsToAssociation<>(databases.getWorkflowDb().applications(), getApplicationId());
    }
  }

  public ApplicationConfiguredNotification(Attributes attributes) {
    this(attributes, (IDatabases) null);
  }

  public ApplicationConfiguredNotification(long id, Map<Enum, Object> fieldsMap) {
    super(null);
    attributes = new Attributes(id, fieldsMap);
  }

  public ApplicationConfiguredNotification (ApplicationConfiguredNotification other) {
    this(other, (IDatabases)null);
  }

  public ApplicationConfiguredNotification (ApplicationConfiguredNotification other, IDatabases databases) {
    super(databases);
    attributes = new Attributes(other.getAttributes());

    if (databases != null) {
      this.__assoc_configured_notification = new BelongsToAssociation<>(databases.getWorkflowDb().configuredNotifications(), getConfiguredNotificationId());
      this.__assoc_application = new BelongsToAssociation<>(databases.getWorkflowDb().applications(), getApplicationId());
    }
  }

  public Attributes getAttributes() {
    return attributes;
  }

  public long getApplicationId() {
    return attributes.getApplicationId();
  }

  public ApplicationConfiguredNotification setApplicationId(long newval) {
    attributes.setApplicationId(newval);
    if(__assoc_application != null){
      this.__assoc_application.setOwnerId(newval);
    }
    cachedHashCode = 0;
    return this;
  }

  public long getConfiguredNotificationId() {
    return attributes.getConfiguredNotificationId();
  }

  public ApplicationConfiguredNotification setConfiguredNotificationId(long newval) {
    attributes.setConfiguredNotificationId(newval);
    if(__assoc_configured_notification != null){
      this.__assoc_configured_notification.setOwnerId(newval);
    }
    cachedHashCode = 0;
    return this;
  }

  public void setField(_Fields field, Object value) {
    switch (field) {
      case application_id:
        setApplicationId((Long)value);
        break;
      case configured_notification_id:
        setConfiguredNotificationId((Long)value);
        break;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }
  }
  
  public void setField(String fieldName, Object value) {
    if (fieldName.equals("application_id")) {
      setApplicationId((Long)  value);
      return;
    }
    if (fieldName.equals("configured_notification_id")) {
      setConfiguredNotificationId((Long)  value);
      return;
    }
    throw new IllegalStateException("Invalid field: " + fieldName);
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
      case application_id:
        return long.class;
      case configured_notification_id:
        return long.class;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
    if (fieldName.equals("application_id")) {
      return long.class;
    }
    if (fieldName.equals("configured_notification_id")) {
      return long.class;
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public ConfiguredNotification getConfiguredNotification() throws IOException {
    return __assoc_configured_notification.get();
  }

  public Application getApplication() throws IOException {
    return __assoc_application.get();
  }

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
    if (fieldName.equals("application_id")) {
      return getApplicationId();
    }
    if (fieldName.equals("configured_notification_id")) {
      return getConfiguredNotificationId();
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
      case application_id:
        return getApplicationId();
      case configured_notification_id:
        return getConfiguredNotificationId();
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  public boolean hasField(String fieldName) {
    if (fieldName.equals("id")) {
      return true;
    }
    if (fieldName.equals("application_id")) {
      return true;
    }
    if (fieldName.equals("configured_notification_id")) {
      return true;
    }
    return false;
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
      case application_id:
        return null;
      case configured_notification_id:
        return null;
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public ApplicationConfiguredNotification getCopy() {
    return getCopy(databases);
  }

  @Override
  public ApplicationConfiguredNotification getCopy(IDatabases databases) {
    return new ApplicationConfiguredNotification(this, databases);
  }

  @Override
  public boolean save() throws IOException {
    return databases.getWorkflowDb().applicationConfiguredNotifications().save(this);
  }

  public ConfiguredNotification createConfiguredNotification(final int workflow_runner_notification) throws IOException {
 
    ConfiguredNotification newConfiguredNotification = databases.getWorkflowDb().configuredNotifications().create(workflow_runner_notification);
    setConfiguredNotificationId(newConfiguredNotification.getId());
    save();
    __assoc_configured_notification.clearCache();
    return newConfiguredNotification;
  }

  public ConfiguredNotification createConfiguredNotification(final int workflow_runner_notification, final String email, final Boolean provided_alerts_handler) throws IOException {
 
    ConfiguredNotification newConfiguredNotification = databases.getWorkflowDb().configuredNotifications().create(workflow_runner_notification, email, provided_alerts_handler);
    setConfiguredNotificationId(newConfiguredNotification.getId());
    save();
    __assoc_configured_notification.clearCache();
    return newConfiguredNotification;
  }

  public ConfiguredNotification createConfiguredNotification() throws IOException {
 
    ConfiguredNotification newConfiguredNotification = databases.getWorkflowDb().configuredNotifications().create(0);
    setConfiguredNotificationId(newConfiguredNotification.getId());
    save();
    __assoc_configured_notification.clearCache();
    return newConfiguredNotification;
  }

  public Application createApplication(final String name) throws IOException {
 
    Application newApplication = databases.getWorkflowDb().applications().create(name);
    setApplicationId(newApplication.getId());
    save();
    __assoc_application.clearCache();
    return newApplication;
  }

  public Application createApplication(final String name, final Integer app_type) throws IOException {
 
    Application newApplication = databases.getWorkflowDb().applications().create(name, app_type);
    setApplicationId(newApplication.getId());
    save();
    __assoc_application.clearCache();
    return newApplication;
  }

  public Application createApplication() throws IOException {
 
    Application newApplication = databases.getWorkflowDb().applications().create("");
    setApplicationId(newApplication.getId());
    save();
    __assoc_application.clearCache();
    return newApplication;
  }

  public String toString() {
    return "<ApplicationConfiguredNotification"
        + " id: " + this.getId()
        + " application_id: " + getApplicationId()
        + " configured_notification_id: " + getConfiguredNotificationId()
        + ">";
  }

  public void unsetAssociations() {
    unsetDatabaseReference();
    __assoc_configured_notification = null;
    __assoc_application = null;
  }

  public int compareTo(ApplicationConfiguredNotification that) {
    return Long.valueOf(this.getId()).compareTo(that.getId());
  }
  
  
  public static class Attributes extends AttributesWithId {
    
    public static final long serialVersionUID = -5257320716531041456L;

    // Fields
    private long __application_id;
    private long __configured_notification_id;

    public Attributes(long id) {
      super(id);
    }

    public Attributes(long id, final long application_id, final long configured_notification_id) {
      super(id);
      this.__application_id = application_id;
      this.__configured_notification_id = configured_notification_id;
    }

    public static Attributes newDefaultInstance(long id) {
      return new Attributes(id, 0L, 0L);
    }

    public Attributes(long id, Map<Enum, Object> fieldsMap) {
      super(id);
      long application_id = (Long)fieldsMap.get(ApplicationConfiguredNotification._Fields.application_id);
      long configured_notification_id = (Long)fieldsMap.get(ApplicationConfiguredNotification._Fields.configured_notification_id);
      this.__application_id = application_id;
      this.__configured_notification_id = configured_notification_id;
    }

    public Attributes(Attributes other) {
      super(other.getId());
      this.__application_id = other.getApplicationId();
      this.__configured_notification_id = other.getConfiguredNotificationId();
    }

    public long getApplicationId() {
      return __application_id;
    }

    public Attributes setApplicationId(long newval) {
      this.__application_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public long getConfiguredNotificationId() {
      return __configured_notification_id;
    }

    public Attributes setConfiguredNotificationId(long newval) {
      this.__configured_notification_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public void setField(_Fields field, Object value) {
      switch (field) {
        case application_id:
          setApplicationId((Long)value);
          break;
        case configured_notification_id:
          setConfiguredNotificationId((Long)value);
          break;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }
    }

    public void setField(String fieldName, Object value) {
      if (fieldName.equals("application_id")) {
        setApplicationId((Long)value);
        return;
      }
      if (fieldName.equals("configured_notification_id")) {
        setConfiguredNotificationId((Long)value);
        return;
      }
      throw new IllegalStateException("Invalid field: " + fieldName);
    }

    public static Class getFieldType(_Fields field) {
      switch (field) {
        case application_id:
          return long.class;
        case configured_notification_id:
          return long.class;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }    
    }

    public static Class getFieldType(String fieldName) {    
      if (fieldName.equals("application_id")) {
        return long.class;
      }
      if (fieldName.equals("configured_notification_id")) {
        return long.class;
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    @Override
    public Object getField(String fieldName) {
      if (fieldName.equals("id")) {
        return getId();
      }
      if (fieldName.equals("application_id")) {
        return getApplicationId();
      }
      if (fieldName.equals("configured_notification_id")) {
        return getConfiguredNotificationId();
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    public Object getField(_Fields field) {
      switch (field) {
        case application_id:
          return getApplicationId();
        case configured_notification_id:
          return getConfiguredNotificationId();
      }
      throw new IllegalStateException("Invalid field: " + field);
    }

    public boolean hasField(String fieldName) {
      if (fieldName.equals("id")) {
        return true;
      }
      if (fieldName.equals("application_id")) {
        return true;
      }
      if (fieldName.equals("configured_notification_id")) {
        return true;
      }
      return false;
    }

    public static Object getDefaultValue(_Fields field) {
      switch (field) {
        case application_id:
          return null;
        case configured_notification_id:
          return null;
      }
      throw new IllegalStateException("Invalid field: " + field);
    }
    
    @Override
    public Set<Enum> getFieldSet() {
      Set set = EnumSet.allOf(_Fields.class);
      return set;
    }
    
    public String toString() {
      return "<ApplicationConfiguredNotification.Attributes"
          + " application_id: " + getApplicationId()
          + " configured_notification_id: " + getConfiguredNotificationId()
          + ">";
    }
  }

  public static class Id implements ModelIdWrapper<ApplicationConfiguredNotification.Id> {
    public static final long serialVersionUID = 1L;

    private final long id;

    public Id(Long id) {
      this.id = id;
    }

    @Override
    public Long getId() {
      return id;
    }

    @Override
    public int compareTo(Id other) {
      return this.getId().compareTo(other.getId());
    }

    @Override
    public boolean equals(Object other) {
      if (other instanceof Id) {
        return this.getId().equals(((Id)other).getId());
      }
      return false;
    }

    @Override
    public int hashCode() {
      return this.getId().hashCode();
    }

    @Override
    public String toString() {
      return "<ApplicationConfiguredNotification.Id: " + this.getId() + ">";
    }
  }

  public static Set<Attributes> convertToAttributesSet(Collection<ApplicationConfiguredNotification> models) {
    return models.stream()
        .map(ApplicationConfiguredNotification::getAttributes)
        .collect(Collectors.toSet());
  }

  public static class AssociationMetadata implements IModelAssociationMetadata {

    private List<IAssociationMetadata> meta = new ArrayList<>();

    public AssociationMetadata(){
      meta.add(new DefaultAssociationMetadata(AssociationType.BELONGS_TO, ApplicationConfiguredNotification.class, ConfiguredNotification.class, "configured_notification_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.BELONGS_TO, ApplicationConfiguredNotification.class, Application.class, "application_id"));
    }

    @Override
    public List<IAssociationMetadata> getAssociationMetadata() {
      return meta;
    }
  }

}
