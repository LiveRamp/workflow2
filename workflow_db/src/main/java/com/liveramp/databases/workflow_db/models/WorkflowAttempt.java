
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.models;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import com.rapleaf.jack.AssociationType;
import com.rapleaf.jack.AttributesWithId;
import com.rapleaf.jack.BelongsToAssociation;
import com.rapleaf.jack.DefaultAssociationMetadata;
import com.rapleaf.jack.HasManyAssociation;
import com.rapleaf.jack.HasOneAssociation;
import com.rapleaf.jack.IAssociationMetadata;
import com.rapleaf.jack.IModelAssociationMetadata;
import com.rapleaf.jack.ModelIdWrapper;
import com.rapleaf.jack.ModelWithId;
import com.rapleaf.jack.queries.AbstractTable;
import com.rapleaf.jack.queries.Column;

import com.liveramp.databases.workflow_db.IDatabases;
import com.rapleaf.jack.util.JackUtility;

public class WorkflowAttempt extends ModelWithId<WorkflowAttempt, IDatabases> implements Comparable<WorkflowAttempt>{
  
  public static final long serialVersionUID = -433952985010219556L;

  public static class Tbl extends AbstractTable<WorkflowAttempt.Attributes, WorkflowAttempt> {
    public final Column<Long> ID;
    public final Column<Integer> WORKFLOW_EXECUTION_ID;
    public final Column<String> SYSTEM_USER;
    public final Column<String> SHUTDOWN_REASON;
    public final Column<String> PRIORITY;
    public final Column<String> POOL;
    public final Column<String> HOST;
    public final Column<Long> START_TIME;
    public final Column<Long> END_TIME;
    public final Column<Integer> STATUS;
    public final Column<Long> LAST_HEARTBEAT;
    public final Column<String> LAUNCH_DIR;
    public final Column<String> LAUNCH_JAR;
    public final Column<String> ERROR_EMAIL;
    public final Column<String> INFO_EMAIL;
    public final Column<String> SCM_REMOTE;
    public final Column<String> COMMIT_REVISION;
    public final Column<String> DESCRIPTION;

    private Tbl(String alias) {
      super("workflow_attempts", alias, WorkflowAttempt.Attributes.class, WorkflowAttempt.class);
      this.ID = Column.fromId(alias);
      this.WORKFLOW_EXECUTION_ID = Column.fromField(alias, _Fields.workflow_execution_id, Integer.class);
      this.SYSTEM_USER = Column.fromField(alias, _Fields.system_user, String.class);
      this.SHUTDOWN_REASON = Column.fromField(alias, _Fields.shutdown_reason, String.class);
      this.PRIORITY = Column.fromField(alias, _Fields.priority, String.class);
      this.POOL = Column.fromField(alias, _Fields.pool, String.class);
      this.HOST = Column.fromField(alias, _Fields.host, String.class);
      this.START_TIME = Column.fromTimestamp(alias, _Fields.start_time);
      this.END_TIME = Column.fromTimestamp(alias, _Fields.end_time);
      this.STATUS = Column.fromField(alias, _Fields.status, Integer.class);
      this.LAST_HEARTBEAT = Column.fromTimestamp(alias, _Fields.last_heartbeat);
      this.LAUNCH_DIR = Column.fromField(alias, _Fields.launch_dir, String.class);
      this.LAUNCH_JAR = Column.fromField(alias, _Fields.launch_jar, String.class);
      this.ERROR_EMAIL = Column.fromField(alias, _Fields.error_email, String.class);
      this.INFO_EMAIL = Column.fromField(alias, _Fields.info_email, String.class);
      this.SCM_REMOTE = Column.fromField(alias, _Fields.scm_remote, String.class);
      this.COMMIT_REVISION = Column.fromField(alias, _Fields.commit_revision, String.class);
      this.DESCRIPTION = Column.fromField(alias, _Fields.description, String.class);
      Collections.addAll(this.allColumns, ID, WORKFLOW_EXECUTION_ID, SYSTEM_USER, SHUTDOWN_REASON, PRIORITY, POOL, HOST, START_TIME, END_TIME, STATUS, LAST_HEARTBEAT, LAUNCH_DIR, LAUNCH_JAR, ERROR_EMAIL, INFO_EMAIL, SCM_REMOTE, COMMIT_REVISION, DESCRIPTION);
    }

    public static Tbl as(String alias) {
      return new Tbl(alias);
    }
  }

  public static final Tbl TBL = new Tbl("workflow_attempts");
  public static final Column<Long> ID = TBL.ID;
  public static final Column<Integer> WORKFLOW_EXECUTION_ID = TBL.WORKFLOW_EXECUTION_ID;
  public static final Column<String> SYSTEM_USER = TBL.SYSTEM_USER;
  public static final Column<String> SHUTDOWN_REASON = TBL.SHUTDOWN_REASON;
  public static final Column<String> PRIORITY = TBL.PRIORITY;
  public static final Column<String> POOL = TBL.POOL;
  public static final Column<String> HOST = TBL.HOST;
  public static final Column<Long> START_TIME = TBL.START_TIME;
  public static final Column<Long> END_TIME = TBL.END_TIME;
  public static final Column<Integer> STATUS = TBL.STATUS;
  public static final Column<Long> LAST_HEARTBEAT = TBL.LAST_HEARTBEAT;
  public static final Column<String> LAUNCH_DIR = TBL.LAUNCH_DIR;
  public static final Column<String> LAUNCH_JAR = TBL.LAUNCH_JAR;
  public static final Column<String> ERROR_EMAIL = TBL.ERROR_EMAIL;
  public static final Column<String> INFO_EMAIL = TBL.INFO_EMAIL;
  public static final Column<String> SCM_REMOTE = TBL.SCM_REMOTE;
  public static final Column<String> COMMIT_REVISION = TBL.COMMIT_REVISION;
  public static final Column<String> DESCRIPTION = TBL.DESCRIPTION;

  private final Attributes attributes;

  private transient WorkflowAttempt.Id cachedTypedId;

  // Associations
  private BelongsToAssociation<WorkflowExecution> __assoc_workflow_execution;
  private HasManyAssociation<StepAttempt> __assoc_step_attempt;
  private HasManyAssociation<WorkflowAttemptDatastore> __assoc_workflow_attempt_datastore;
  private HasManyAssociation<WorkflowAttemptConfiguredNotification> __assoc_workflow_attempt_configured_notification;
  private HasOneAssociation<BackgroundAttemptInfo> __assoc_background_attempt_info;

  public enum _Fields {
    workflow_execution_id,
    system_user,
    shutdown_reason,
    priority,
    pool,
    host,
    start_time,
    end_time,
    status,
    last_heartbeat,
    launch_dir,
    launch_jar,
    error_email,
    info_email,
    scm_remote,
    commit_revision,
    description,
  }

  @Override
  public WorkflowAttempt.Id getTypedId() {
    if (cachedTypedId == null) {
      cachedTypedId = new WorkflowAttempt.Id(this.getId());
    }
    return cachedTypedId;
  }

  public WorkflowAttempt(long id, final int workflow_execution_id, final String system_user, final String shutdown_reason, final String priority, final String pool, final String host, final Long start_time, final Long end_time, final Integer status, final Long last_heartbeat, final String launch_dir, final String launch_jar, final String error_email, final String info_email, final String scm_remote, final String commit_revision, final String description, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, workflow_execution_id, system_user, shutdown_reason, priority, pool, host, start_time, end_time, status, last_heartbeat, launch_dir, launch_jar, error_email, info_email, scm_remote, commit_revision, description);
    this.__assoc_workflow_execution = new BelongsToAssociation<>(databases.getWorkflowDb().workflowExecutions(), (long) getWorkflowExecutionId());
    this.__assoc_step_attempt = new HasManyAssociation<>(databases.getWorkflowDb().stepAttempts(), "workflow_attempt_id", getId());
    this.__assoc_workflow_attempt_datastore = new HasManyAssociation<>(databases.getWorkflowDb().workflowAttemptDatastores(), "workflow_attempt_id", getId());
    this.__assoc_workflow_attempt_configured_notification = new HasManyAssociation<>(databases.getWorkflowDb().workflowAttemptConfiguredNotifications(), "workflow_attempt_id", getId());
    this.__assoc_background_attempt_info = new HasOneAssociation<>(databases.getWorkflowDb().backgroundAttemptInfos(), "workflow_attempt_id", getId());
  }

  public WorkflowAttempt(long id, final int workflow_execution_id, final String system_user, final String shutdown_reason, final String priority, final String pool, final String host, final Long start_time, final Long end_time, final Integer status, final Long last_heartbeat, final String launch_dir, final String launch_jar, final String error_email, final String info_email, final String scm_remote, final String commit_revision, final String description) {
    super(null);
    attributes = new Attributes(id, workflow_execution_id, system_user, shutdown_reason, priority, pool, host, start_time, end_time, status, last_heartbeat, launch_dir, launch_jar, error_email, info_email, scm_remote, commit_revision, description);
  }
  
  public WorkflowAttempt(long id, final int workflow_execution_id, final String system_user, final String priority, final String pool, final String host, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, workflow_execution_id, system_user, priority, pool, host);
    this.__assoc_workflow_execution = new BelongsToAssociation<>(databases.getWorkflowDb().workflowExecutions(), (long) getWorkflowExecutionId());
    this.__assoc_step_attempt = new HasManyAssociation<>(databases.getWorkflowDb().stepAttempts(), "workflow_attempt_id", getId());
    this.__assoc_workflow_attempt_datastore = new HasManyAssociation<>(databases.getWorkflowDb().workflowAttemptDatastores(), "workflow_attempt_id", getId());
    this.__assoc_workflow_attempt_configured_notification = new HasManyAssociation<>(databases.getWorkflowDb().workflowAttemptConfiguredNotifications(), "workflow_attempt_id", getId());
    this.__assoc_background_attempt_info = new HasOneAssociation<>(databases.getWorkflowDb().backgroundAttemptInfos(), "workflow_attempt_id", getId());
  }

  public WorkflowAttempt(long id, final int workflow_execution_id, final String system_user, final String priority, final String pool, final String host) {
    super(null);
    attributes = new Attributes(id, workflow_execution_id, system_user, priority, pool, host);
  }

  public static WorkflowAttempt newDefaultInstance(long id) {
    return new WorkflowAttempt(id, 0, "", "", "", "");
  }

  public WorkflowAttempt(Attributes attributes, IDatabases databases) {
    super(databases);
    this.attributes = attributes;

    if (databases != null) {
      this.__assoc_workflow_execution = new BelongsToAssociation<>(databases.getWorkflowDb().workflowExecutions(), (long) getWorkflowExecutionId());
      this.__assoc_step_attempt = new HasManyAssociation<>(databases.getWorkflowDb().stepAttempts(), "workflow_attempt_id", getId());
      this.__assoc_workflow_attempt_datastore = new HasManyAssociation<>(databases.getWorkflowDb().workflowAttemptDatastores(), "workflow_attempt_id", getId());
      this.__assoc_workflow_attempt_configured_notification = new HasManyAssociation<>(databases.getWorkflowDb().workflowAttemptConfiguredNotifications(), "workflow_attempt_id", getId());
      this.__assoc_background_attempt_info = new HasOneAssociation<>(databases.getWorkflowDb().backgroundAttemptInfos(), "workflow_attempt_id", getId());
    }
  }

  public WorkflowAttempt(Attributes attributes) {
    this(attributes, (IDatabases) null);
  }

  public WorkflowAttempt(long id, Map<Enum, Object> fieldsMap) {
    super(null);
    attributes = new Attributes(id, fieldsMap);
  }

  public WorkflowAttempt (WorkflowAttempt other) {
    this(other, (IDatabases)null);
  }

  public WorkflowAttempt (WorkflowAttempt other, IDatabases databases) {
    super(databases);
    attributes = new Attributes(other.getAttributes());

    if (databases != null) {
      this.__assoc_workflow_execution = new BelongsToAssociation<>(databases.getWorkflowDb().workflowExecutions(), (long) getWorkflowExecutionId());
      this.__assoc_step_attempt = new HasManyAssociation<>(databases.getWorkflowDb().stepAttempts(), "workflow_attempt_id", getId());
      this.__assoc_workflow_attempt_datastore = new HasManyAssociation<>(databases.getWorkflowDb().workflowAttemptDatastores(), "workflow_attempt_id", getId());
      this.__assoc_workflow_attempt_configured_notification = new HasManyAssociation<>(databases.getWorkflowDb().workflowAttemptConfiguredNotifications(), "workflow_attempt_id", getId());
      this.__assoc_background_attempt_info = new HasOneAssociation<>(databases.getWorkflowDb().backgroundAttemptInfos(), "workflow_attempt_id", getId());
    }
  }

  public Attributes getAttributes() {
    return attributes;
  }

  public int getWorkflowExecutionId() {
    return attributes.getWorkflowExecutionId();
  }

  public WorkflowAttempt setWorkflowExecutionId(int newval) {
    attributes.setWorkflowExecutionId(newval);
    if(__assoc_workflow_execution != null){
      this.__assoc_workflow_execution.setOwnerId(newval);
    }
    cachedHashCode = 0;
    return this;
  }

  public String getSystemUser() {
    return attributes.getSystemUser();
  }

  public WorkflowAttempt setSystemUser(String newval) {
    attributes.setSystemUser(newval);
    cachedHashCode = 0;
    return this;
  }

  public String getShutdownReason() {
    return attributes.getShutdownReason();
  }

  public WorkflowAttempt setShutdownReason(String newval) {
    attributes.setShutdownReason(newval);
    cachedHashCode = 0;
    return this;
  }

  public String getPriority() {
    return attributes.getPriority();
  }

  public WorkflowAttempt setPriority(String newval) {
    attributes.setPriority(newval);
    cachedHashCode = 0;
    return this;
  }

  public String getPool() {
    return attributes.getPool();
  }

  public WorkflowAttempt setPool(String newval) {
    attributes.setPool(newval);
    cachedHashCode = 0;
    return this;
  }

  public String getHost() {
    return attributes.getHost();
  }

  public WorkflowAttempt setHost(String newval) {
    attributes.setHost(newval);
    cachedHashCode = 0;
    return this;
  }

  public Long getStartTime() {
    return attributes.getStartTime();
  }

  public WorkflowAttempt setStartTime(Long newval) {
    attributes.setStartTime(newval);
    cachedHashCode = 0;
    return this;
  }

  public Long getEndTime() {
    return attributes.getEndTime();
  }

  public WorkflowAttempt setEndTime(Long newval) {
    attributes.setEndTime(newval);
    cachedHashCode = 0;
    return this;
  }

  public Integer getStatus() {
    return attributes.getStatus();
  }

  public WorkflowAttempt setStatus(Integer newval) {
    attributes.setStatus(newval);
    cachedHashCode = 0;
    return this;
  }

  public Long getLastHeartbeat() {
    return attributes.getLastHeartbeat();
  }

  public WorkflowAttempt setLastHeartbeat(Long newval) {
    attributes.setLastHeartbeat(newval);
    cachedHashCode = 0;
    return this;
  }

  public String getLaunchDir() {
    return attributes.getLaunchDir();
  }

  public WorkflowAttempt setLaunchDir(String newval) {
    attributes.setLaunchDir(newval);
    cachedHashCode = 0;
    return this;
  }

  public String getLaunchJar() {
    return attributes.getLaunchJar();
  }

  public WorkflowAttempt setLaunchJar(String newval) {
    attributes.setLaunchJar(newval);
    cachedHashCode = 0;
    return this;
  }

  public String getErrorEmail() {
    return attributes.getErrorEmail();
  }

  public WorkflowAttempt setErrorEmail(String newval) {
    attributes.setErrorEmail(newval);
    cachedHashCode = 0;
    return this;
  }

  public String getInfoEmail() {
    return attributes.getInfoEmail();
  }

  public WorkflowAttempt setInfoEmail(String newval) {
    attributes.setInfoEmail(newval);
    cachedHashCode = 0;
    return this;
  }

  public String getScmRemote() {
    return attributes.getScmRemote();
  }

  public WorkflowAttempt setScmRemote(String newval) {
    attributes.setScmRemote(newval);
    cachedHashCode = 0;
    return this;
  }

  public String getCommitRevision() {
    return attributes.getCommitRevision();
  }

  public WorkflowAttempt setCommitRevision(String newval) {
    attributes.setCommitRevision(newval);
    cachedHashCode = 0;
    return this;
  }

  public String getDescription() {
    return attributes.getDescription();
  }

  public WorkflowAttempt setDescription(String newval) {
    attributes.setDescription(newval);
    cachedHashCode = 0;
    return this;
  }

  public void setField(_Fields field, Object value) {
    switch (field) {
      case workflow_execution_id:
        setWorkflowExecutionId((Integer)value);
        break;
      case system_user:
        setSystemUser((String)value);
        break;
      case shutdown_reason:
        setShutdownReason((String)value);
        break;
      case priority:
        setPriority((String)value);
        break;
      case pool:
        setPool((String)value);
        break;
      case host:
        setHost((String)value);
        break;
      case start_time:
        setStartTime((Long)value);
        break;
      case end_time:
        setEndTime((Long)value);
        break;
      case status:
        setStatus((Integer)value);
        break;
      case last_heartbeat:
        setLastHeartbeat((Long)value);
        break;
      case launch_dir:
        setLaunchDir((String)value);
        break;
      case launch_jar:
        setLaunchJar((String)value);
        break;
      case error_email:
        setErrorEmail((String)value);
        break;
      case info_email:
        setInfoEmail((String)value);
        break;
      case scm_remote:
        setScmRemote((String)value);
        break;
      case commit_revision:
        setCommitRevision((String)value);
        break;
      case description:
        setDescription((String)value);
        break;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }
  }
  
  public void setField(String fieldName, Object value) {
    if (fieldName.equals("workflow_execution_id")) {
      setWorkflowExecutionId((Integer)  value);
      return;
    }
    if (fieldName.equals("system_user")) {
      setSystemUser((String)  value);
      return;
    }
    if (fieldName.equals("shutdown_reason")) {
      setShutdownReason((String)  value);
      return;
    }
    if (fieldName.equals("priority")) {
      setPriority((String)  value);
      return;
    }
    if (fieldName.equals("pool")) {
      setPool((String)  value);
      return;
    }
    if (fieldName.equals("host")) {
      setHost((String)  value);
      return;
    }
    if (fieldName.equals("start_time")) {
      setStartTime((Long)  value);
      return;
    }
    if (fieldName.equals("end_time")) {
      setEndTime((Long)  value);
      return;
    }
    if (fieldName.equals("status")) {
      setStatus((Integer)  value);
      return;
    }
    if (fieldName.equals("last_heartbeat")) {
      setLastHeartbeat((Long)  value);
      return;
    }
    if (fieldName.equals("launch_dir")) {
      setLaunchDir((String)  value);
      return;
    }
    if (fieldName.equals("launch_jar")) {
      setLaunchJar((String)  value);
      return;
    }
    if (fieldName.equals("error_email")) {
      setErrorEmail((String)  value);
      return;
    }
    if (fieldName.equals("info_email")) {
      setInfoEmail((String)  value);
      return;
    }
    if (fieldName.equals("scm_remote")) {
      setScmRemote((String)  value);
      return;
    }
    if (fieldName.equals("commit_revision")) {
      setCommitRevision((String)  value);
      return;
    }
    if (fieldName.equals("description")) {
      setDescription((String)  value);
      return;
    }
    throw new IllegalStateException("Invalid field: " + fieldName);
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
      case workflow_execution_id:
        return int.class;
      case system_user:
        return String.class;
      case shutdown_reason:
        return String.class;
      case priority:
        return String.class;
      case pool:
        return String.class;
      case host:
        return String.class;
      case start_time:
        return Long.class;
      case end_time:
        return Long.class;
      case status:
        return Integer.class;
      case last_heartbeat:
        return Long.class;
      case launch_dir:
        return String.class;
      case launch_jar:
        return String.class;
      case error_email:
        return String.class;
      case info_email:
        return String.class;
      case scm_remote:
        return String.class;
      case commit_revision:
        return String.class;
      case description:
        return String.class;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
    if (fieldName.equals("workflow_execution_id")) {
      return int.class;
    }
    if (fieldName.equals("system_user")) {
      return String.class;
    }
    if (fieldName.equals("shutdown_reason")) {
      return String.class;
    }
    if (fieldName.equals("priority")) {
      return String.class;
    }
    if (fieldName.equals("pool")) {
      return String.class;
    }
    if (fieldName.equals("host")) {
      return String.class;
    }
    if (fieldName.equals("start_time")) {
      return Long.class;
    }
    if (fieldName.equals("end_time")) {
      return Long.class;
    }
    if (fieldName.equals("status")) {
      return Integer.class;
    }
    if (fieldName.equals("last_heartbeat")) {
      return Long.class;
    }
    if (fieldName.equals("launch_dir")) {
      return String.class;
    }
    if (fieldName.equals("launch_jar")) {
      return String.class;
    }
    if (fieldName.equals("error_email")) {
      return String.class;
    }
    if (fieldName.equals("info_email")) {
      return String.class;
    }
    if (fieldName.equals("scm_remote")) {
      return String.class;
    }
    if (fieldName.equals("commit_revision")) {
      return String.class;
    }
    if (fieldName.equals("description")) {
      return String.class;
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public WorkflowExecution getWorkflowExecution() throws IOException {
    return __assoc_workflow_execution.get();
  }

  public List<StepAttempt> getStepAttempt() throws IOException {
    return __assoc_step_attempt.get();
  }

  public List<WorkflowAttemptDatastore> getWorkflowAttemptDatastore() throws IOException {
    return __assoc_workflow_attempt_datastore.get();
  }

  public List<WorkflowAttemptConfiguredNotification> getWorkflowAttemptConfiguredNotification() throws IOException {
    return __assoc_workflow_attempt_configured_notification.get();
  }

  public BackgroundAttemptInfo getBackgroundAttemptInfo() throws IOException {
    return __assoc_background_attempt_info.get();
  }

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
    if (fieldName.equals("workflow_execution_id")) {
      return getWorkflowExecutionId();
    }
    if (fieldName.equals("system_user")) {
      return getSystemUser();
    }
    if (fieldName.equals("shutdown_reason")) {
      return getShutdownReason();
    }
    if (fieldName.equals("priority")) {
      return getPriority();
    }
    if (fieldName.equals("pool")) {
      return getPool();
    }
    if (fieldName.equals("host")) {
      return getHost();
    }
    if (fieldName.equals("start_time")) {
      return getStartTime();
    }
    if (fieldName.equals("end_time")) {
      return getEndTime();
    }
    if (fieldName.equals("status")) {
      return getStatus();
    }
    if (fieldName.equals("last_heartbeat")) {
      return getLastHeartbeat();
    }
    if (fieldName.equals("launch_dir")) {
      return getLaunchDir();
    }
    if (fieldName.equals("launch_jar")) {
      return getLaunchJar();
    }
    if (fieldName.equals("error_email")) {
      return getErrorEmail();
    }
    if (fieldName.equals("info_email")) {
      return getInfoEmail();
    }
    if (fieldName.equals("scm_remote")) {
      return getScmRemote();
    }
    if (fieldName.equals("commit_revision")) {
      return getCommitRevision();
    }
    if (fieldName.equals("description")) {
      return getDescription();
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
      case workflow_execution_id:
        return getWorkflowExecutionId();
      case system_user:
        return getSystemUser();
      case shutdown_reason:
        return getShutdownReason();
      case priority:
        return getPriority();
      case pool:
        return getPool();
      case host:
        return getHost();
      case start_time:
        return getStartTime();
      case end_time:
        return getEndTime();
      case status:
        return getStatus();
      case last_heartbeat:
        return getLastHeartbeat();
      case launch_dir:
        return getLaunchDir();
      case launch_jar:
        return getLaunchJar();
      case error_email:
        return getErrorEmail();
      case info_email:
        return getInfoEmail();
      case scm_remote:
        return getScmRemote();
      case commit_revision:
        return getCommitRevision();
      case description:
        return getDescription();
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  public boolean hasField(String fieldName) {
    if (fieldName.equals("id")) {
      return true;
    }
    if (fieldName.equals("workflow_execution_id")) {
      return true;
    }
    if (fieldName.equals("system_user")) {
      return true;
    }
    if (fieldName.equals("shutdown_reason")) {
      return true;
    }
    if (fieldName.equals("priority")) {
      return true;
    }
    if (fieldName.equals("pool")) {
      return true;
    }
    if (fieldName.equals("host")) {
      return true;
    }
    if (fieldName.equals("start_time")) {
      return true;
    }
    if (fieldName.equals("end_time")) {
      return true;
    }
    if (fieldName.equals("status")) {
      return true;
    }
    if (fieldName.equals("last_heartbeat")) {
      return true;
    }
    if (fieldName.equals("launch_dir")) {
      return true;
    }
    if (fieldName.equals("launch_jar")) {
      return true;
    }
    if (fieldName.equals("error_email")) {
      return true;
    }
    if (fieldName.equals("info_email")) {
      return true;
    }
    if (fieldName.equals("scm_remote")) {
      return true;
    }
    if (fieldName.equals("commit_revision")) {
      return true;
    }
    if (fieldName.equals("description")) {
      return true;
    }
    return false;
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
      case workflow_execution_id:
        return null;
      case system_user:
        return null;
      case shutdown_reason:
        return null;
      case priority:
        return null;
      case pool:
        return null;
      case host:
        return null;
      case start_time:
        return null;
      case end_time:
        return null;
      case status:
        return null;
      case last_heartbeat:
        return null;
      case launch_dir:
        return null;
      case launch_jar:
        return null;
      case error_email:
        return null;
      case info_email:
        return null;
      case scm_remote:
        return null;
      case commit_revision:
        return null;
      case description:
        return null;
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public WorkflowAttempt getCopy() {
    return getCopy(databases);
  }

  @Override
  public WorkflowAttempt getCopy(IDatabases databases) {
    return new WorkflowAttempt(this, databases);
  }

  @Override
  public boolean save() throws IOException {
    return databases.getWorkflowDb().workflowAttempts().save(this);
  }

  public WorkflowExecution createWorkflowExecution(final String name, final int status) throws IOException {
 
    WorkflowExecution newWorkflowExecution = databases.getWorkflowDb().workflowExecutions().create(name, status);
    setWorkflowExecutionId(JackUtility.safeLongToInt(newWorkflowExecution.getId()));
    save();
    __assoc_workflow_execution.clearCache();
    return newWorkflowExecution;
  }

  public WorkflowExecution createWorkflowExecution(final Integer app_type, final String name, final String scope_identifier, final int status, final Long start_time, final Long end_time, final Integer application_id, final String pool_override) throws IOException {
 
    WorkflowExecution newWorkflowExecution = databases.getWorkflowDb().workflowExecutions().create(app_type, name, scope_identifier, status, start_time, end_time, application_id, pool_override);
    setWorkflowExecutionId(JackUtility.safeLongToInt(newWorkflowExecution.getId()));
    save();
    __assoc_workflow_execution.clearCache();
    return newWorkflowExecution;
  }

  public WorkflowExecution createWorkflowExecution() throws IOException {
 
    WorkflowExecution newWorkflowExecution = databases.getWorkflowDb().workflowExecutions().create("", 0);
    setWorkflowExecutionId(JackUtility.safeLongToInt(newWorkflowExecution.getId()));
    save();
    __assoc_workflow_execution.clearCache();
    return newWorkflowExecution;
  }

  public String toString() {
    return "<WorkflowAttempt"
        + " id: " + this.getId()
        + " workflow_execution_id: " + getWorkflowExecutionId()
        + " system_user: " + getSystemUser()
        + " shutdown_reason: " + getShutdownReason()
        + " priority: " + getPriority()
        + " pool: " + getPool()
        + " host: " + getHost()
        + " start_time: " + getStartTime()
        + " end_time: " + getEndTime()
        + " status: " + getStatus()
        + " last_heartbeat: " + getLastHeartbeat()
        + " launch_dir: " + getLaunchDir()
        + " launch_jar: " + getLaunchJar()
        + " error_email: " + getErrorEmail()
        + " info_email: " + getInfoEmail()
        + " scm_remote: " + getScmRemote()
        + " commit_revision: " + getCommitRevision()
        + " description: " + getDescription()
        + ">";
  }

  public void unsetAssociations() {
    unsetDatabaseReference();
    __assoc_workflow_execution = null;
    __assoc_step_attempt = null;
    __assoc_workflow_attempt_datastore = null;
    __assoc_workflow_attempt_configured_notification = null;
    __assoc_background_attempt_info = null;
  }

  public int compareTo(WorkflowAttempt that) {
    return Long.valueOf(this.getId()).compareTo(that.getId());
  }
  
  
  public static class Attributes extends AttributesWithId {
    
    public static final long serialVersionUID = 2201414802837479066L;

    // Fields
    private int __workflow_execution_id;
    private String __system_user;
    private String __shutdown_reason;
    private String __priority;
    private String __pool;
    private String __host;
    private Long __start_time;
    private Long __end_time;
    private Integer __status;
    private Long __last_heartbeat;
    private String __launch_dir;
    private String __launch_jar;
    private String __error_email;
    private String __info_email;
    private String __scm_remote;
    private String __commit_revision;
    private String __description;

    public Attributes(long id) {
      super(id);
    }

    public Attributes(long id, final int workflow_execution_id, final String system_user, final String shutdown_reason, final String priority, final String pool, final String host, final Long start_time, final Long end_time, final Integer status, final Long last_heartbeat, final String launch_dir, final String launch_jar, final String error_email, final String info_email, final String scm_remote, final String commit_revision, final String description) {
      super(id);
      this.__workflow_execution_id = workflow_execution_id;
      this.__system_user = system_user;
      this.__shutdown_reason = shutdown_reason;
      this.__priority = priority;
      this.__pool = pool;
      this.__host = host;
      this.__start_time = start_time;
      this.__end_time = end_time;
      this.__status = status;
      this.__last_heartbeat = last_heartbeat;
      this.__launch_dir = launch_dir;
      this.__launch_jar = launch_jar;
      this.__error_email = error_email;
      this.__info_email = info_email;
      this.__scm_remote = scm_remote;
      this.__commit_revision = commit_revision;
      this.__description = description;
    }
    
    public Attributes(long id, final int workflow_execution_id, final String system_user, final String priority, final String pool, final String host) {
      super(id);
      this.__workflow_execution_id = workflow_execution_id;
      this.__system_user = system_user;
      this.__priority = priority;
      this.__pool = pool;
      this.__host = host;
    }

    public static Attributes newDefaultInstance(long id) {
      return new Attributes(id, 0, "", "", "", "");
    }

    public Attributes(long id, Map<Enum, Object> fieldsMap) {
      super(id);
      int workflow_execution_id = (Integer)fieldsMap.get(WorkflowAttempt._Fields.workflow_execution_id);
      String system_user = (String)fieldsMap.get(WorkflowAttempt._Fields.system_user);
      String shutdown_reason = (String)fieldsMap.get(WorkflowAttempt._Fields.shutdown_reason);
      String priority = (String)fieldsMap.get(WorkflowAttempt._Fields.priority);
      String pool = (String)fieldsMap.get(WorkflowAttempt._Fields.pool);
      String host = (String)fieldsMap.get(WorkflowAttempt._Fields.host);
      Long start_time = (Long)fieldsMap.get(WorkflowAttempt._Fields.start_time);
      Long end_time = (Long)fieldsMap.get(WorkflowAttempt._Fields.end_time);
      Integer status = (Integer)fieldsMap.get(WorkflowAttempt._Fields.status);
      Long last_heartbeat = (Long)fieldsMap.get(WorkflowAttempt._Fields.last_heartbeat);
      String launch_dir = (String)fieldsMap.get(WorkflowAttempt._Fields.launch_dir);
      String launch_jar = (String)fieldsMap.get(WorkflowAttempt._Fields.launch_jar);
      String error_email = (String)fieldsMap.get(WorkflowAttempt._Fields.error_email);
      String info_email = (String)fieldsMap.get(WorkflowAttempt._Fields.info_email);
      String scm_remote = (String)fieldsMap.get(WorkflowAttempt._Fields.scm_remote);
      String commit_revision = (String)fieldsMap.get(WorkflowAttempt._Fields.commit_revision);
      String description = (String)fieldsMap.get(WorkflowAttempt._Fields.description);
      this.__workflow_execution_id = workflow_execution_id;
      this.__system_user = system_user;
      this.__shutdown_reason = shutdown_reason;
      this.__priority = priority;
      this.__pool = pool;
      this.__host = host;
      this.__start_time = start_time;
      this.__end_time = end_time;
      this.__status = status;
      this.__last_heartbeat = last_heartbeat;
      this.__launch_dir = launch_dir;
      this.__launch_jar = launch_jar;
      this.__error_email = error_email;
      this.__info_email = info_email;
      this.__scm_remote = scm_remote;
      this.__commit_revision = commit_revision;
      this.__description = description;
    }

    public Attributes(Attributes other) {
      super(other.getId());
      this.__workflow_execution_id = other.getWorkflowExecutionId();
      this.__system_user = other.getSystemUser();
      this.__shutdown_reason = other.getShutdownReason();
      this.__priority = other.getPriority();
      this.__pool = other.getPool();
      this.__host = other.getHost();
      this.__start_time = other.getStartTime();
      this.__end_time = other.getEndTime();
      this.__status = other.getStatus();
      this.__last_heartbeat = other.getLastHeartbeat();
      this.__launch_dir = other.getLaunchDir();
      this.__launch_jar = other.getLaunchJar();
      this.__error_email = other.getErrorEmail();
      this.__info_email = other.getInfoEmail();
      this.__scm_remote = other.getScmRemote();
      this.__commit_revision = other.getCommitRevision();
      this.__description = other.getDescription();
    }

    public int getWorkflowExecutionId() {
      return __workflow_execution_id;
    }

    public Attributes setWorkflowExecutionId(int newval) {
      this.__workflow_execution_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getSystemUser() {
      return __system_user;
    }

    public Attributes setSystemUser(String newval) {
      this.__system_user = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getShutdownReason() {
      return __shutdown_reason;
    }

    public Attributes setShutdownReason(String newval) {
      this.__shutdown_reason = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getPriority() {
      return __priority;
    }

    public Attributes setPriority(String newval) {
      this.__priority = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getPool() {
      return __pool;
    }

    public Attributes setPool(String newval) {
      this.__pool = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getHost() {
      return __host;
    }

    public Attributes setHost(String newval) {
      this.__host = newval;
      cachedHashCode = 0;
      return this;
    }

    public Long getStartTime() {
      return __start_time;
    }

    public Attributes setStartTime(Long newval) {
      this.__start_time = newval;
      cachedHashCode = 0;
      return this;
    }

    public Long getEndTime() {
      return __end_time;
    }

    public Attributes setEndTime(Long newval) {
      this.__end_time = newval;
      cachedHashCode = 0;
      return this;
    }

    public Integer getStatus() {
      return __status;
    }

    public Attributes setStatus(Integer newval) {
      this.__status = newval;
      cachedHashCode = 0;
      return this;
    }

    public Long getLastHeartbeat() {
      return __last_heartbeat;
    }

    public Attributes setLastHeartbeat(Long newval) {
      this.__last_heartbeat = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getLaunchDir() {
      return __launch_dir;
    }

    public Attributes setLaunchDir(String newval) {
      this.__launch_dir = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getLaunchJar() {
      return __launch_jar;
    }

    public Attributes setLaunchJar(String newval) {
      this.__launch_jar = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getErrorEmail() {
      return __error_email;
    }

    public Attributes setErrorEmail(String newval) {
      this.__error_email = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getInfoEmail() {
      return __info_email;
    }

    public Attributes setInfoEmail(String newval) {
      this.__info_email = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getScmRemote() {
      return __scm_remote;
    }

    public Attributes setScmRemote(String newval) {
      this.__scm_remote = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getCommitRevision() {
      return __commit_revision;
    }

    public Attributes setCommitRevision(String newval) {
      this.__commit_revision = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getDescription() {
      return __description;
    }

    public Attributes setDescription(String newval) {
      this.__description = newval;
      cachedHashCode = 0;
      return this;
    }

    public void setField(_Fields field, Object value) {
      switch (field) {
        case workflow_execution_id:
          setWorkflowExecutionId((Integer)value);
          break;
        case system_user:
          setSystemUser((String)value);
          break;
        case shutdown_reason:
          setShutdownReason((String)value);
          break;
        case priority:
          setPriority((String)value);
          break;
        case pool:
          setPool((String)value);
          break;
        case host:
          setHost((String)value);
          break;
        case start_time:
          setStartTime((Long)value);
          break;
        case end_time:
          setEndTime((Long)value);
          break;
        case status:
          setStatus((Integer)value);
          break;
        case last_heartbeat:
          setLastHeartbeat((Long)value);
          break;
        case launch_dir:
          setLaunchDir((String)value);
          break;
        case launch_jar:
          setLaunchJar((String)value);
          break;
        case error_email:
          setErrorEmail((String)value);
          break;
        case info_email:
          setInfoEmail((String)value);
          break;
        case scm_remote:
          setScmRemote((String)value);
          break;
        case commit_revision:
          setCommitRevision((String)value);
          break;
        case description:
          setDescription((String)value);
          break;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }
    }

    public void setField(String fieldName, Object value) {
      if (fieldName.equals("workflow_execution_id")) {
        setWorkflowExecutionId((Integer)value);
        return;
      }
      if (fieldName.equals("system_user")) {
        setSystemUser((String)value);
        return;
      }
      if (fieldName.equals("shutdown_reason")) {
        setShutdownReason((String)value);
        return;
      }
      if (fieldName.equals("priority")) {
        setPriority((String)value);
        return;
      }
      if (fieldName.equals("pool")) {
        setPool((String)value);
        return;
      }
      if (fieldName.equals("host")) {
        setHost((String)value);
        return;
      }
      if (fieldName.equals("start_time")) {
        setStartTime((Long)value);
        return;
      }
      if (fieldName.equals("end_time")) {
        setEndTime((Long)value);
        return;
      }
      if (fieldName.equals("status")) {
        setStatus((Integer)value);
        return;
      }
      if (fieldName.equals("last_heartbeat")) {
        setLastHeartbeat((Long)value);
        return;
      }
      if (fieldName.equals("launch_dir")) {
        setLaunchDir((String)value);
        return;
      }
      if (fieldName.equals("launch_jar")) {
        setLaunchJar((String)value);
        return;
      }
      if (fieldName.equals("error_email")) {
        setErrorEmail((String)value);
        return;
      }
      if (fieldName.equals("info_email")) {
        setInfoEmail((String)value);
        return;
      }
      if (fieldName.equals("scm_remote")) {
        setScmRemote((String)value);
        return;
      }
      if (fieldName.equals("commit_revision")) {
        setCommitRevision((String)value);
        return;
      }
      if (fieldName.equals("description")) {
        setDescription((String)value);
        return;
      }
      throw new IllegalStateException("Invalid field: " + fieldName);
    }

    public static Class getFieldType(_Fields field) {
      switch (field) {
        case workflow_execution_id:
          return int.class;
        case system_user:
          return String.class;
        case shutdown_reason:
          return String.class;
        case priority:
          return String.class;
        case pool:
          return String.class;
        case host:
          return String.class;
        case start_time:
          return Long.class;
        case end_time:
          return Long.class;
        case status:
          return Integer.class;
        case last_heartbeat:
          return Long.class;
        case launch_dir:
          return String.class;
        case launch_jar:
          return String.class;
        case error_email:
          return String.class;
        case info_email:
          return String.class;
        case scm_remote:
          return String.class;
        case commit_revision:
          return String.class;
        case description:
          return String.class;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }    
    }

    public static Class getFieldType(String fieldName) {    
      if (fieldName.equals("workflow_execution_id")) {
        return int.class;
      }
      if (fieldName.equals("system_user")) {
        return String.class;
      }
      if (fieldName.equals("shutdown_reason")) {
        return String.class;
      }
      if (fieldName.equals("priority")) {
        return String.class;
      }
      if (fieldName.equals("pool")) {
        return String.class;
      }
      if (fieldName.equals("host")) {
        return String.class;
      }
      if (fieldName.equals("start_time")) {
        return Long.class;
      }
      if (fieldName.equals("end_time")) {
        return Long.class;
      }
      if (fieldName.equals("status")) {
        return Integer.class;
      }
      if (fieldName.equals("last_heartbeat")) {
        return Long.class;
      }
      if (fieldName.equals("launch_dir")) {
        return String.class;
      }
      if (fieldName.equals("launch_jar")) {
        return String.class;
      }
      if (fieldName.equals("error_email")) {
        return String.class;
      }
      if (fieldName.equals("info_email")) {
        return String.class;
      }
      if (fieldName.equals("scm_remote")) {
        return String.class;
      }
      if (fieldName.equals("commit_revision")) {
        return String.class;
      }
      if (fieldName.equals("description")) {
        return String.class;
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    @Override
    public Object getField(String fieldName) {
      if (fieldName.equals("id")) {
        return getId();
      }
      if (fieldName.equals("workflow_execution_id")) {
        return getWorkflowExecutionId();
      }
      if (fieldName.equals("system_user")) {
        return getSystemUser();
      }
      if (fieldName.equals("shutdown_reason")) {
        return getShutdownReason();
      }
      if (fieldName.equals("priority")) {
        return getPriority();
      }
      if (fieldName.equals("pool")) {
        return getPool();
      }
      if (fieldName.equals("host")) {
        return getHost();
      }
      if (fieldName.equals("start_time")) {
        return getStartTime();
      }
      if (fieldName.equals("end_time")) {
        return getEndTime();
      }
      if (fieldName.equals("status")) {
        return getStatus();
      }
      if (fieldName.equals("last_heartbeat")) {
        return getLastHeartbeat();
      }
      if (fieldName.equals("launch_dir")) {
        return getLaunchDir();
      }
      if (fieldName.equals("launch_jar")) {
        return getLaunchJar();
      }
      if (fieldName.equals("error_email")) {
        return getErrorEmail();
      }
      if (fieldName.equals("info_email")) {
        return getInfoEmail();
      }
      if (fieldName.equals("scm_remote")) {
        return getScmRemote();
      }
      if (fieldName.equals("commit_revision")) {
        return getCommitRevision();
      }
      if (fieldName.equals("description")) {
        return getDescription();
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    public Object getField(_Fields field) {
      switch (field) {
        case workflow_execution_id:
          return getWorkflowExecutionId();
        case system_user:
          return getSystemUser();
        case shutdown_reason:
          return getShutdownReason();
        case priority:
          return getPriority();
        case pool:
          return getPool();
        case host:
          return getHost();
        case start_time:
          return getStartTime();
        case end_time:
          return getEndTime();
        case status:
          return getStatus();
        case last_heartbeat:
          return getLastHeartbeat();
        case launch_dir:
          return getLaunchDir();
        case launch_jar:
          return getLaunchJar();
        case error_email:
          return getErrorEmail();
        case info_email:
          return getInfoEmail();
        case scm_remote:
          return getScmRemote();
        case commit_revision:
          return getCommitRevision();
        case description:
          return getDescription();
      }
      throw new IllegalStateException("Invalid field: " + field);
    }

    public boolean hasField(String fieldName) {
      if (fieldName.equals("id")) {
        return true;
      }
      if (fieldName.equals("workflow_execution_id")) {
        return true;
      }
      if (fieldName.equals("system_user")) {
        return true;
      }
      if (fieldName.equals("shutdown_reason")) {
        return true;
      }
      if (fieldName.equals("priority")) {
        return true;
      }
      if (fieldName.equals("pool")) {
        return true;
      }
      if (fieldName.equals("host")) {
        return true;
      }
      if (fieldName.equals("start_time")) {
        return true;
      }
      if (fieldName.equals("end_time")) {
        return true;
      }
      if (fieldName.equals("status")) {
        return true;
      }
      if (fieldName.equals("last_heartbeat")) {
        return true;
      }
      if (fieldName.equals("launch_dir")) {
        return true;
      }
      if (fieldName.equals("launch_jar")) {
        return true;
      }
      if (fieldName.equals("error_email")) {
        return true;
      }
      if (fieldName.equals("info_email")) {
        return true;
      }
      if (fieldName.equals("scm_remote")) {
        return true;
      }
      if (fieldName.equals("commit_revision")) {
        return true;
      }
      if (fieldName.equals("description")) {
        return true;
      }
      return false;
    }

    public static Object getDefaultValue(_Fields field) {
      switch (field) {
        case workflow_execution_id:
          return null;
        case system_user:
          return null;
        case shutdown_reason:
          return null;
        case priority:
          return null;
        case pool:
          return null;
        case host:
          return null;
        case start_time:
          return null;
        case end_time:
          return null;
        case status:
          return null;
        case last_heartbeat:
          return null;
        case launch_dir:
          return null;
        case launch_jar:
          return null;
        case error_email:
          return null;
        case info_email:
          return null;
        case scm_remote:
          return null;
        case commit_revision:
          return null;
        case description:
          return null;
      }
      throw new IllegalStateException("Invalid field: " + field);
    }
    
    @Override
    public Set<Enum> getFieldSet() {
      Set set = EnumSet.allOf(_Fields.class);
      return set;
    }
    
    public String toString() {
      return "<WorkflowAttempt.Attributes"
          + " workflow_execution_id: " + getWorkflowExecutionId()
          + " system_user: " + getSystemUser()
          + " shutdown_reason: " + getShutdownReason()
          + " priority: " + getPriority()
          + " pool: " + getPool()
          + " host: " + getHost()
          + " start_time: " + getStartTime()
          + " end_time: " + getEndTime()
          + " status: " + getStatus()
          + " last_heartbeat: " + getLastHeartbeat()
          + " launch_dir: " + getLaunchDir()
          + " launch_jar: " + getLaunchJar()
          + " error_email: " + getErrorEmail()
          + " info_email: " + getInfoEmail()
          + " scm_remote: " + getScmRemote()
          + " commit_revision: " + getCommitRevision()
          + " description: " + getDescription()
          + ">";
    }
  }

  public static class Id implements ModelIdWrapper<WorkflowAttempt.Id> {
    public static final long serialVersionUID = 1L;

    private final long id;

    public Id(Long id) {
      this.id = id;
    }

    @Override
    public Long getId() {
      return id;
    }

    @Override
    public int compareTo(Id other) {
      return this.getId().compareTo(other.getId());
    }

    @Override
    public boolean equals(Object other) {
      if (other instanceof Id) {
        return this.getId().equals(((Id)other).getId());
      }
      return false;
    }

    @Override
    public int hashCode() {
      return this.getId().hashCode();
    }

    @Override
    public String toString() {
      return "<WorkflowAttempt.Id: " + this.getId() + ">";
    }
  }

  public static Set<Attributes> convertToAttributesSet(Collection<WorkflowAttempt> models) {
    return models.stream()
        .map(WorkflowAttempt::getAttributes)
        .collect(Collectors.toSet());
  }

  public static class AssociationMetadata implements IModelAssociationMetadata {

    private List<IAssociationMetadata> meta = new ArrayList<>();

    public AssociationMetadata(){
      meta.add(new DefaultAssociationMetadata(AssociationType.BELONGS_TO, WorkflowAttempt.class, WorkflowExecution.class, "workflow_execution_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_MANY, WorkflowAttempt.class, StepAttempt.class, "workflow_attempt_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_MANY, WorkflowAttempt.class, WorkflowAttemptDatastore.class, "workflow_attempt_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_MANY, WorkflowAttempt.class, WorkflowAttemptConfiguredNotification.class, "workflow_attempt_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_ONE, WorkflowAttempt.class, BackgroundAttemptInfo.class, "workflow_attempt_id"));
    }

    @Override
    public List<IAssociationMetadata> getAssociationMetadata() {
      return meta;
    }
  }

}
