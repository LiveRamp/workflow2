
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.impl;

import java.sql.SQLRecoverableException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Collection;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Timestamp;

import com.rapleaf.jack.AbstractDatabaseModel;
import com.rapleaf.jack.BaseDatabaseConnection;
import com.rapleaf.jack.queries.WhereConstraint;
import com.rapleaf.jack.queries.WhereClause;
import com.rapleaf.jack.util.JackUtility;
import com.liveramp.databases.workflow_db.iface.IBackgroundStepAttemptInfoPersistence;
import com.liveramp.databases.workflow_db.models.BackgroundStepAttemptInfo;
import com.liveramp.databases.workflow_db.query.BackgroundStepAttemptInfoQueryBuilder;
import com.liveramp.databases.workflow_db.query.BackgroundStepAttemptInfoDeleteBuilder;

import com.liveramp.databases.workflow_db.IDatabases;

public class BaseBackgroundStepAttemptInfoPersistenceImpl extends AbstractDatabaseModel<BackgroundStepAttemptInfo> implements IBackgroundStepAttemptInfoPersistence {
  private final IDatabases databases;

  public BaseBackgroundStepAttemptInfoPersistenceImpl(BaseDatabaseConnection conn, IDatabases databases) {
    super(conn, "background_step_attempt_infos", Arrays.<String>asList("step_attempt_id", "serialized_context", "next_execute_check", "execute_check_cooldown_seconds", "claimed_by_worker", "background_workflow_executor_info_id"));
    this.databases = databases;
  }

  @Override
  public BackgroundStepAttemptInfo create(Map<Enum, Object> fieldsMap) throws IOException {
    long step_attempt_id = (Long) fieldsMap.get(BackgroundStepAttemptInfo._Fields.step_attempt_id);
    byte[] serialized_context = (byte[]) fieldsMap.get(BackgroundStepAttemptInfo._Fields.serialized_context);
    long next_execute_check = (Long) fieldsMap.get(BackgroundStepAttemptInfo._Fields.next_execute_check);
    int execute_check_cooldown_seconds = (Integer) fieldsMap.get(BackgroundStepAttemptInfo._Fields.execute_check_cooldown_seconds);
    String claimed_by_worker = (String) fieldsMap.get(BackgroundStepAttemptInfo._Fields.claimed_by_worker);
    Integer background_workflow_executor_info_id = (Integer) fieldsMap.get(BackgroundStepAttemptInfo._Fields.background_workflow_executor_info_id);
    return create(step_attempt_id, serialized_context, next_execute_check, execute_check_cooldown_seconds, claimed_by_worker, background_workflow_executor_info_id);
  }

  public BackgroundStepAttemptInfo create(final long step_attempt_id, final byte[] serialized_context, final long next_execute_check, final int execute_check_cooldown_seconds, final String claimed_by_worker, final Integer background_workflow_executor_info_id) throws IOException {
    StatementCreator statementCreator = new StatementCreator() {
      private final List<String> nonNullFields = new ArrayList<>();
      private final List<AttrSetter> statementSetters = new ArrayList<>();

      {
        int index = 1;

        nonNullFields.add("step_attempt_id");
        int fieldIndex0 = index++;
        statementSetters.add(stmt -> stmt.setLong(fieldIndex0, step_attempt_id));

        nonNullFields.add("serialized_context");
        int fieldIndex1 = index++;
        statementSetters.add(stmt -> stmt.setBytes(fieldIndex1, serialized_context));

        nonNullFields.add("next_execute_check");
        int fieldIndex2 = index++;
        statementSetters.add(stmt -> stmt.setDate(fieldIndex2, new Date(next_execute_check)));

        nonNullFields.add("execute_check_cooldown_seconds");
        int fieldIndex3 = index++;
        statementSetters.add(stmt -> stmt.setInt(fieldIndex3, execute_check_cooldown_seconds));

        if (claimed_by_worker != null) {
          nonNullFields.add("claimed_by_worker");
          int fieldIndex4 = index++;
          statementSetters.add(stmt -> stmt.setString(fieldIndex4, claimed_by_worker));
        }

        if (background_workflow_executor_info_id != null) {
          nonNullFields.add("background_workflow_executor_info_id");
          int fieldIndex5 = index++;
          statementSetters.add(stmt -> stmt.setInt(fieldIndex5, background_workflow_executor_info_id));
        }
      }

      @Override
      public String getStatement() {
        return getInsertStatement(nonNullFields);
      }

      @Override
      public void setStatement(PreparedStatement statement) throws SQLException {
        for (AttrSetter setter : statementSetters) {
          setter.set(statement);
        }
      }
    };

    long __id = realCreate(statementCreator);
    BackgroundStepAttemptInfo newInst = new BackgroundStepAttemptInfo(__id, step_attempt_id, serialized_context, next_execute_check, execute_check_cooldown_seconds, claimed_by_worker, background_workflow_executor_info_id, databases);
    newInst.setCreated(true);
    cachedById.put(__id, newInst);
    clearForeignKeyCache();
    return newInst;
  }

  public BackgroundStepAttemptInfo create(final long step_attempt_id, final byte[] serialized_context, final long next_execute_check, final int execute_check_cooldown_seconds) throws IOException {
    StatementCreator statementCreator = new StatementCreator() {
      private final List<String> nonNullFields = new ArrayList<>();
      private final List<AttrSetter> statementSetters = new ArrayList<>();

      {
        int index = 1;

        nonNullFields.add("step_attempt_id");
        int fieldIndex0 = index++;
        statementSetters.add(stmt -> stmt.setLong(fieldIndex0, step_attempt_id));

        nonNullFields.add("serialized_context");
        int fieldIndex1 = index++;
        statementSetters.add(stmt -> stmt.setBytes(fieldIndex1, serialized_context));

        nonNullFields.add("next_execute_check");
        int fieldIndex2 = index++;
        statementSetters.add(stmt -> stmt.setDate(fieldIndex2, new Date(next_execute_check)));

        nonNullFields.add("execute_check_cooldown_seconds");
        int fieldIndex3 = index++;
        statementSetters.add(stmt -> stmt.setInt(fieldIndex3, execute_check_cooldown_seconds));
      }

      @Override
      public String getStatement() {
        return getInsertStatement(nonNullFields);
      }

      @Override
      public void setStatement(PreparedStatement statement) throws SQLException {
        for (AttrSetter setter : statementSetters) {
          setter.set(statement);
        }
      }
    };

    long __id = realCreate(statementCreator);
    BackgroundStepAttemptInfo newInst = new BackgroundStepAttemptInfo(__id, step_attempt_id, serialized_context, next_execute_check, execute_check_cooldown_seconds, null, null, databases);
    newInst.setCreated(true);
    cachedById.put(__id, newInst);
    clearForeignKeyCache();
    return newInst;
  }

  public BackgroundStepAttemptInfo createDefaultInstance() throws IOException {
    return create(0L, new byte[0], 0L, 0);
  }

  public List<BackgroundStepAttemptInfo> find(Map<Enum, Object> fieldsMap) throws IOException {
    return find(null, fieldsMap);
  }

  public List<BackgroundStepAttemptInfo> find(Collection<Long> ids, Map<Enum, Object> fieldsMap) throws IOException {
    List<BackgroundStepAttemptInfo> foundList = new ArrayList<>();

    if (fieldsMap == null || fieldsMap.isEmpty()) {
      return foundList;
    }

    StringBuilder statementString = new StringBuilder();
    statementString.append("SELECT * FROM background_step_attempt_infos WHERE (");
    List<Object> nonNullValues = new ArrayList<>();
    List<BackgroundStepAttemptInfo._Fields> nonNullValueFields = new ArrayList<>();

    Iterator<Map.Entry<Enum, Object>> iter = fieldsMap.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Enum, Object> entry = iter.next();
      Enum field = entry.getKey();
      Object value = entry.getValue();

      String queryValue = value != null ? " = ? " : " IS NULL";
      if (value != null) {
        nonNullValueFields.add((BackgroundStepAttemptInfo._Fields) field);
        nonNullValues.add(value);
      }

      statementString.append(field).append(queryValue);
      if (iter.hasNext()) {
        statementString.append(" AND ");
      }
    }
    if (ids != null) statementString.append(" AND ").append(getIdSetCondition(ids));
    statementString.append(")");

    int retryCount = 0;
    PreparedStatement preparedStatement;

    while (true) {
      preparedStatement = getPreparedStatement(statementString.toString());

      for (int i = 0; i < nonNullValues.size(); i++) {
        BackgroundStepAttemptInfo._Fields field = nonNullValueFields.get(i);
        try {
          switch (field) {
            case step_attempt_id:
              preparedStatement.setLong(i+1, (Long) nonNullValues.get(i));
              break;
            case serialized_context:
              preparedStatement.setBytes(i+1, (byte[]) nonNullValues.get(i));
              break;
            case next_execute_check:
              preparedStatement.setDate(i+1, new Date((Long) nonNullValues.get(i)));
              break;
            case execute_check_cooldown_seconds:
              preparedStatement.setInt(i+1, (Integer) nonNullValues.get(i));
              break;
            case claimed_by_worker:
              preparedStatement.setString(i+1, (String) nonNullValues.get(i));
              break;
            case background_workflow_executor_info_id:
              preparedStatement.setInt(i+1, (Integer) nonNullValues.get(i));
              break;
          }
        } catch (SQLException e) {
          throw new IOException(e);
        }
      }

      try {
        executeQuery(foundList, preparedStatement);
        return foundList;
      } catch (SQLRecoverableException e) {
        if (++retryCount > AbstractDatabaseModel.MAX_CONNECTION_RETRIES) {
          throw new IOException(e);
        }
      } catch (SQLException e) {
        throw new IOException(e);
      }
    }
  }

  @Override
  protected void setStatementParameters(PreparedStatement preparedStatement, WhereClause whereClause) throws IOException {
    int index = 0;
    for (WhereConstraint constraint : whereClause.getWhereConstraints()) {
      for (Object parameter : constraint.getParameters()) {
        if (parameter == null) {
          continue;
        }
        try {
          if (constraint.isId()) {
            preparedStatement.setLong(++index, (Long)parameter);
          } else {
            BackgroundStepAttemptInfo._Fields field = (BackgroundStepAttemptInfo._Fields)constraint.getField();
            switch (field) {
              case step_attempt_id:
                preparedStatement.setLong(++index, (Long) parameter);
                break;
              case serialized_context:
                preparedStatement.setBytes(++index, (byte[]) parameter);
                break;
              case next_execute_check:
                preparedStatement.setDate(++index, new Date((Long) parameter));
                break;
              case execute_check_cooldown_seconds:
                preparedStatement.setInt(++index, (Integer) parameter);
                break;
              case claimed_by_worker:
                preparedStatement.setString(++index, (String) parameter);
                break;
              case background_workflow_executor_info_id:
                preparedStatement.setInt(++index, (Integer) parameter);
                break;
            }
          }
        } catch (SQLException e) {
          throw new IOException(e);
        }
      }
    }
  }

  @Override
  protected void setAttrs(BackgroundStepAttemptInfo model, PreparedStatement stmt, boolean setNull) throws SQLException {
    int index = 1;
    {
      stmt.setLong(index++, model.getStepAttemptId());
    }
    {
      stmt.setBytes(index++, model.getSerializedContext());
    }
    {
      stmt.setDate(index++, new Date(model.getNextExecuteCheck()));
    }
    {
      stmt.setInt(index++, model.getExecuteCheckCooldownSeconds());
    }
    if (setNull && model.getClaimedByWorker() == null) {
      stmt.setNull(index++, java.sql.Types.CHAR);
    } else if (model.getClaimedByWorker() != null) {
      stmt.setString(index++, model.getClaimedByWorker());
    }
    if (setNull && model.getBackgroundWorkflowExecutorInfoId() == null) {
      stmt.setNull(index++, java.sql.Types.INTEGER);
    } else if (model.getBackgroundWorkflowExecutorInfoId() != null) {
      stmt.setInt(index++, model.getBackgroundWorkflowExecutorInfoId());
    }
    stmt.setLong(index, model.getId());
  }

  @Override
  protected BackgroundStepAttemptInfo instanceFromResultSet(ResultSet rs, Collection<Enum> selectedFields) throws SQLException {
    boolean allFields = selectedFields == null || selectedFields.isEmpty();
    long id = rs.getLong("id");
    return new BackgroundStepAttemptInfo(id,
      allFields || selectedFields.contains(BackgroundStepAttemptInfo._Fields.step_attempt_id) ? getLongOrNull(rs, "step_attempt_id") : 0L,
      allFields || selectedFields.contains(BackgroundStepAttemptInfo._Fields.serialized_context) ? rs.getBytes("serialized_context") : new byte[0],
      allFields || selectedFields.contains(BackgroundStepAttemptInfo._Fields.next_execute_check) ? getDateAsLong(rs, "next_execute_check") : 0L,
      allFields || selectedFields.contains(BackgroundStepAttemptInfo._Fields.execute_check_cooldown_seconds) ? getIntOrNull(rs, "execute_check_cooldown_seconds") : 0,
      allFields || selectedFields.contains(BackgroundStepAttemptInfo._Fields.claimed_by_worker) ? rs.getString("claimed_by_worker") : null,
      allFields || selectedFields.contains(BackgroundStepAttemptInfo._Fields.background_workflow_executor_info_id) ? getIntOrNull(rs, "background_workflow_executor_info_id") : null,
      databases
    );
  }

  public List<BackgroundStepAttemptInfo> findByStepAttemptId(final long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(BackgroundStepAttemptInfo._Fields.step_attempt_id, value));
  }

  public List<BackgroundStepAttemptInfo> findBySerializedContext(final byte[] value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(BackgroundStepAttemptInfo._Fields.serialized_context, value));
  }

  public List<BackgroundStepAttemptInfo> findByNextExecuteCheck(final long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(BackgroundStepAttemptInfo._Fields.next_execute_check, value));
  }

  public List<BackgroundStepAttemptInfo> findByExecuteCheckCooldownSeconds(final int value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(BackgroundStepAttemptInfo._Fields.execute_check_cooldown_seconds, value));
  }

  public List<BackgroundStepAttemptInfo> findByClaimedByWorker(final String value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(BackgroundStepAttemptInfo._Fields.claimed_by_worker, value));
  }

  public List<BackgroundStepAttemptInfo> findByBackgroundWorkflowExecutorInfoId(final Integer value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(BackgroundStepAttemptInfo._Fields.background_workflow_executor_info_id, value));
  }

  public BackgroundStepAttemptInfoQueryBuilder query() {
    return new BackgroundStepAttemptInfoQueryBuilder(this);
  }

  public BackgroundStepAttemptInfoDeleteBuilder delete() {
    return new BackgroundStepAttemptInfoDeleteBuilder(this);
  }
}
