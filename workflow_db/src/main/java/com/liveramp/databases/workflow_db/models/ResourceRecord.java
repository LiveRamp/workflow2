
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.models;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import com.rapleaf.jack.AssociationType;
import com.rapleaf.jack.AttributesWithId;
import com.rapleaf.jack.BelongsToAssociation;
import com.rapleaf.jack.DefaultAssociationMetadata;
import com.rapleaf.jack.HasManyAssociation;
import com.rapleaf.jack.HasOneAssociation;
import com.rapleaf.jack.IAssociationMetadata;
import com.rapleaf.jack.IModelAssociationMetadata;
import com.rapleaf.jack.ModelIdWrapper;
import com.rapleaf.jack.ModelWithId;
import com.rapleaf.jack.queries.AbstractTable;
import com.rapleaf.jack.queries.Column;

import com.liveramp.databases.workflow_db.IDatabases;
import com.rapleaf.jack.util.JackUtility;

public class ResourceRecord extends ModelWithId<ResourceRecord, IDatabases> implements Comparable<ResourceRecord>{
  
  public static final long serialVersionUID = 3888581423314725548L;

  public static class Tbl extends AbstractTable<ResourceRecord.Attributes, ResourceRecord> {
    public final Column<Long> ID;
    public final Column<String> NAME;
    public final Column<Integer> RESOURCE_ROOT_ID;
    public final Column<String> JSON;
    public final Column<Long> CREATED_AT;
    public final Column<String> CLASS_PATH;

    private Tbl(String alias) {
      super("resource_records", alias, ResourceRecord.Attributes.class, ResourceRecord.class);
      this.ID = Column.fromId(alias);
      this.NAME = Column.fromField(alias, _Fields.name, String.class);
      this.RESOURCE_ROOT_ID = Column.fromField(alias, _Fields.resource_root_id, Integer.class);
      this.JSON = Column.fromField(alias, _Fields.json, String.class);
      this.CREATED_AT = Column.fromTimestamp(alias, _Fields.created_at);
      this.CLASS_PATH = Column.fromField(alias, _Fields.class_path, String.class);
      Collections.addAll(this.allColumns, ID, NAME, RESOURCE_ROOT_ID, JSON, CREATED_AT, CLASS_PATH);
    }

    public static Tbl as(String alias) {
      return new Tbl(alias);
    }
  }

  public static final Tbl TBL = new Tbl("resource_records");
  public static final Column<Long> ID = TBL.ID;
  public static final Column<String> NAME = TBL.NAME;
  public static final Column<Integer> RESOURCE_ROOT_ID = TBL.RESOURCE_ROOT_ID;
  public static final Column<String> JSON = TBL.JSON;
  public static final Column<Long> CREATED_AT = TBL.CREATED_AT;
  public static final Column<String> CLASS_PATH = TBL.CLASS_PATH;

  private final Attributes attributes;

  private transient ResourceRecord.Id cachedTypedId;

  // Associations
  private BelongsToAssociation<ResourceRoot> __assoc_resource_root;

  public enum _Fields {
    name,
    resource_root_id,
    json,
    created_at,
    class_path,
  }

  @Override
  public ResourceRecord.Id getTypedId() {
    if (cachedTypedId == null) {
      cachedTypedId = new ResourceRecord.Id(this.getId());
    }
    return cachedTypedId;
  }

  public ResourceRecord(long id, final String name, final int resource_root_id, final String json, final Long created_at, final String class_path, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, name, resource_root_id, json, created_at, class_path);
    this.__assoc_resource_root = new BelongsToAssociation<>(databases.getWorkflowDb().resourceRoots(), (long) getResourceRootId());
  }

  public ResourceRecord(long id, final String name, final int resource_root_id, final String json, final Long created_at, final String class_path) {
    super(null);
    attributes = new Attributes(id, name, resource_root_id, json, created_at, class_path);
  }
  
  public ResourceRecord(long id, final String name, final int resource_root_id, final String json, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, name, resource_root_id, json);
    this.__assoc_resource_root = new BelongsToAssociation<>(databases.getWorkflowDb().resourceRoots(), (long) getResourceRootId());
  }

  public ResourceRecord(long id, final String name, final int resource_root_id, final String json) {
    super(null);
    attributes = new Attributes(id, name, resource_root_id, json);
  }

  public static ResourceRecord newDefaultInstance(long id) {
    return new ResourceRecord(id, "", 0, "");
  }

  public ResourceRecord(Attributes attributes, IDatabases databases) {
    super(databases);
    this.attributes = attributes;

    if (databases != null) {
      this.__assoc_resource_root = new BelongsToAssociation<>(databases.getWorkflowDb().resourceRoots(), (long) getResourceRootId());
    }
  }

  public ResourceRecord(Attributes attributes) {
    this(attributes, (IDatabases) null);
  }

  public ResourceRecord(long id, Map<Enum, Object> fieldsMap) {
    super(null);
    attributes = new Attributes(id, fieldsMap);
  }

  public ResourceRecord (ResourceRecord other) {
    this(other, (IDatabases)null);
  }

  public ResourceRecord (ResourceRecord other, IDatabases databases) {
    super(databases);
    attributes = new Attributes(other.getAttributes());

    if (databases != null) {
      this.__assoc_resource_root = new BelongsToAssociation<>(databases.getWorkflowDb().resourceRoots(), (long) getResourceRootId());
    }
  }

  public Attributes getAttributes() {
    return attributes;
  }

  public String getName() {
    return attributes.getName();
  }

  public ResourceRecord setName(String newval) {
    attributes.setName(newval);
    cachedHashCode = 0;
    return this;
  }

  public int getResourceRootId() {
    return attributes.getResourceRootId();
  }

  public ResourceRecord setResourceRootId(int newval) {
    attributes.setResourceRootId(newval);
    if(__assoc_resource_root != null){
      this.__assoc_resource_root.setOwnerId(newval);
    }
    cachedHashCode = 0;
    return this;
  }

  public String getJson() {
    return attributes.getJson();
  }

  public ResourceRecord setJson(String newval) {
    attributes.setJson(newval);
    cachedHashCode = 0;
    return this;
  }

  public Long getCreatedAt() {
    return attributes.getCreatedAt();
  }

  public ResourceRecord setCreatedAt(Long newval) {
    attributes.setCreatedAt(newval);
    cachedHashCode = 0;
    return this;
  }

  public String getClassPath() {
    return attributes.getClassPath();
  }

  public ResourceRecord setClassPath(String newval) {
    attributes.setClassPath(newval);
    cachedHashCode = 0;
    return this;
  }

  public void setField(_Fields field, Object value) {
    switch (field) {
      case name:
        setName((String)value);
        break;
      case resource_root_id:
        setResourceRootId((Integer)value);
        break;
      case json:
        setJson((String)value);
        break;
      case created_at:
        setCreatedAt((Long)value);
        break;
      case class_path:
        setClassPath((String)value);
        break;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }
  }
  
  public void setField(String fieldName, Object value) {
    if (fieldName.equals("name")) {
      setName((String)  value);
      return;
    }
    if (fieldName.equals("resource_root_id")) {
      setResourceRootId((Integer)  value);
      return;
    }
    if (fieldName.equals("json")) {
      setJson((String)  value);
      return;
    }
    if (fieldName.equals("created_at")) {
      setCreatedAt((Long)  value);
      return;
    }
    if (fieldName.equals("class_path")) {
      setClassPath((String)  value);
      return;
    }
    throw new IllegalStateException("Invalid field: " + fieldName);
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
      case name:
        return String.class;
      case resource_root_id:
        return int.class;
      case json:
        return String.class;
      case created_at:
        return Long.class;
      case class_path:
        return String.class;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
    if (fieldName.equals("name")) {
      return String.class;
    }
    if (fieldName.equals("resource_root_id")) {
      return int.class;
    }
    if (fieldName.equals("json")) {
      return String.class;
    }
    if (fieldName.equals("created_at")) {
      return Long.class;
    }
    if (fieldName.equals("class_path")) {
      return String.class;
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public ResourceRoot getResourceRoot() throws IOException {
    return __assoc_resource_root.get();
  }

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
    if (fieldName.equals("name")) {
      return getName();
    }
    if (fieldName.equals("resource_root_id")) {
      return getResourceRootId();
    }
    if (fieldName.equals("json")) {
      return getJson();
    }
    if (fieldName.equals("created_at")) {
      return getCreatedAt();
    }
    if (fieldName.equals("class_path")) {
      return getClassPath();
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
      case name:
        return getName();
      case resource_root_id:
        return getResourceRootId();
      case json:
        return getJson();
      case created_at:
        return getCreatedAt();
      case class_path:
        return getClassPath();
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  public boolean hasField(String fieldName) {
    if (fieldName.equals("id")) {
      return true;
    }
    if (fieldName.equals("name")) {
      return true;
    }
    if (fieldName.equals("resource_root_id")) {
      return true;
    }
    if (fieldName.equals("json")) {
      return true;
    }
    if (fieldName.equals("created_at")) {
      return true;
    }
    if (fieldName.equals("class_path")) {
      return true;
    }
    return false;
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
      case name:
        return null;
      case resource_root_id:
        return null;
      case json:
        return null;
      case created_at:
        return null;
      case class_path:
        return null;
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public ResourceRecord getCopy() {
    return getCopy(databases);
  }

  @Override
  public ResourceRecord getCopy(IDatabases databases) {
    return new ResourceRecord(this, databases);
  }

  @Override
  public boolean save() throws IOException {
    return databases.getWorkflowDb().resourceRecords().save(this);
  }

  public ResourceRoot createResourceRoot() throws IOException {
 
    ResourceRoot newResourceRoot = databases.getWorkflowDb().resourceRoots().create();
    setResourceRootId(JackUtility.safeLongToInt(newResourceRoot.getId()));
    save();
    __assoc_resource_root.clearCache();
    return newResourceRoot;
  }

  public ResourceRoot createResourceRoot(final String name, final Long created_at, final Long updated_at, final String scope_identifier, final Long version, final String version_type) throws IOException {
 
    ResourceRoot newResourceRoot = databases.getWorkflowDb().resourceRoots().create(name, created_at, updated_at, scope_identifier, version, version_type);
    setResourceRootId(JackUtility.safeLongToInt(newResourceRoot.getId()));
    save();
    __assoc_resource_root.clearCache();
    return newResourceRoot;
  }

  public String toString() {
    return "<ResourceRecord"
        + " id: " + this.getId()
        + " name: " + getName()
        + " resource_root_id: " + getResourceRootId()
        + " json: " + getJson()
        + " created_at: " + getCreatedAt()
        + " class_path: " + getClassPath()
        + ">";
  }

  public void unsetAssociations() {
    unsetDatabaseReference();
    __assoc_resource_root = null;
  }

  public int compareTo(ResourceRecord that) {
    return Long.valueOf(this.getId()).compareTo(that.getId());
  }
  
  
  public static class Attributes extends AttributesWithId {
    
    public static final long serialVersionUID = 7643047426760925848L;

    // Fields
    private String __name;
    private int __resource_root_id;
    private String __json;
    private Long __created_at;
    private String __class_path;

    public Attributes(long id) {
      super(id);
    }

    public Attributes(long id, final String name, final int resource_root_id, final String json, final Long created_at, final String class_path) {
      super(id);
      this.__name = name;
      this.__resource_root_id = resource_root_id;
      this.__json = json;
      this.__created_at = created_at;
      this.__class_path = class_path;
    }
    
    public Attributes(long id, final String name, final int resource_root_id, final String json) {
      super(id);
      this.__name = name;
      this.__resource_root_id = resource_root_id;
      this.__json = json;
    }

    public static Attributes newDefaultInstance(long id) {
      return new Attributes(id, "", 0, "");
    }

    public Attributes(long id, Map<Enum, Object> fieldsMap) {
      super(id);
      String name = (String)fieldsMap.get(ResourceRecord._Fields.name);
      int resource_root_id = (Integer)fieldsMap.get(ResourceRecord._Fields.resource_root_id);
      String json = (String)fieldsMap.get(ResourceRecord._Fields.json);
      Long created_at = (Long)fieldsMap.get(ResourceRecord._Fields.created_at);
      String class_path = (String)fieldsMap.get(ResourceRecord._Fields.class_path);
      this.__name = name;
      this.__resource_root_id = resource_root_id;
      this.__json = json;
      this.__created_at = created_at;
      this.__class_path = class_path;
    }

    public Attributes(Attributes other) {
      super(other.getId());
      this.__name = other.getName();
      this.__resource_root_id = other.getResourceRootId();
      this.__json = other.getJson();
      this.__created_at = other.getCreatedAt();
      this.__class_path = other.getClassPath();
    }

    public String getName() {
      return __name;
    }

    public Attributes setName(String newval) {
      this.__name = newval;
      cachedHashCode = 0;
      return this;
    }

    public int getResourceRootId() {
      return __resource_root_id;
    }

    public Attributes setResourceRootId(int newval) {
      this.__resource_root_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getJson() {
      return __json;
    }

    public Attributes setJson(String newval) {
      this.__json = newval;
      cachedHashCode = 0;
      return this;
    }

    public Long getCreatedAt() {
      return __created_at;
    }

    public Attributes setCreatedAt(Long newval) {
      this.__created_at = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getClassPath() {
      return __class_path;
    }

    public Attributes setClassPath(String newval) {
      this.__class_path = newval;
      cachedHashCode = 0;
      return this;
    }

    public void setField(_Fields field, Object value) {
      switch (field) {
        case name:
          setName((String)value);
          break;
        case resource_root_id:
          setResourceRootId((Integer)value);
          break;
        case json:
          setJson((String)value);
          break;
        case created_at:
          setCreatedAt((Long)value);
          break;
        case class_path:
          setClassPath((String)value);
          break;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }
    }

    public void setField(String fieldName, Object value) {
      if (fieldName.equals("name")) {
        setName((String)value);
        return;
      }
      if (fieldName.equals("resource_root_id")) {
        setResourceRootId((Integer)value);
        return;
      }
      if (fieldName.equals("json")) {
        setJson((String)value);
        return;
      }
      if (fieldName.equals("created_at")) {
        setCreatedAt((Long)value);
        return;
      }
      if (fieldName.equals("class_path")) {
        setClassPath((String)value);
        return;
      }
      throw new IllegalStateException("Invalid field: " + fieldName);
    }

    public static Class getFieldType(_Fields field) {
      switch (field) {
        case name:
          return String.class;
        case resource_root_id:
          return int.class;
        case json:
          return String.class;
        case created_at:
          return Long.class;
        case class_path:
          return String.class;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }    
    }

    public static Class getFieldType(String fieldName) {    
      if (fieldName.equals("name")) {
        return String.class;
      }
      if (fieldName.equals("resource_root_id")) {
        return int.class;
      }
      if (fieldName.equals("json")) {
        return String.class;
      }
      if (fieldName.equals("created_at")) {
        return Long.class;
      }
      if (fieldName.equals("class_path")) {
        return String.class;
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    @Override
    public Object getField(String fieldName) {
      if (fieldName.equals("id")) {
        return getId();
      }
      if (fieldName.equals("name")) {
        return getName();
      }
      if (fieldName.equals("resource_root_id")) {
        return getResourceRootId();
      }
      if (fieldName.equals("json")) {
        return getJson();
      }
      if (fieldName.equals("created_at")) {
        return getCreatedAt();
      }
      if (fieldName.equals("class_path")) {
        return getClassPath();
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    public Object getField(_Fields field) {
      switch (field) {
        case name:
          return getName();
        case resource_root_id:
          return getResourceRootId();
        case json:
          return getJson();
        case created_at:
          return getCreatedAt();
        case class_path:
          return getClassPath();
      }
      throw new IllegalStateException("Invalid field: " + field);
    }

    public boolean hasField(String fieldName) {
      if (fieldName.equals("id")) {
        return true;
      }
      if (fieldName.equals("name")) {
        return true;
      }
      if (fieldName.equals("resource_root_id")) {
        return true;
      }
      if (fieldName.equals("json")) {
        return true;
      }
      if (fieldName.equals("created_at")) {
        return true;
      }
      if (fieldName.equals("class_path")) {
        return true;
      }
      return false;
    }

    public static Object getDefaultValue(_Fields field) {
      switch (field) {
        case name:
          return null;
        case resource_root_id:
          return null;
        case json:
          return null;
        case created_at:
          return null;
        case class_path:
          return null;
      }
      throw new IllegalStateException("Invalid field: " + field);
    }
    
    @Override
    public Set<Enum> getFieldSet() {
      Set set = EnumSet.allOf(_Fields.class);
      return set;
    }
    
    public String toString() {
      return "<ResourceRecord.Attributes"
          + " name: " + getName()
          + " resource_root_id: " + getResourceRootId()
          + " json: " + getJson()
          + " created_at: " + getCreatedAt()
          + " class_path: " + getClassPath()
          + ">";
    }
  }

  public static class Id implements ModelIdWrapper<ResourceRecord.Id> {
    public static final long serialVersionUID = 1L;

    private final long id;

    public Id(Long id) {
      this.id = id;
    }

    @Override
    public Long getId() {
      return id;
    }

    @Override
    public int compareTo(Id other) {
      return this.getId().compareTo(other.getId());
    }

    @Override
    public boolean equals(Object other) {
      if (other instanceof Id) {
        return this.getId().equals(((Id)other).getId());
      }
      return false;
    }

    @Override
    public int hashCode() {
      return this.getId().hashCode();
    }

    @Override
    public String toString() {
      return "<ResourceRecord.Id: " + this.getId() + ">";
    }
  }

  public static Set<Attributes> convertToAttributesSet(Collection<ResourceRecord> models) {
    return models.stream()
        .map(ResourceRecord::getAttributes)
        .collect(Collectors.toSet());
  }

  public static class AssociationMetadata implements IModelAssociationMetadata {

    private List<IAssociationMetadata> meta = new ArrayList<>();

    public AssociationMetadata(){
      meta.add(new DefaultAssociationMetadata(AssociationType.BELONGS_TO, ResourceRecord.class, ResourceRoot.class, "resource_root_id"));
    }

    @Override
    public List<IAssociationMetadata> getAssociationMetadata() {
      return meta;
    }
  }

}
