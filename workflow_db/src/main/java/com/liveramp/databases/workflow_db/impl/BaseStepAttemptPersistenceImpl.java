
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.impl;

import java.sql.SQLRecoverableException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Collection;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Timestamp;

import com.rapleaf.jack.AbstractDatabaseModel;
import com.rapleaf.jack.BaseDatabaseConnection;
import com.rapleaf.jack.queries.WhereConstraint;
import com.rapleaf.jack.queries.WhereClause;
import com.rapleaf.jack.util.JackUtility;
import com.liveramp.databases.workflow_db.iface.IStepAttemptPersistence;
import com.liveramp.databases.workflow_db.models.StepAttempt;
import com.liveramp.databases.workflow_db.query.StepAttemptQueryBuilder;
import com.liveramp.databases.workflow_db.query.StepAttemptDeleteBuilder;

import com.liveramp.databases.workflow_db.IDatabases;

public class BaseStepAttemptPersistenceImpl extends AbstractDatabaseModel<StepAttempt> implements IStepAttemptPersistence {
  private final IDatabases databases;

  public BaseStepAttemptPersistenceImpl(BaseDatabaseConnection conn, IDatabases databases) {
    super(conn, "step_attempts", Arrays.<String>asList("workflow_attempt_id", "step_token", "start_time", "end_time", "step_status", "failure_cause", "failure_trace", "action_class", "status_message"));
    this.databases = databases;
  }

  @Override
  public StepAttempt create(Map<Enum, Object> fieldsMap) throws IOException {
    int workflow_attempt_id = (Integer) fieldsMap.get(StepAttempt._Fields.workflow_attempt_id);
    String step_token = (String) fieldsMap.get(StepAttempt._Fields.step_token);
    Long start_time = (Long) fieldsMap.get(StepAttempt._Fields.start_time);
    Long end_time = (Long) fieldsMap.get(StepAttempt._Fields.end_time);
    int step_status = (Integer) fieldsMap.get(StepAttempt._Fields.step_status);
    String failure_cause = (String) fieldsMap.get(StepAttempt._Fields.failure_cause);
    String failure_trace = (String) fieldsMap.get(StepAttempt._Fields.failure_trace);
    String action_class = (String) fieldsMap.get(StepAttempt._Fields.action_class);
    String status_message = (String) fieldsMap.get(StepAttempt._Fields.status_message);
    return create(workflow_attempt_id, step_token, start_time, end_time, step_status, failure_cause, failure_trace, action_class, status_message);
  }

  public StepAttempt create(final int workflow_attempt_id, final String step_token, final Long start_time, final Long end_time, final int step_status, final String failure_cause, final String failure_trace, final String action_class, final String status_message) throws IOException {
    StatementCreator statementCreator = new StatementCreator() {
      private final List<String> nonNullFields = new ArrayList<>();
      private final List<AttrSetter> statementSetters = new ArrayList<>();

      {
        int index = 1;

        nonNullFields.add("workflow_attempt_id");
        int fieldIndex0 = index++;
        statementSetters.add(stmt -> stmt.setInt(fieldIndex0, workflow_attempt_id));

        nonNullFields.add("step_token");
        int fieldIndex1 = index++;
        statementSetters.add(stmt -> stmt.setString(fieldIndex1, step_token));

        if (start_time != null) {
          nonNullFields.add("start_time");
          int fieldIndex2 = index++;
          statementSetters.add(stmt -> stmt.setTimestamp(fieldIndex2, new Timestamp(start_time)));
        }

        if (end_time != null) {
          nonNullFields.add("end_time");
          int fieldIndex3 = index++;
          statementSetters.add(stmt -> stmt.setTimestamp(fieldIndex3, new Timestamp(end_time)));
        }

        nonNullFields.add("step_status");
        int fieldIndex4 = index++;
        statementSetters.add(stmt -> stmt.setInt(fieldIndex4, step_status));

        if (failure_cause != null) {
          nonNullFields.add("failure_cause");
          int fieldIndex5 = index++;
          statementSetters.add(stmt -> stmt.setString(fieldIndex5, failure_cause));
        }

        if (failure_trace != null) {
          nonNullFields.add("failure_trace");
          int fieldIndex6 = index++;
          statementSetters.add(stmt -> stmt.setString(fieldIndex6, failure_trace));
        }

        nonNullFields.add("action_class");
        int fieldIndex7 = index++;
        statementSetters.add(stmt -> stmt.setString(fieldIndex7, action_class));

        if (status_message != null) {
          nonNullFields.add("status_message");
          int fieldIndex8 = index++;
          statementSetters.add(stmt -> stmt.setString(fieldIndex8, status_message));
        }
      }

      @Override
      public String getStatement() {
        return getInsertStatement(nonNullFields);
      }

      @Override
      public void setStatement(PreparedStatement statement) throws SQLException {
        for (AttrSetter setter : statementSetters) {
          setter.set(statement);
        }
      }
    };

    long __id = realCreate(statementCreator);
    StepAttempt newInst = new StepAttempt(__id, workflow_attempt_id, step_token, start_time, end_time, step_status, failure_cause, failure_trace, action_class, status_message, databases);
    newInst.setCreated(true);
    cachedById.put(__id, newInst);
    clearForeignKeyCache();
    return newInst;
  }

  public StepAttempt create(final int workflow_attempt_id, final String step_token, final int step_status, final String action_class) throws IOException {
    StatementCreator statementCreator = new StatementCreator() {
      private final List<String> nonNullFields = new ArrayList<>();
      private final List<AttrSetter> statementSetters = new ArrayList<>();

      {
        int index = 1;

        nonNullFields.add("workflow_attempt_id");
        int fieldIndex0 = index++;
        statementSetters.add(stmt -> stmt.setInt(fieldIndex0, workflow_attempt_id));

        nonNullFields.add("step_token");
        int fieldIndex1 = index++;
        statementSetters.add(stmt -> stmt.setString(fieldIndex1, step_token));

        nonNullFields.add("step_status");
        int fieldIndex4 = index++;
        statementSetters.add(stmt -> stmt.setInt(fieldIndex4, step_status));

        nonNullFields.add("action_class");
        int fieldIndex7 = index++;
        statementSetters.add(stmt -> stmt.setString(fieldIndex7, action_class));
      }

      @Override
      public String getStatement() {
        return getInsertStatement(nonNullFields);
      }

      @Override
      public void setStatement(PreparedStatement statement) throws SQLException {
        for (AttrSetter setter : statementSetters) {
          setter.set(statement);
        }
      }
    };

    long __id = realCreate(statementCreator);
    StepAttempt newInst = new StepAttempt(__id, workflow_attempt_id, step_token, null, null, step_status, null, null, action_class, null, databases);
    newInst.setCreated(true);
    cachedById.put(__id, newInst);
    clearForeignKeyCache();
    return newInst;
  }

  public StepAttempt createDefaultInstance() throws IOException {
    return create(0, "", 0, "");
  }

  public List<StepAttempt> find(Map<Enum, Object> fieldsMap) throws IOException {
    return find(null, fieldsMap);
  }

  public List<StepAttempt> find(Collection<Long> ids, Map<Enum, Object> fieldsMap) throws IOException {
    List<StepAttempt> foundList = new ArrayList<>();

    if (fieldsMap == null || fieldsMap.isEmpty()) {
      return foundList;
    }

    StringBuilder statementString = new StringBuilder();
    statementString.append("SELECT * FROM step_attempts WHERE (");
    List<Object> nonNullValues = new ArrayList<>();
    List<StepAttempt._Fields> nonNullValueFields = new ArrayList<>();

    Iterator<Map.Entry<Enum, Object>> iter = fieldsMap.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Enum, Object> entry = iter.next();
      Enum field = entry.getKey();
      Object value = entry.getValue();

      String queryValue = value != null ? " = ? " : " IS NULL";
      if (value != null) {
        nonNullValueFields.add((StepAttempt._Fields) field);
        nonNullValues.add(value);
      }

      statementString.append(field).append(queryValue);
      if (iter.hasNext()) {
        statementString.append(" AND ");
      }
    }
    if (ids != null) statementString.append(" AND ").append(getIdSetCondition(ids));
    statementString.append(")");

    int retryCount = 0;
    PreparedStatement preparedStatement;

    while (true) {
      preparedStatement = getPreparedStatement(statementString.toString());

      for (int i = 0; i < nonNullValues.size(); i++) {
        StepAttempt._Fields field = nonNullValueFields.get(i);
        try {
          switch (field) {
            case workflow_attempt_id:
              preparedStatement.setInt(i+1, (Integer) nonNullValues.get(i));
              break;
            case step_token:
              preparedStatement.setString(i+1, (String) nonNullValues.get(i));
              break;
            case start_time:
              preparedStatement.setTimestamp(i+1, new Timestamp((Long) nonNullValues.get(i)));
              break;
            case end_time:
              preparedStatement.setTimestamp(i+1, new Timestamp((Long) nonNullValues.get(i)));
              break;
            case step_status:
              preparedStatement.setInt(i+1, (Integer) nonNullValues.get(i));
              break;
            case failure_cause:
              preparedStatement.setString(i+1, (String) nonNullValues.get(i));
              break;
            case failure_trace:
              preparedStatement.setString(i+1, (String) nonNullValues.get(i));
              break;
            case action_class:
              preparedStatement.setString(i+1, (String) nonNullValues.get(i));
              break;
            case status_message:
              preparedStatement.setString(i+1, (String) nonNullValues.get(i));
              break;
          }
        } catch (SQLException e) {
          throw new IOException(e);
        }
      }

      try {
        executeQuery(foundList, preparedStatement);
        return foundList;
      } catch (SQLRecoverableException e) {
        if (++retryCount > AbstractDatabaseModel.MAX_CONNECTION_RETRIES) {
          throw new IOException(e);
        }
      } catch (SQLException e) {
        throw new IOException(e);
      }
    }
  }

  @Override
  protected void setStatementParameters(PreparedStatement preparedStatement, WhereClause whereClause) throws IOException {
    int index = 0;
    for (WhereConstraint constraint : whereClause.getWhereConstraints()) {
      for (Object parameter : constraint.getParameters()) {
        if (parameter == null) {
          continue;
        }
        try {
          if (constraint.isId()) {
            preparedStatement.setLong(++index, (Long)parameter);
          } else {
            StepAttempt._Fields field = (StepAttempt._Fields)constraint.getField();
            switch (field) {
              case workflow_attempt_id:
                preparedStatement.setInt(++index, (Integer) parameter);
                break;
              case step_token:
                preparedStatement.setString(++index, (String) parameter);
                break;
              case start_time:
                preparedStatement.setTimestamp(++index, new Timestamp((Long) parameter));
                break;
              case end_time:
                preparedStatement.setTimestamp(++index, new Timestamp((Long) parameter));
                break;
              case step_status:
                preparedStatement.setInt(++index, (Integer) parameter);
                break;
              case failure_cause:
                preparedStatement.setString(++index, (String) parameter);
                break;
              case failure_trace:
                preparedStatement.setString(++index, (String) parameter);
                break;
              case action_class:
                preparedStatement.setString(++index, (String) parameter);
                break;
              case status_message:
                preparedStatement.setString(++index, (String) parameter);
                break;
            }
          }
        } catch (SQLException e) {
          throw new IOException(e);
        }
      }
    }
  }

  @Override
  protected void setAttrs(StepAttempt model, PreparedStatement stmt, boolean setNull) throws SQLException {
    int index = 1;
    {
      stmt.setInt(index++, model.getWorkflowAttemptId());
    }
    {
      stmt.setString(index++, model.getStepToken());
    }
    if (setNull && model.getStartTime() == null) {
      stmt.setNull(index++, java.sql.Types.DATE);
    } else if (model.getStartTime() != null) {
      stmt.setTimestamp(index++, new Timestamp(model.getStartTime()));
    }
    if (setNull && model.getEndTime() == null) {
      stmt.setNull(index++, java.sql.Types.DATE);
    } else if (model.getEndTime() != null) {
      stmt.setTimestamp(index++, new Timestamp(model.getEndTime()));
    }
    {
      stmt.setInt(index++, model.getStepStatus());
    }
    if (setNull && model.getFailureCause() == null) {
      stmt.setNull(index++, java.sql.Types.CHAR);
    } else if (model.getFailureCause() != null) {
      stmt.setString(index++, model.getFailureCause());
    }
    if (setNull && model.getFailureTrace() == null) {
      stmt.setNull(index++, java.sql.Types.CHAR);
    } else if (model.getFailureTrace() != null) {
      stmt.setString(index++, model.getFailureTrace());
    }
    {
      stmt.setString(index++, model.getActionClass());
    }
    if (setNull && model.getStatusMessage() == null) {
      stmt.setNull(index++, java.sql.Types.CHAR);
    } else if (model.getStatusMessage() != null) {
      stmt.setString(index++, model.getStatusMessage());
    }
    stmt.setLong(index, model.getId());
  }

  @Override
  protected StepAttempt instanceFromResultSet(ResultSet rs, Collection<Enum> selectedFields) throws SQLException {
    boolean allFields = selectedFields == null || selectedFields.isEmpty();
    long id = rs.getLong("id");
    return new StepAttempt(id,
      allFields || selectedFields.contains(StepAttempt._Fields.workflow_attempt_id) ? getIntOrNull(rs, "workflow_attempt_id") : 0,
      allFields || selectedFields.contains(StepAttempt._Fields.step_token) ? rs.getString("step_token") : "",
      allFields || selectedFields.contains(StepAttempt._Fields.start_time) ? getDateAsLong(rs, "start_time") : null,
      allFields || selectedFields.contains(StepAttempt._Fields.end_time) ? getDateAsLong(rs, "end_time") : null,
      allFields || selectedFields.contains(StepAttempt._Fields.step_status) ? getIntOrNull(rs, "step_status") : 0,
      allFields || selectedFields.contains(StepAttempt._Fields.failure_cause) ? rs.getString("failure_cause") : null,
      allFields || selectedFields.contains(StepAttempt._Fields.failure_trace) ? rs.getString("failure_trace") : null,
      allFields || selectedFields.contains(StepAttempt._Fields.action_class) ? rs.getString("action_class") : "",
      allFields || selectedFields.contains(StepAttempt._Fields.status_message) ? rs.getString("status_message") : null,
      databases
    );
  }

  public List<StepAttempt> findByWorkflowAttemptId(final int value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(StepAttempt._Fields.workflow_attempt_id, value));
  }

  public List<StepAttempt> findByStepToken(final String value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(StepAttempt._Fields.step_token, value));
  }

  public List<StepAttempt> findByStartTime(final Long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(StepAttempt._Fields.start_time, value));
  }

  public List<StepAttempt> findByEndTime(final Long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(StepAttempt._Fields.end_time, value));
  }

  public List<StepAttempt> findByStepStatus(final int value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(StepAttempt._Fields.step_status, value));
  }

  public List<StepAttempt> findByFailureCause(final String value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(StepAttempt._Fields.failure_cause, value));
  }

  public List<StepAttempt> findByFailureTrace(final String value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(StepAttempt._Fields.failure_trace, value));
  }

  public List<StepAttempt> findByActionClass(final String value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(StepAttempt._Fields.action_class, value));
  }

  public List<StepAttempt> findByStatusMessage(final String value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(StepAttempt._Fields.status_message, value));
  }

  public StepAttemptQueryBuilder query() {
    return new StepAttemptQueryBuilder(this);
  }

  public StepAttemptDeleteBuilder delete() {
    return new StepAttemptDeleteBuilder(this);
  }
}
