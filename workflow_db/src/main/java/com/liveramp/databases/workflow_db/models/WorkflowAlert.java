
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.models;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import com.rapleaf.jack.AssociationType;
import com.rapleaf.jack.AttributesWithId;
import com.rapleaf.jack.BelongsToAssociation;
import com.rapleaf.jack.DefaultAssociationMetadata;
import com.rapleaf.jack.HasManyAssociation;
import com.rapleaf.jack.HasOneAssociation;
import com.rapleaf.jack.IAssociationMetadata;
import com.rapleaf.jack.IModelAssociationMetadata;
import com.rapleaf.jack.ModelIdWrapper;
import com.rapleaf.jack.ModelWithId;
import com.rapleaf.jack.queries.AbstractTable;
import com.rapleaf.jack.queries.Column;

import com.liveramp.databases.workflow_db.IDatabases;
import com.rapleaf.jack.util.JackUtility;

public class WorkflowAlert extends ModelWithId<WorkflowAlert, IDatabases> implements Comparable<WorkflowAlert>{
  
  public static final long serialVersionUID = 2588162905656309836L;

  public static class Tbl extends AbstractTable<WorkflowAlert.Attributes, WorkflowAlert> {
    public final Column<Long> ID;
    public final Column<String> ALERT_CLASS;
    public final Column<String> MESSAGE;

    private Tbl(String alias) {
      super("workflow_alerts", alias, WorkflowAlert.Attributes.class, WorkflowAlert.class);
      this.ID = Column.fromId(alias);
      this.ALERT_CLASS = Column.fromField(alias, _Fields.alert_class, String.class);
      this.MESSAGE = Column.fromField(alias, _Fields.message, String.class);
      Collections.addAll(this.allColumns, ID, ALERT_CLASS, MESSAGE);
    }

    public static Tbl as(String alias) {
      return new Tbl(alias);
    }
  }

  public static final Tbl TBL = new Tbl("workflow_alerts");
  public static final Column<Long> ID = TBL.ID;
  public static final Column<String> ALERT_CLASS = TBL.ALERT_CLASS;
  public static final Column<String> MESSAGE = TBL.MESSAGE;

  private final Attributes attributes;

  private transient WorkflowAlert.Id cachedTypedId;

  // Associations
  private HasOneAssociation<WorkflowAlertMapreduceJob> __assoc_workflow_alert_mapreduce_job;
  private HasOneAssociation<WorkflowAlertWorkflowExecution> __assoc_workflow_alert_workflow_execution;

  public enum _Fields {
    alert_class,
    message,
  }

  @Override
  public WorkflowAlert.Id getTypedId() {
    if (cachedTypedId == null) {
      cachedTypedId = new WorkflowAlert.Id(this.getId());
    }
    return cachedTypedId;
  }

  public WorkflowAlert(long id, final String alert_class, final String message, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, alert_class, message);
    this.__assoc_workflow_alert_mapreduce_job = new HasOneAssociation<>(databases.getWorkflowDb().workflowAlertMapreduceJobs(), "workflow_alert_id", getId());
    this.__assoc_workflow_alert_workflow_execution = new HasOneAssociation<>(databases.getWorkflowDb().workflowAlertWorkflowExecutions(), "workflow_alert_id", getId());
  }

  public WorkflowAlert(long id, final String alert_class, final String message) {
    super(null);
    attributes = new Attributes(id, alert_class, message);
  }
  
  public WorkflowAlert(long id, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id);
    this.__assoc_workflow_alert_mapreduce_job = new HasOneAssociation<>(databases.getWorkflowDb().workflowAlertMapreduceJobs(), "workflow_alert_id", getId());
    this.__assoc_workflow_alert_workflow_execution = new HasOneAssociation<>(databases.getWorkflowDb().workflowAlertWorkflowExecutions(), "workflow_alert_id", getId());
  }

  public WorkflowAlert(long id) {
    super(null);
    attributes = new Attributes(id);
  }

  public static WorkflowAlert newDefaultInstance(long id) {
    return new WorkflowAlert(id);
  }

  public WorkflowAlert(Attributes attributes, IDatabases databases) {
    super(databases);
    this.attributes = attributes;

    if (databases != null) {
      this.__assoc_workflow_alert_mapreduce_job = new HasOneAssociation<>(databases.getWorkflowDb().workflowAlertMapreduceJobs(), "workflow_alert_id", getId());
      this.__assoc_workflow_alert_workflow_execution = new HasOneAssociation<>(databases.getWorkflowDb().workflowAlertWorkflowExecutions(), "workflow_alert_id", getId());
    }
  }

  public WorkflowAlert(Attributes attributes) {
    this(attributes, (IDatabases) null);
  }

  public WorkflowAlert(long id, Map<Enum, Object> fieldsMap) {
    super(null);
    attributes = new Attributes(id, fieldsMap);
  }

  public WorkflowAlert (WorkflowAlert other) {
    this(other, (IDatabases)null);
  }

  public WorkflowAlert (WorkflowAlert other, IDatabases databases) {
    super(databases);
    attributes = new Attributes(other.getAttributes());

    if (databases != null) {
      this.__assoc_workflow_alert_mapreduce_job = new HasOneAssociation<>(databases.getWorkflowDb().workflowAlertMapreduceJobs(), "workflow_alert_id", getId());
      this.__assoc_workflow_alert_workflow_execution = new HasOneAssociation<>(databases.getWorkflowDb().workflowAlertWorkflowExecutions(), "workflow_alert_id", getId());
    }
  }

  public Attributes getAttributes() {
    return attributes;
  }

  public String getAlertClass() {
    return attributes.getAlertClass();
  }

  public WorkflowAlert setAlertClass(String newval) {
    attributes.setAlertClass(newval);
    cachedHashCode = 0;
    return this;
  }

  public String getMessage() {
    return attributes.getMessage();
  }

  public WorkflowAlert setMessage(String newval) {
    attributes.setMessage(newval);
    cachedHashCode = 0;
    return this;
  }

  public void setField(_Fields field, Object value) {
    switch (field) {
      case alert_class:
        setAlertClass((String)value);
        break;
      case message:
        setMessage((String)value);
        break;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }
  }
  
  public void setField(String fieldName, Object value) {
    if (fieldName.equals("alert_class")) {
      setAlertClass((String)  value);
      return;
    }
    if (fieldName.equals("message")) {
      setMessage((String)  value);
      return;
    }
    throw new IllegalStateException("Invalid field: " + fieldName);
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
      case alert_class:
        return String.class;
      case message:
        return String.class;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
    if (fieldName.equals("alert_class")) {
      return String.class;
    }
    if (fieldName.equals("message")) {
      return String.class;
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public WorkflowAlertMapreduceJob getWorkflowAlertMapreduceJob() throws IOException {
    return __assoc_workflow_alert_mapreduce_job.get();
  }

  public WorkflowAlertWorkflowExecution getWorkflowAlertWorkflowExecution() throws IOException {
    return __assoc_workflow_alert_workflow_execution.get();
  }

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
    if (fieldName.equals("alert_class")) {
      return getAlertClass();
    }
    if (fieldName.equals("message")) {
      return getMessage();
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
      case alert_class:
        return getAlertClass();
      case message:
        return getMessage();
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  public boolean hasField(String fieldName) {
    if (fieldName.equals("id")) {
      return true;
    }
    if (fieldName.equals("alert_class")) {
      return true;
    }
    if (fieldName.equals("message")) {
      return true;
    }
    return false;
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
      case alert_class:
        return null;
      case message:
        return null;
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public WorkflowAlert getCopy() {
    return getCopy(databases);
  }

  @Override
  public WorkflowAlert getCopy(IDatabases databases) {
    return new WorkflowAlert(this, databases);
  }

  @Override
  public boolean save() throws IOException {
    return databases.getWorkflowDb().workflowAlerts().save(this);
  }

  public String toString() {
    return "<WorkflowAlert"
        + " id: " + this.getId()
        + " alert_class: " + getAlertClass()
        + " message: " + getMessage()
        + ">";
  }

  public void unsetAssociations() {
    unsetDatabaseReference();
    __assoc_workflow_alert_mapreduce_job = null;
    __assoc_workflow_alert_workflow_execution = null;
  }

  public int compareTo(WorkflowAlert that) {
    return Long.valueOf(this.getId()).compareTo(that.getId());
  }
  
  
  public static class Attributes extends AttributesWithId {
    
    public static final long serialVersionUID = -3613220188290061858L;

    // Fields
    private String __alert_class;
    private String __message;

    public Attributes(long id) {
      super(id);
    }

    public Attributes(long id, final String alert_class, final String message) {
      super(id);
      this.__alert_class = alert_class;
      this.__message = message;
    }

    public static Attributes newDefaultInstance(long id) {
      return new Attributes(id);
    }

    public Attributes(long id, Map<Enum, Object> fieldsMap) {
      super(id);
      String alert_class = (String)fieldsMap.get(WorkflowAlert._Fields.alert_class);
      String message = (String)fieldsMap.get(WorkflowAlert._Fields.message);
      this.__alert_class = alert_class;
      this.__message = message;
    }

    public Attributes(Attributes other) {
      super(other.getId());
      this.__alert_class = other.getAlertClass();
      this.__message = other.getMessage();
    }

    public String getAlertClass() {
      return __alert_class;
    }

    public Attributes setAlertClass(String newval) {
      this.__alert_class = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getMessage() {
      return __message;
    }

    public Attributes setMessage(String newval) {
      this.__message = newval;
      cachedHashCode = 0;
      return this;
    }

    public void setField(_Fields field, Object value) {
      switch (field) {
        case alert_class:
          setAlertClass((String)value);
          break;
        case message:
          setMessage((String)value);
          break;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }
    }

    public void setField(String fieldName, Object value) {
      if (fieldName.equals("alert_class")) {
        setAlertClass((String)value);
        return;
      }
      if (fieldName.equals("message")) {
        setMessage((String)value);
        return;
      }
      throw new IllegalStateException("Invalid field: " + fieldName);
    }

    public static Class getFieldType(_Fields field) {
      switch (field) {
        case alert_class:
          return String.class;
        case message:
          return String.class;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }    
    }

    public static Class getFieldType(String fieldName) {    
      if (fieldName.equals("alert_class")) {
        return String.class;
      }
      if (fieldName.equals("message")) {
        return String.class;
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    @Override
    public Object getField(String fieldName) {
      if (fieldName.equals("id")) {
        return getId();
      }
      if (fieldName.equals("alert_class")) {
        return getAlertClass();
      }
      if (fieldName.equals("message")) {
        return getMessage();
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    public Object getField(_Fields field) {
      switch (field) {
        case alert_class:
          return getAlertClass();
        case message:
          return getMessage();
      }
      throw new IllegalStateException("Invalid field: " + field);
    }

    public boolean hasField(String fieldName) {
      if (fieldName.equals("id")) {
        return true;
      }
      if (fieldName.equals("alert_class")) {
        return true;
      }
      if (fieldName.equals("message")) {
        return true;
      }
      return false;
    }

    public static Object getDefaultValue(_Fields field) {
      switch (field) {
        case alert_class:
          return null;
        case message:
          return null;
      }
      throw new IllegalStateException("Invalid field: " + field);
    }
    
    @Override
    public Set<Enum> getFieldSet() {
      Set set = EnumSet.allOf(_Fields.class);
      return set;
    }
    
    public String toString() {
      return "<WorkflowAlert.Attributes"
          + " alert_class: " + getAlertClass()
          + " message: " + getMessage()
          + ">";
    }
  }

  public static class Id implements ModelIdWrapper<WorkflowAlert.Id> {
    public static final long serialVersionUID = 1L;

    private final long id;

    public Id(Long id) {
      this.id = id;
    }

    @Override
    public Long getId() {
      return id;
    }

    @Override
    public int compareTo(Id other) {
      return this.getId().compareTo(other.getId());
    }

    @Override
    public boolean equals(Object other) {
      if (other instanceof Id) {
        return this.getId().equals(((Id)other).getId());
      }
      return false;
    }

    @Override
    public int hashCode() {
      return this.getId().hashCode();
    }

    @Override
    public String toString() {
      return "<WorkflowAlert.Id: " + this.getId() + ">";
    }
  }

  public static Set<Attributes> convertToAttributesSet(Collection<WorkflowAlert> models) {
    return models.stream()
        .map(WorkflowAlert::getAttributes)
        .collect(Collectors.toSet());
  }

  public static class AssociationMetadata implements IModelAssociationMetadata {

    private List<IAssociationMetadata> meta = new ArrayList<>();

    public AssociationMetadata(){
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_ONE, WorkflowAlert.class, WorkflowAlertMapreduceJob.class, "workflow_alert_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_ONE, WorkflowAlert.class, WorkflowAlertWorkflowExecution.class, "workflow_alert_id"));
    }

    @Override
    public List<IAssociationMetadata> getAssociationMetadata() {
      return meta;
    }
  }

}
