
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.models;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import com.rapleaf.jack.AssociationType;
import com.rapleaf.jack.AttributesWithId;
import com.rapleaf.jack.BelongsToAssociation;
import com.rapleaf.jack.DefaultAssociationMetadata;
import com.rapleaf.jack.HasManyAssociation;
import com.rapleaf.jack.HasOneAssociation;
import com.rapleaf.jack.IAssociationMetadata;
import com.rapleaf.jack.IModelAssociationMetadata;
import com.rapleaf.jack.ModelIdWrapper;
import com.rapleaf.jack.ModelWithId;
import com.rapleaf.jack.queries.AbstractTable;
import com.rapleaf.jack.queries.Column;

import com.liveramp.databases.workflow_db.IDatabases;
import com.rapleaf.jack.util.JackUtility;

public class StepAttemptDatastore extends ModelWithId<StepAttemptDatastore, IDatabases> implements Comparable<StepAttemptDatastore>{
  
  public static final long serialVersionUID = 6069089693520153804L;

  public static class Tbl extends AbstractTable<StepAttemptDatastore.Attributes, StepAttemptDatastore> {
    public final Column<Long> ID;
    public final Column<Long> STEP_ATTEMPT_ID;
    public final Column<Long> WORKFLOW_ATTEMPT_DATASTORE_ID;
    public final Column<Integer> DS_ACTION;

    private Tbl(String alias) {
      super("step_attempt_datastores", alias, StepAttemptDatastore.Attributes.class, StepAttemptDatastore.class);
      this.ID = Column.fromId(alias);
      this.STEP_ATTEMPT_ID = Column.fromField(alias, _Fields.step_attempt_id, Long.class);
      this.WORKFLOW_ATTEMPT_DATASTORE_ID = Column.fromField(alias, _Fields.workflow_attempt_datastore_id, Long.class);
      this.DS_ACTION = Column.fromField(alias, _Fields.ds_action, Integer.class);
      Collections.addAll(this.allColumns, ID, STEP_ATTEMPT_ID, WORKFLOW_ATTEMPT_DATASTORE_ID, DS_ACTION);
    }

    public static Tbl as(String alias) {
      return new Tbl(alias);
    }
  }

  public static final Tbl TBL = new Tbl("step_attempt_datastores");
  public static final Column<Long> ID = TBL.ID;
  public static final Column<Long> STEP_ATTEMPT_ID = TBL.STEP_ATTEMPT_ID;
  public static final Column<Long> WORKFLOW_ATTEMPT_DATASTORE_ID = TBL.WORKFLOW_ATTEMPT_DATASTORE_ID;
  public static final Column<Integer> DS_ACTION = TBL.DS_ACTION;

  private final Attributes attributes;

  private transient StepAttemptDatastore.Id cachedTypedId;

  // Associations
  private BelongsToAssociation<StepAttempt> __assoc_step_attempt;
  private BelongsToAssociation<WorkflowAttemptDatastore> __assoc_workflow_attempt_datastore;

  public enum _Fields {
    step_attempt_id,
    workflow_attempt_datastore_id,
    ds_action,
  }

  @Override
  public StepAttemptDatastore.Id getTypedId() {
    if (cachedTypedId == null) {
      cachedTypedId = new StepAttemptDatastore.Id(this.getId());
    }
    return cachedTypedId;
  }

  public StepAttemptDatastore(long id, final long step_attempt_id, final long workflow_attempt_datastore_id, final int ds_action, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, step_attempt_id, workflow_attempt_datastore_id, ds_action);
    this.__assoc_step_attempt = new BelongsToAssociation<>(databases.getWorkflowDb().stepAttempts(), getStepAttemptId());
    this.__assoc_workflow_attempt_datastore = new BelongsToAssociation<>(databases.getWorkflowDb().workflowAttemptDatastores(), getWorkflowAttemptDatastoreId());
  }

  public StepAttemptDatastore(long id, final long step_attempt_id, final long workflow_attempt_datastore_id, final int ds_action) {
    super(null);
    attributes = new Attributes(id, step_attempt_id, workflow_attempt_datastore_id, ds_action);
  }

  public static StepAttemptDatastore newDefaultInstance(long id) {
    return new StepAttemptDatastore(id, 0L, 0L, 0);
  }

  public StepAttemptDatastore(Attributes attributes, IDatabases databases) {
    super(databases);
    this.attributes = attributes;

    if (databases != null) {
      this.__assoc_step_attempt = new BelongsToAssociation<>(databases.getWorkflowDb().stepAttempts(), getStepAttemptId());
      this.__assoc_workflow_attempt_datastore = new BelongsToAssociation<>(databases.getWorkflowDb().workflowAttemptDatastores(), getWorkflowAttemptDatastoreId());
    }
  }

  public StepAttemptDatastore(Attributes attributes) {
    this(attributes, (IDatabases) null);
  }

  public StepAttemptDatastore(long id, Map<Enum, Object> fieldsMap) {
    super(null);
    attributes = new Attributes(id, fieldsMap);
  }

  public StepAttemptDatastore (StepAttemptDatastore other) {
    this(other, (IDatabases)null);
  }

  public StepAttemptDatastore (StepAttemptDatastore other, IDatabases databases) {
    super(databases);
    attributes = new Attributes(other.getAttributes());

    if (databases != null) {
      this.__assoc_step_attempt = new BelongsToAssociation<>(databases.getWorkflowDb().stepAttempts(), getStepAttemptId());
      this.__assoc_workflow_attempt_datastore = new BelongsToAssociation<>(databases.getWorkflowDb().workflowAttemptDatastores(), getWorkflowAttemptDatastoreId());
    }
  }

  public Attributes getAttributes() {
    return attributes;
  }

  public long getStepAttemptId() {
    return attributes.getStepAttemptId();
  }

  public StepAttemptDatastore setStepAttemptId(long newval) {
    attributes.setStepAttemptId(newval);
    if(__assoc_step_attempt != null){
      this.__assoc_step_attempt.setOwnerId(newval);
    }
    cachedHashCode = 0;
    return this;
  }

  public long getWorkflowAttemptDatastoreId() {
    return attributes.getWorkflowAttemptDatastoreId();
  }

  public StepAttemptDatastore setWorkflowAttemptDatastoreId(long newval) {
    attributes.setWorkflowAttemptDatastoreId(newval);
    if(__assoc_workflow_attempt_datastore != null){
      this.__assoc_workflow_attempt_datastore.setOwnerId(newval);
    }
    cachedHashCode = 0;
    return this;
  }

  public int getDsAction() {
    return attributes.getDsAction();
  }

  public StepAttemptDatastore setDsAction(int newval) {
    attributes.setDsAction(newval);
    cachedHashCode = 0;
    return this;
  }

  public void setField(_Fields field, Object value) {
    switch (field) {
      case step_attempt_id:
        setStepAttemptId((Long)value);
        break;
      case workflow_attempt_datastore_id:
        setWorkflowAttemptDatastoreId((Long)value);
        break;
      case ds_action:
        setDsAction((Integer)value);
        break;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }
  }
  
  public void setField(String fieldName, Object value) {
    if (fieldName.equals("step_attempt_id")) {
      setStepAttemptId((Long)  value);
      return;
    }
    if (fieldName.equals("workflow_attempt_datastore_id")) {
      setWorkflowAttemptDatastoreId((Long)  value);
      return;
    }
    if (fieldName.equals("ds_action")) {
      setDsAction((Integer)  value);
      return;
    }
    throw new IllegalStateException("Invalid field: " + fieldName);
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
      case step_attempt_id:
        return long.class;
      case workflow_attempt_datastore_id:
        return long.class;
      case ds_action:
        return int.class;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
    if (fieldName.equals("step_attempt_id")) {
      return long.class;
    }
    if (fieldName.equals("workflow_attempt_datastore_id")) {
      return long.class;
    }
    if (fieldName.equals("ds_action")) {
      return int.class;
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public StepAttempt getStepAttempt() throws IOException {
    return __assoc_step_attempt.get();
  }

  public WorkflowAttemptDatastore getWorkflowAttemptDatastore() throws IOException {
    return __assoc_workflow_attempt_datastore.get();
  }

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
    if (fieldName.equals("step_attempt_id")) {
      return getStepAttemptId();
    }
    if (fieldName.equals("workflow_attempt_datastore_id")) {
      return getWorkflowAttemptDatastoreId();
    }
    if (fieldName.equals("ds_action")) {
      return getDsAction();
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
      case step_attempt_id:
        return getStepAttemptId();
      case workflow_attempt_datastore_id:
        return getWorkflowAttemptDatastoreId();
      case ds_action:
        return getDsAction();
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  public boolean hasField(String fieldName) {
    if (fieldName.equals("id")) {
      return true;
    }
    if (fieldName.equals("step_attempt_id")) {
      return true;
    }
    if (fieldName.equals("workflow_attempt_datastore_id")) {
      return true;
    }
    if (fieldName.equals("ds_action")) {
      return true;
    }
    return false;
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
      case step_attempt_id:
        return null;
      case workflow_attempt_datastore_id:
        return null;
      case ds_action:
        return null;
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public StepAttemptDatastore getCopy() {
    return getCopy(databases);
  }

  @Override
  public StepAttemptDatastore getCopy(IDatabases databases) {
    return new StepAttemptDatastore(this, databases);
  }

  @Override
  public boolean save() throws IOException {
    return databases.getWorkflowDb().stepAttemptDatastores().save(this);
  }

  public StepAttempt createStepAttempt(final int workflow_attempt_id, final String step_token, final int step_status, final String action_class) throws IOException {
 
    StepAttempt newStepAttempt = databases.getWorkflowDb().stepAttempts().create(workflow_attempt_id, step_token, step_status, action_class);
    setStepAttemptId(newStepAttempt.getId());
    save();
    __assoc_step_attempt.clearCache();
    return newStepAttempt;
  }

  public StepAttempt createStepAttempt(final int workflow_attempt_id, final String step_token, final Long start_time, final Long end_time, final int step_status, final String failure_cause, final String failure_trace, final String action_class, final String status_message) throws IOException {
 
    StepAttempt newStepAttempt = databases.getWorkflowDb().stepAttempts().create(workflow_attempt_id, step_token, start_time, end_time, step_status, failure_cause, failure_trace, action_class, status_message);
    setStepAttemptId(newStepAttempt.getId());
    save();
    __assoc_step_attempt.clearCache();
    return newStepAttempt;
  }

  public StepAttempt createStepAttempt() throws IOException {
 
    StepAttempt newStepAttempt = databases.getWorkflowDb().stepAttempts().create(0, "", 0, "");
    setStepAttemptId(newStepAttempt.getId());
    save();
    __assoc_step_attempt.clearCache();
    return newStepAttempt;
  }

  public WorkflowAttemptDatastore createWorkflowAttemptDatastore(final int workflow_attempt_id, final String name, final String path, final String class_name) throws IOException {
 
    WorkflowAttemptDatastore newWorkflowAttemptDatastore = databases.getWorkflowDb().workflowAttemptDatastores().create(workflow_attempt_id, name, path, class_name);
    setWorkflowAttemptDatastoreId(newWorkflowAttemptDatastore.getId());
    save();
    __assoc_workflow_attempt_datastore.clearCache();
    return newWorkflowAttemptDatastore;
  }

  public WorkflowAttemptDatastore createWorkflowAttemptDatastore() throws IOException {
 
    WorkflowAttemptDatastore newWorkflowAttemptDatastore = databases.getWorkflowDb().workflowAttemptDatastores().create(0, "", "", "");
    setWorkflowAttemptDatastoreId(newWorkflowAttemptDatastore.getId());
    save();
    __assoc_workflow_attempt_datastore.clearCache();
    return newWorkflowAttemptDatastore;
  }

  public String toString() {
    return "<StepAttemptDatastore"
        + " id: " + this.getId()
        + " step_attempt_id: " + getStepAttemptId()
        + " workflow_attempt_datastore_id: " + getWorkflowAttemptDatastoreId()
        + " ds_action: " + getDsAction()
        + ">";
  }

  public void unsetAssociations() {
    unsetDatabaseReference();
    __assoc_step_attempt = null;
    __assoc_workflow_attempt_datastore = null;
  }

  public int compareTo(StepAttemptDatastore that) {
    return Long.valueOf(this.getId()).compareTo(that.getId());
  }
  
  
  public static class Attributes extends AttributesWithId {
    
    public static final long serialVersionUID = -4876270912092984447L;

    // Fields
    private long __step_attempt_id;
    private long __workflow_attempt_datastore_id;
    private int __ds_action;

    public Attributes(long id) {
      super(id);
    }

    public Attributes(long id, final long step_attempt_id, final long workflow_attempt_datastore_id, final int ds_action) {
      super(id);
      this.__step_attempt_id = step_attempt_id;
      this.__workflow_attempt_datastore_id = workflow_attempt_datastore_id;
      this.__ds_action = ds_action;
    }

    public static Attributes newDefaultInstance(long id) {
      return new Attributes(id, 0L, 0L, 0);
    }

    public Attributes(long id, Map<Enum, Object> fieldsMap) {
      super(id);
      long step_attempt_id = (Long)fieldsMap.get(StepAttemptDatastore._Fields.step_attempt_id);
      long workflow_attempt_datastore_id = (Long)fieldsMap.get(StepAttemptDatastore._Fields.workflow_attempt_datastore_id);
      int ds_action = (Integer)fieldsMap.get(StepAttemptDatastore._Fields.ds_action);
      this.__step_attempt_id = step_attempt_id;
      this.__workflow_attempt_datastore_id = workflow_attempt_datastore_id;
      this.__ds_action = ds_action;
    }

    public Attributes(Attributes other) {
      super(other.getId());
      this.__step_attempt_id = other.getStepAttemptId();
      this.__workflow_attempt_datastore_id = other.getWorkflowAttemptDatastoreId();
      this.__ds_action = other.getDsAction();
    }

    public long getStepAttemptId() {
      return __step_attempt_id;
    }

    public Attributes setStepAttemptId(long newval) {
      this.__step_attempt_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public long getWorkflowAttemptDatastoreId() {
      return __workflow_attempt_datastore_id;
    }

    public Attributes setWorkflowAttemptDatastoreId(long newval) {
      this.__workflow_attempt_datastore_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public int getDsAction() {
      return __ds_action;
    }

    public Attributes setDsAction(int newval) {
      this.__ds_action = newval;
      cachedHashCode = 0;
      return this;
    }

    public void setField(_Fields field, Object value) {
      switch (field) {
        case step_attempt_id:
          setStepAttemptId((Long)value);
          break;
        case workflow_attempt_datastore_id:
          setWorkflowAttemptDatastoreId((Long)value);
          break;
        case ds_action:
          setDsAction((Integer)value);
          break;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }
    }

    public void setField(String fieldName, Object value) {
      if (fieldName.equals("step_attempt_id")) {
        setStepAttemptId((Long)value);
        return;
      }
      if (fieldName.equals("workflow_attempt_datastore_id")) {
        setWorkflowAttemptDatastoreId((Long)value);
        return;
      }
      if (fieldName.equals("ds_action")) {
        setDsAction((Integer)value);
        return;
      }
      throw new IllegalStateException("Invalid field: " + fieldName);
    }

    public static Class getFieldType(_Fields field) {
      switch (field) {
        case step_attempt_id:
          return long.class;
        case workflow_attempt_datastore_id:
          return long.class;
        case ds_action:
          return int.class;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }    
    }

    public static Class getFieldType(String fieldName) {    
      if (fieldName.equals("step_attempt_id")) {
        return long.class;
      }
      if (fieldName.equals("workflow_attempt_datastore_id")) {
        return long.class;
      }
      if (fieldName.equals("ds_action")) {
        return int.class;
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    @Override
    public Object getField(String fieldName) {
      if (fieldName.equals("id")) {
        return getId();
      }
      if (fieldName.equals("step_attempt_id")) {
        return getStepAttemptId();
      }
      if (fieldName.equals("workflow_attempt_datastore_id")) {
        return getWorkflowAttemptDatastoreId();
      }
      if (fieldName.equals("ds_action")) {
        return getDsAction();
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    public Object getField(_Fields field) {
      switch (field) {
        case step_attempt_id:
          return getStepAttemptId();
        case workflow_attempt_datastore_id:
          return getWorkflowAttemptDatastoreId();
        case ds_action:
          return getDsAction();
      }
      throw new IllegalStateException("Invalid field: " + field);
    }

    public boolean hasField(String fieldName) {
      if (fieldName.equals("id")) {
        return true;
      }
      if (fieldName.equals("step_attempt_id")) {
        return true;
      }
      if (fieldName.equals("workflow_attempt_datastore_id")) {
        return true;
      }
      if (fieldName.equals("ds_action")) {
        return true;
      }
      return false;
    }

    public static Object getDefaultValue(_Fields field) {
      switch (field) {
        case step_attempt_id:
          return null;
        case workflow_attempt_datastore_id:
          return null;
        case ds_action:
          return null;
      }
      throw new IllegalStateException("Invalid field: " + field);
    }
    
    @Override
    public Set<Enum> getFieldSet() {
      Set set = EnumSet.allOf(_Fields.class);
      return set;
    }
    
    public String toString() {
      return "<StepAttemptDatastore.Attributes"
          + " step_attempt_id: " + getStepAttemptId()
          + " workflow_attempt_datastore_id: " + getWorkflowAttemptDatastoreId()
          + " ds_action: " + getDsAction()
          + ">";
    }
  }

  public static class Id implements ModelIdWrapper<StepAttemptDatastore.Id> {
    public static final long serialVersionUID = 1L;

    private final long id;

    public Id(Long id) {
      this.id = id;
    }

    @Override
    public Long getId() {
      return id;
    }

    @Override
    public int compareTo(Id other) {
      return this.getId().compareTo(other.getId());
    }

    @Override
    public boolean equals(Object other) {
      if (other instanceof Id) {
        return this.getId().equals(((Id)other).getId());
      }
      return false;
    }

    @Override
    public int hashCode() {
      return this.getId().hashCode();
    }

    @Override
    public String toString() {
      return "<StepAttemptDatastore.Id: " + this.getId() + ">";
    }
  }

  public static Set<Attributes> convertToAttributesSet(Collection<StepAttemptDatastore> models) {
    return models.stream()
        .map(StepAttemptDatastore::getAttributes)
        .collect(Collectors.toSet());
  }

  public static class AssociationMetadata implements IModelAssociationMetadata {

    private List<IAssociationMetadata> meta = new ArrayList<>();

    public AssociationMetadata(){
      meta.add(new DefaultAssociationMetadata(AssociationType.BELONGS_TO, StepAttemptDatastore.class, StepAttempt.class, "step_attempt_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.BELONGS_TO, StepAttemptDatastore.class, WorkflowAttemptDatastore.class, "workflow_attempt_datastore_id"));
    }

    @Override
    public List<IAssociationMetadata> getAssociationMetadata() {
      return meta;
    }
  }

}
