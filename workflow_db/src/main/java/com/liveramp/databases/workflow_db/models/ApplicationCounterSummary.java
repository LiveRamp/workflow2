
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.models;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import com.rapleaf.jack.AssociationType;
import com.rapleaf.jack.AttributesWithId;
import com.rapleaf.jack.BelongsToAssociation;
import com.rapleaf.jack.DefaultAssociationMetadata;
import com.rapleaf.jack.HasManyAssociation;
import com.rapleaf.jack.HasOneAssociation;
import com.rapleaf.jack.IAssociationMetadata;
import com.rapleaf.jack.IModelAssociationMetadata;
import com.rapleaf.jack.ModelIdWrapper;
import com.rapleaf.jack.ModelWithId;
import com.rapleaf.jack.queries.AbstractTable;
import com.rapleaf.jack.queries.Column;

import com.liveramp.databases.workflow_db.IDatabases;
import com.rapleaf.jack.util.JackUtility;

public class ApplicationCounterSummary extends ModelWithId<ApplicationCounterSummary, IDatabases> implements Comparable<ApplicationCounterSummary>{
  
  public static final long serialVersionUID = 97935004846981127L;

  public static class Tbl extends AbstractTable<ApplicationCounterSummary.Attributes, ApplicationCounterSummary> {
    public final Column<Long> ID;
    public final Column<Integer> APPLICATION_ID;
    public final Column<String> GROUP;
    public final Column<String> NAME;
    public final Column<Long> VALUE;
    public final Column<Long> DATE;

    private Tbl(String alias) {
      super("application_counter_summaries", alias, ApplicationCounterSummary.Attributes.class, ApplicationCounterSummary.class);
      this.ID = Column.fromId(alias);
      this.APPLICATION_ID = Column.fromField(alias, _Fields.application_id, Integer.class);
      this.GROUP = Column.fromField(alias, _Fields.group, String.class);
      this.NAME = Column.fromField(alias, _Fields.name, String.class);
      this.VALUE = Column.fromField(alias, _Fields.value, Long.class);
      this.DATE = Column.fromDate(alias, _Fields.date);
      Collections.addAll(this.allColumns, ID, APPLICATION_ID, GROUP, NAME, VALUE, DATE);
    }

    public static Tbl as(String alias) {
      return new Tbl(alias);
    }
  }

  public static final Tbl TBL = new Tbl("application_counter_summaries");
  public static final Column<Long> ID = TBL.ID;
  public static final Column<Integer> APPLICATION_ID = TBL.APPLICATION_ID;
  public static final Column<String> GROUP = TBL.GROUP;
  public static final Column<String> NAME = TBL.NAME;
  public static final Column<Long> VALUE = TBL.VALUE;
  public static final Column<Long> DATE = TBL.DATE;

  private final Attributes attributes;

  private transient ApplicationCounterSummary.Id cachedTypedId;

  // Associations
  private BelongsToAssociation<Application> __assoc_application;

  public enum _Fields {
    application_id,
    group,
    name,
    value,
    date,
  }

  @Override
  public ApplicationCounterSummary.Id getTypedId() {
    if (cachedTypedId == null) {
      cachedTypedId = new ApplicationCounterSummary.Id(this.getId());
    }
    return cachedTypedId;
  }

  public ApplicationCounterSummary(long id, final Integer application_id, final String group, final String name, final Long value, final Long date, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, application_id, group, name, value, date);
    this.__assoc_application = new BelongsToAssociation<>(databases.getWorkflowDb().applications(), getApplicationId() == null ? null : getApplicationId().longValue());
  }

  public ApplicationCounterSummary(long id, final Integer application_id, final String group, final String name, final Long value, final Long date) {
    super(null);
    attributes = new Attributes(id, application_id, group, name, value, date);
  }
  
  public ApplicationCounterSummary(long id, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id);
    this.__assoc_application = new BelongsToAssociation<>(databases.getWorkflowDb().applications(), getApplicationId() == null ? null : getApplicationId().longValue());
  }

  public ApplicationCounterSummary(long id) {
    super(null);
    attributes = new Attributes(id);
  }

  public static ApplicationCounterSummary newDefaultInstance(long id) {
    return new ApplicationCounterSummary(id);
  }

  public ApplicationCounterSummary(Attributes attributes, IDatabases databases) {
    super(databases);
    this.attributes = attributes;

    if (databases != null) {
      this.__assoc_application = new BelongsToAssociation<>(databases.getWorkflowDb().applications(), getApplicationId() == null ? null : getApplicationId().longValue());
    }
  }

  public ApplicationCounterSummary(Attributes attributes) {
    this(attributes, (IDatabases) null);
  }

  public ApplicationCounterSummary(long id, Map<Enum, Object> fieldsMap) {
    super(null);
    attributes = new Attributes(id, fieldsMap);
  }

  public ApplicationCounterSummary (ApplicationCounterSummary other) {
    this(other, (IDatabases)null);
  }

  public ApplicationCounterSummary (ApplicationCounterSummary other, IDatabases databases) {
    super(databases);
    attributes = new Attributes(other.getAttributes());

    if (databases != null) {
      this.__assoc_application = new BelongsToAssociation<>(databases.getWorkflowDb().applications(), getApplicationId() == null ? null : getApplicationId().longValue());
    }
  }

  public Attributes getAttributes() {
    return attributes;
  }

  public Integer getApplicationId() {
    return attributes.getApplicationId();
  }

  public ApplicationCounterSummary setApplicationId(Integer newval) {
    attributes.setApplicationId(newval);
    if(__assoc_application != null){
      this.__assoc_application.setOwnerId(newval);
    }
    cachedHashCode = 0;
    return this;
  }

  public String getGroup() {
    return attributes.getGroup();
  }

  public ApplicationCounterSummary setGroup(String newval) {
    attributes.setGroup(newval);
    cachedHashCode = 0;
    return this;
  }

  public String getName() {
    return attributes.getName();
  }

  public ApplicationCounterSummary setName(String newval) {
    attributes.setName(newval);
    cachedHashCode = 0;
    return this;
  }

  public Long getValue() {
    return attributes.getValue();
  }

  public ApplicationCounterSummary setValue(Long newval) {
    attributes.setValue(newval);
    cachedHashCode = 0;
    return this;
  }

  public Long getDate() {
    return attributes.getDate();
  }

  public ApplicationCounterSummary setDate(Long newval) {
    attributes.setDate(newval);
    cachedHashCode = 0;
    return this;
  }

  public void setField(_Fields field, Object value) {
    switch (field) {
      case application_id:
        setApplicationId((Integer)value);
        break;
      case group:
        setGroup((String)value);
        break;
      case name:
        setName((String)value);
        break;
      case value:
        setValue((Long)value);
        break;
      case date:
        setDate((Long)value);
        break;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }
  }
  
  public void setField(String fieldName, Object value) {
    if (fieldName.equals("application_id")) {
      setApplicationId((Integer)  value);
      return;
    }
    if (fieldName.equals("group")) {
      setGroup((String)  value);
      return;
    }
    if (fieldName.equals("name")) {
      setName((String)  value);
      return;
    }
    if (fieldName.equals("value")) {
      setValue((Long)  value);
      return;
    }
    if (fieldName.equals("date")) {
      setDate((Long)  value);
      return;
    }
    throw new IllegalStateException("Invalid field: " + fieldName);
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
      case application_id:
        return Integer.class;
      case group:
        return String.class;
      case name:
        return String.class;
      case value:
        return Long.class;
      case date:
        return Long.class;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
    if (fieldName.equals("application_id")) {
      return Integer.class;
    }
    if (fieldName.equals("group")) {
      return String.class;
    }
    if (fieldName.equals("name")) {
      return String.class;
    }
    if (fieldName.equals("value")) {
      return Long.class;
    }
    if (fieldName.equals("date")) {
      return Long.class;
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Application getApplication() throws IOException {
    return __assoc_application.get();
  }

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
    if (fieldName.equals("application_id")) {
      return getApplicationId();
    }
    if (fieldName.equals("group")) {
      return getGroup();
    }
    if (fieldName.equals("name")) {
      return getName();
    }
    if (fieldName.equals("value")) {
      return getValue();
    }
    if (fieldName.equals("date")) {
      return getDate();
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
      case application_id:
        return getApplicationId();
      case group:
        return getGroup();
      case name:
        return getName();
      case value:
        return getValue();
      case date:
        return getDate();
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  public boolean hasField(String fieldName) {
    if (fieldName.equals("id")) {
      return true;
    }
    if (fieldName.equals("application_id")) {
      return true;
    }
    if (fieldName.equals("group")) {
      return true;
    }
    if (fieldName.equals("name")) {
      return true;
    }
    if (fieldName.equals("value")) {
      return true;
    }
    if (fieldName.equals("date")) {
      return true;
    }
    return false;
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
      case application_id:
        return null;
      case group:
        return null;
      case name:
        return null;
      case value:
        return null;
      case date:
        return null;
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public ApplicationCounterSummary getCopy() {
    return getCopy(databases);
  }

  @Override
  public ApplicationCounterSummary getCopy(IDatabases databases) {
    return new ApplicationCounterSummary(this, databases);
  }

  @Override
  public boolean save() throws IOException {
    return databases.getWorkflowDb().applicationCounterSummaries().save(this);
  }

  public Application createApplication(final String name) throws IOException {
 
    Application newApplication = databases.getWorkflowDb().applications().create(name);
    setApplicationId(JackUtility.safeLongToInt(newApplication.getId()));
    save();
    __assoc_application.clearCache();
    return newApplication;
  }

  public Application createApplication(final String name, final Integer app_type) throws IOException {
 
    Application newApplication = databases.getWorkflowDb().applications().create(name, app_type);
    setApplicationId(JackUtility.safeLongToInt(newApplication.getId()));
    save();
    __assoc_application.clearCache();
    return newApplication;
  }

  public Application createApplication() throws IOException {
 
    Application newApplication = databases.getWorkflowDb().applications().create("");
    setApplicationId(JackUtility.safeLongToInt(newApplication.getId()));
    save();
    __assoc_application.clearCache();
    return newApplication;
  }

  public String toString() {
    return "<ApplicationCounterSummary"
        + " id: " + this.getId()
        + " application_id: " + getApplicationId()
        + " group: " + getGroup()
        + " name: " + getName()
        + " value: " + getValue()
        + " date: " + getDate()
        + ">";
  }

  public void unsetAssociations() {
    unsetDatabaseReference();
    __assoc_application = null;
  }

  public int compareTo(ApplicationCounterSummary that) {
    return Long.valueOf(this.getId()).compareTo(that.getId());
  }
  
  
  public static class Attributes extends AttributesWithId {
    
    public static final long serialVersionUID = -3861255724849900541L;

    // Fields
    private Integer __application_id;
    private String __group;
    private String __name;
    private Long __value;
    private Long __date;

    public Attributes(long id) {
      super(id);
    }

    public Attributes(long id, final Integer application_id, final String group, final String name, final Long value, final Long date) {
      super(id);
      this.__application_id = application_id;
      this.__group = group;
      this.__name = name;
      this.__value = value;
      this.__date = date;
    }

    public static Attributes newDefaultInstance(long id) {
      return new Attributes(id);
    }

    public Attributes(long id, Map<Enum, Object> fieldsMap) {
      super(id);
      Integer application_id = (Integer)fieldsMap.get(ApplicationCounterSummary._Fields.application_id);
      String group = (String)fieldsMap.get(ApplicationCounterSummary._Fields.group);
      String name = (String)fieldsMap.get(ApplicationCounterSummary._Fields.name);
      Long value = (Long)fieldsMap.get(ApplicationCounterSummary._Fields.value);
      Long date = (Long)fieldsMap.get(ApplicationCounterSummary._Fields.date);
      this.__application_id = application_id;
      this.__group = group;
      this.__name = name;
      this.__value = value;
      this.__date = date;
    }

    public Attributes(Attributes other) {
      super(other.getId());
      this.__application_id = other.getApplicationId();
      this.__group = other.getGroup();
      this.__name = other.getName();
      this.__value = other.getValue();
      this.__date = other.getDate();
    }

    public Integer getApplicationId() {
      return __application_id;
    }

    public Attributes setApplicationId(Integer newval) {
      this.__application_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getGroup() {
      return __group;
    }

    public Attributes setGroup(String newval) {
      this.__group = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getName() {
      return __name;
    }

    public Attributes setName(String newval) {
      this.__name = newval;
      cachedHashCode = 0;
      return this;
    }

    public Long getValue() {
      return __value;
    }

    public Attributes setValue(Long newval) {
      this.__value = newval;
      cachedHashCode = 0;
      return this;
    }

    public Long getDate() {
      return __date;
    }

    public Attributes setDate(Long newval) {
      this.__date = newval;
      cachedHashCode = 0;
      return this;
    }

    public void setField(_Fields field, Object value) {
      switch (field) {
        case application_id:
          setApplicationId((Integer)value);
          break;
        case group:
          setGroup((String)value);
          break;
        case name:
          setName((String)value);
          break;
        case value:
          setValue((Long)value);
          break;
        case date:
          setDate((Long)value);
          break;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }
    }

    public void setField(String fieldName, Object value) {
      if (fieldName.equals("application_id")) {
        setApplicationId((Integer)value);
        return;
      }
      if (fieldName.equals("group")) {
        setGroup((String)value);
        return;
      }
      if (fieldName.equals("name")) {
        setName((String)value);
        return;
      }
      if (fieldName.equals("value")) {
        setValue((Long)value);
        return;
      }
      if (fieldName.equals("date")) {
        setDate((Long)value);
        return;
      }
      throw new IllegalStateException("Invalid field: " + fieldName);
    }

    public static Class getFieldType(_Fields field) {
      switch (field) {
        case application_id:
          return Integer.class;
        case group:
          return String.class;
        case name:
          return String.class;
        case value:
          return Long.class;
        case date:
          return Long.class;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }    
    }

    public static Class getFieldType(String fieldName) {    
      if (fieldName.equals("application_id")) {
        return Integer.class;
      }
      if (fieldName.equals("group")) {
        return String.class;
      }
      if (fieldName.equals("name")) {
        return String.class;
      }
      if (fieldName.equals("value")) {
        return Long.class;
      }
      if (fieldName.equals("date")) {
        return Long.class;
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    @Override
    public Object getField(String fieldName) {
      if (fieldName.equals("id")) {
        return getId();
      }
      if (fieldName.equals("application_id")) {
        return getApplicationId();
      }
      if (fieldName.equals("group")) {
        return getGroup();
      }
      if (fieldName.equals("name")) {
        return getName();
      }
      if (fieldName.equals("value")) {
        return getValue();
      }
      if (fieldName.equals("date")) {
        return getDate();
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    public Object getField(_Fields field) {
      switch (field) {
        case application_id:
          return getApplicationId();
        case group:
          return getGroup();
        case name:
          return getName();
        case value:
          return getValue();
        case date:
          return getDate();
      }
      throw new IllegalStateException("Invalid field: " + field);
    }

    public boolean hasField(String fieldName) {
      if (fieldName.equals("id")) {
        return true;
      }
      if (fieldName.equals("application_id")) {
        return true;
      }
      if (fieldName.equals("group")) {
        return true;
      }
      if (fieldName.equals("name")) {
        return true;
      }
      if (fieldName.equals("value")) {
        return true;
      }
      if (fieldName.equals("date")) {
        return true;
      }
      return false;
    }

    public static Object getDefaultValue(_Fields field) {
      switch (field) {
        case application_id:
          return null;
        case group:
          return null;
        case name:
          return null;
        case value:
          return null;
        case date:
          return null;
      }
      throw new IllegalStateException("Invalid field: " + field);
    }
    
    @Override
    public Set<Enum> getFieldSet() {
      Set set = EnumSet.allOf(_Fields.class);
      return set;
    }
    
    public String toString() {
      return "<ApplicationCounterSummary.Attributes"
          + " application_id: " + getApplicationId()
          + " group: " + getGroup()
          + " name: " + getName()
          + " value: " + getValue()
          + " date: " + getDate()
          + ">";
    }
  }

  public static class Id implements ModelIdWrapper<ApplicationCounterSummary.Id> {
    public static final long serialVersionUID = 1L;

    private final long id;

    public Id(Long id) {
      this.id = id;
    }

    @Override
    public Long getId() {
      return id;
    }

    @Override
    public int compareTo(Id other) {
      return this.getId().compareTo(other.getId());
    }

    @Override
    public boolean equals(Object other) {
      if (other instanceof Id) {
        return this.getId().equals(((Id)other).getId());
      }
      return false;
    }

    @Override
    public int hashCode() {
      return this.getId().hashCode();
    }

    @Override
    public String toString() {
      return "<ApplicationCounterSummary.Id: " + this.getId() + ">";
    }
  }

  public static Set<Attributes> convertToAttributesSet(Collection<ApplicationCounterSummary> models) {
    return models.stream()
        .map(ApplicationCounterSummary::getAttributes)
        .collect(Collectors.toSet());
  }

  public static class AssociationMetadata implements IModelAssociationMetadata {

    private List<IAssociationMetadata> meta = new ArrayList<>();

    public AssociationMetadata(){
      meta.add(new DefaultAssociationMetadata(AssociationType.BELONGS_TO, ApplicationCounterSummary.class, Application.class, "application_id"));
    }

    @Override
    public List<IAssociationMetadata> getAssociationMetadata() {
      return meta;
    }
  }

}
