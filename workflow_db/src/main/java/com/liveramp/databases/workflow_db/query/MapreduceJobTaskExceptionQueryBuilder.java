/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.query;

import java.util.Collection;

import com.rapleaf.jack.queries.AbstractQueryBuilder;
import com.rapleaf.jack.queries.Column;
import com.rapleaf.jack.queries.FieldSelector;
import com.rapleaf.jack.queries.where_operators.IWhereOperator;
import com.rapleaf.jack.queries.where_operators.JackMatchers;
import com.rapleaf.jack.queries.WhereConstraint;
import com.rapleaf.jack.queries.QueryOrder;
import com.rapleaf.jack.queries.OrderCriterion;
import com.rapleaf.jack.queries.LimitCriterion;
import com.liveramp.databases.workflow_db.iface.IMapreduceJobTaskExceptionPersistence;
import com.liveramp.databases.workflow_db.models.MapreduceJobTaskException;


public class MapreduceJobTaskExceptionQueryBuilder extends AbstractQueryBuilder<MapreduceJobTaskException> {

  public MapreduceJobTaskExceptionQueryBuilder(IMapreduceJobTaskExceptionPersistence caller) {
    super(caller);
  }

  public MapreduceJobTaskExceptionQueryBuilder select(MapreduceJobTaskException._Fields... fields) {
    for (MapreduceJobTaskException._Fields field : fields){
      addSelectedField(new FieldSelector(field));
    }
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder selectAgg(FieldSelector... aggregatedFields) {
    addSelectedFields(aggregatedFields);
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder id(Long value) {
    addId(value);
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder idIn(Collection<Long> values) {
    addIds(values);
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder whereId(IWhereOperator<Long> operator) {
    addWhereConstraint(new WhereConstraint<>(Column.fromId(null), operator, null));
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder limit(int offset, int nResults) {
    setLimit(new LimitCriterion(offset, nResults));
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder limit(int nResults) {
    setLimit(new LimitCriterion(nResults));
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder groupBy(MapreduceJobTaskException._Fields... fields) {
    addGroupByFields(fields);
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder order() {
    this.addOrder(new OrderCriterion(QueryOrder.ASC));
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder order(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(queryOrder));
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder orderById() {
    this.addOrder(new OrderCriterion(QueryOrder.ASC));
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder orderById(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(queryOrder));
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder mapreduceJobId(Integer value) {
    addWhereConstraint(new WhereConstraint<>(MapreduceJobTaskException._Fields.mapreduce_job_id, JackMatchers.equalTo(value)));
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder whereMapreduceJobId(IWhereOperator<Integer> operator) {
    addWhereConstraint(new WhereConstraint<>(MapreduceJobTaskException._Fields.mapreduce_job_id, operator));
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder orderByMapreduceJobId() {
    this.addOrder(new OrderCriterion(MapreduceJobTaskException._Fields.mapreduce_job_id, QueryOrder.ASC));
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder orderByMapreduceJobId(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(MapreduceJobTaskException._Fields.mapreduce_job_id, queryOrder));
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder taskAttemptId(String value) {
    addWhereConstraint(new WhereConstraint<>(MapreduceJobTaskException._Fields.task_attempt_id, JackMatchers.equalTo(value)));
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder whereTaskAttemptId(IWhereOperator<String> operator) {
    addWhereConstraint(new WhereConstraint<>(MapreduceJobTaskException._Fields.task_attempt_id, operator));
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder orderByTaskAttemptId() {
    this.addOrder(new OrderCriterion(MapreduceJobTaskException._Fields.task_attempt_id, QueryOrder.ASC));
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder orderByTaskAttemptId(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(MapreduceJobTaskException._Fields.task_attempt_id, queryOrder));
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder exception(String value) {
    addWhereConstraint(new WhereConstraint<>(MapreduceJobTaskException._Fields.exception, JackMatchers.equalTo(value)));
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder whereException(IWhereOperator<String> operator) {
    addWhereConstraint(new WhereConstraint<>(MapreduceJobTaskException._Fields.exception, operator));
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder orderByException() {
    this.addOrder(new OrderCriterion(MapreduceJobTaskException._Fields.exception, QueryOrder.ASC));
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder orderByException(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(MapreduceJobTaskException._Fields.exception, queryOrder));
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder hostUrl(String value) {
    addWhereConstraint(new WhereConstraint<>(MapreduceJobTaskException._Fields.host_url, JackMatchers.equalTo(value)));
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder whereHostUrl(IWhereOperator<String> operator) {
    addWhereConstraint(new WhereConstraint<>(MapreduceJobTaskException._Fields.host_url, operator));
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder orderByHostUrl() {
    this.addOrder(new OrderCriterion(MapreduceJobTaskException._Fields.host_url, QueryOrder.ASC));
    return this;
  }

  public MapreduceJobTaskExceptionQueryBuilder orderByHostUrl(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(MapreduceJobTaskException._Fields.host_url, queryOrder));
    return this;
  }
}
