
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.models;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import com.rapleaf.jack.AssociationType;
import com.rapleaf.jack.AttributesWithId;
import com.rapleaf.jack.BelongsToAssociation;
import com.rapleaf.jack.DefaultAssociationMetadata;
import com.rapleaf.jack.HasManyAssociation;
import com.rapleaf.jack.HasOneAssociation;
import com.rapleaf.jack.IAssociationMetadata;
import com.rapleaf.jack.IModelAssociationMetadata;
import com.rapleaf.jack.ModelIdWrapper;
import com.rapleaf.jack.ModelWithId;
import com.rapleaf.jack.queries.AbstractTable;
import com.rapleaf.jack.queries.Column;

import com.liveramp.databases.workflow_db.IDatabases;
import com.rapleaf.jack.util.JackUtility;

public class MapreduceCounter extends ModelWithId<MapreduceCounter, IDatabases> implements Comparable<MapreduceCounter>{
  
  public static final long serialVersionUID = -1864524813938876523L;

  public static class Tbl extends AbstractTable<MapreduceCounter.Attributes, MapreduceCounter> {
    public final Column<Long> ID;
    public final Column<Integer> MAPREDUCE_JOB_ID;
    public final Column<String> GROUP;
    public final Column<String> NAME;
    public final Column<Long> VALUE;

    private Tbl(String alias) {
      super("mapreduce_counters", alias, MapreduceCounter.Attributes.class, MapreduceCounter.class);
      this.ID = Column.fromId(alias);
      this.MAPREDUCE_JOB_ID = Column.fromField(alias, _Fields.mapreduce_job_id, Integer.class);
      this.GROUP = Column.fromField(alias, _Fields.group, String.class);
      this.NAME = Column.fromField(alias, _Fields.name, String.class);
      this.VALUE = Column.fromField(alias, _Fields.value, Long.class);
      Collections.addAll(this.allColumns, ID, MAPREDUCE_JOB_ID, GROUP, NAME, VALUE);
    }

    public static Tbl as(String alias) {
      return new Tbl(alias);
    }
  }

  public static final Tbl TBL = new Tbl("mapreduce_counters");
  public static final Column<Long> ID = TBL.ID;
  public static final Column<Integer> MAPREDUCE_JOB_ID = TBL.MAPREDUCE_JOB_ID;
  public static final Column<String> GROUP = TBL.GROUP;
  public static final Column<String> NAME = TBL.NAME;
  public static final Column<Long> VALUE = TBL.VALUE;

  private final Attributes attributes;

  private transient MapreduceCounter.Id cachedTypedId;

  // Associations
  private BelongsToAssociation<MapreduceJob> __assoc_mapreduce_job;

  public enum _Fields {
    mapreduce_job_id,
    group,
    name,
    value,
  }

  @Override
  public MapreduceCounter.Id getTypedId() {
    if (cachedTypedId == null) {
      cachedTypedId = new MapreduceCounter.Id(this.getId());
    }
    return cachedTypedId;
  }

  public MapreduceCounter(long id, final int mapreduce_job_id, final String group, final String name, final long value, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, mapreduce_job_id, group, name, value);
    this.__assoc_mapreduce_job = new BelongsToAssociation<>(databases.getWorkflowDb().mapreduceJobs(), (long) getMapreduceJobId());
  }

  public MapreduceCounter(long id, final int mapreduce_job_id, final String group, final String name, final long value) {
    super(null);
    attributes = new Attributes(id, mapreduce_job_id, group, name, value);
  }

  public static MapreduceCounter newDefaultInstance(long id) {
    return new MapreduceCounter(id, 0, "", "", 0L);
  }

  public MapreduceCounter(Attributes attributes, IDatabases databases) {
    super(databases);
    this.attributes = attributes;

    if (databases != null) {
      this.__assoc_mapreduce_job = new BelongsToAssociation<>(databases.getWorkflowDb().mapreduceJobs(), (long) getMapreduceJobId());
    }
  }

  public MapreduceCounter(Attributes attributes) {
    this(attributes, (IDatabases) null);
  }

  public MapreduceCounter(long id, Map<Enum, Object> fieldsMap) {
    super(null);
    attributes = new Attributes(id, fieldsMap);
  }

  public MapreduceCounter (MapreduceCounter other) {
    this(other, (IDatabases)null);
  }

  public MapreduceCounter (MapreduceCounter other, IDatabases databases) {
    super(databases);
    attributes = new Attributes(other.getAttributes());

    if (databases != null) {
      this.__assoc_mapreduce_job = new BelongsToAssociation<>(databases.getWorkflowDb().mapreduceJobs(), (long) getMapreduceJobId());
    }
  }

  public Attributes getAttributes() {
    return attributes;
  }

  public int getMapreduceJobId() {
    return attributes.getMapreduceJobId();
  }

  public MapreduceCounter setMapreduceJobId(int newval) {
    attributes.setMapreduceJobId(newval);
    if(__assoc_mapreduce_job != null){
      this.__assoc_mapreduce_job.setOwnerId(newval);
    }
    cachedHashCode = 0;
    return this;
  }

  public String getGroup() {
    return attributes.getGroup();
  }

  public MapreduceCounter setGroup(String newval) {
    attributes.setGroup(newval);
    cachedHashCode = 0;
    return this;
  }

  public String getName() {
    return attributes.getName();
  }

  public MapreduceCounter setName(String newval) {
    attributes.setName(newval);
    cachedHashCode = 0;
    return this;
  }

  public long getValue() {
    return attributes.getValue();
  }

  public MapreduceCounter setValue(long newval) {
    attributes.setValue(newval);
    cachedHashCode = 0;
    return this;
  }

  public void setField(_Fields field, Object value) {
    switch (field) {
      case mapreduce_job_id:
        setMapreduceJobId((Integer)value);
        break;
      case group:
        setGroup((String)value);
        break;
      case name:
        setName((String)value);
        break;
      case value:
        setValue((Long)value);
        break;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }
  }
  
  public void setField(String fieldName, Object value) {
    if (fieldName.equals("mapreduce_job_id")) {
      setMapreduceJobId((Integer)  value);
      return;
    }
    if (fieldName.equals("group")) {
      setGroup((String)  value);
      return;
    }
    if (fieldName.equals("name")) {
      setName((String)  value);
      return;
    }
    if (fieldName.equals("value")) {
      setValue((Long)  value);
      return;
    }
    throw new IllegalStateException("Invalid field: " + fieldName);
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
      case mapreduce_job_id:
        return int.class;
      case group:
        return String.class;
      case name:
        return String.class;
      case value:
        return long.class;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
    if (fieldName.equals("mapreduce_job_id")) {
      return int.class;
    }
    if (fieldName.equals("group")) {
      return String.class;
    }
    if (fieldName.equals("name")) {
      return String.class;
    }
    if (fieldName.equals("value")) {
      return long.class;
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public MapreduceJob getMapreduceJob() throws IOException {
    return __assoc_mapreduce_job.get();
  }

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
    if (fieldName.equals("mapreduce_job_id")) {
      return getMapreduceJobId();
    }
    if (fieldName.equals("group")) {
      return getGroup();
    }
    if (fieldName.equals("name")) {
      return getName();
    }
    if (fieldName.equals("value")) {
      return getValue();
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
      case mapreduce_job_id:
        return getMapreduceJobId();
      case group:
        return getGroup();
      case name:
        return getName();
      case value:
        return getValue();
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  public boolean hasField(String fieldName) {
    if (fieldName.equals("id")) {
      return true;
    }
    if (fieldName.equals("mapreduce_job_id")) {
      return true;
    }
    if (fieldName.equals("group")) {
      return true;
    }
    if (fieldName.equals("name")) {
      return true;
    }
    if (fieldName.equals("value")) {
      return true;
    }
    return false;
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
      case mapreduce_job_id:
        return null;
      case group:
        return null;
      case name:
        return null;
      case value:
        return null;
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public MapreduceCounter getCopy() {
    return getCopy(databases);
  }

  @Override
  public MapreduceCounter getCopy(IDatabases databases) {
    return new MapreduceCounter(this, databases);
  }

  @Override
  public boolean save() throws IOException {
    return databases.getWorkflowDb().mapreduceCounters().save(this);
  }

  public MapreduceJob createMapreduceJob(final String job_identifier, final String job_name, final String tracking_url) throws IOException {
 
    MapreduceJob newMapreduceJob = databases.getWorkflowDb().mapreduceJobs().create(job_identifier, job_name, tracking_url);
    setMapreduceJobId(JackUtility.safeLongToInt(newMapreduceJob.getId()));
    save();
    __assoc_mapreduce_job.clearCache();
    return newMapreduceJob;
  }

  public MapreduceJob createMapreduceJob(final Long step_attempt_id, final String job_identifier, final String job_name, final String tracking_url, final Long avg_map_duration, final Long median_map_duration, final Long max_map_duration, final Long min_map_duration, final Long stdev_map_duration, final Long avg_reduce_duration, final Long median_reduce_duration, final Long max_reduce_duration, final Long min_reduce_duration, final Long stdev_reduce_duration, final Integer tasks_sampled, final Integer tasks_failed_in_sample) throws IOException {
 
    MapreduceJob newMapreduceJob = databases.getWorkflowDb().mapreduceJobs().create(step_attempt_id, job_identifier, job_name, tracking_url, avg_map_duration, median_map_duration, max_map_duration, min_map_duration, stdev_map_duration, avg_reduce_duration, median_reduce_duration, max_reduce_duration, min_reduce_duration, stdev_reduce_duration, tasks_sampled, tasks_failed_in_sample);
    setMapreduceJobId(JackUtility.safeLongToInt(newMapreduceJob.getId()));
    save();
    __assoc_mapreduce_job.clearCache();
    return newMapreduceJob;
  }

  public MapreduceJob createMapreduceJob() throws IOException {
 
    MapreduceJob newMapreduceJob = databases.getWorkflowDb().mapreduceJobs().create("", "", "");
    setMapreduceJobId(JackUtility.safeLongToInt(newMapreduceJob.getId()));
    save();
    __assoc_mapreduce_job.clearCache();
    return newMapreduceJob;
  }

  public String toString() {
    return "<MapreduceCounter"
        + " id: " + this.getId()
        + " mapreduce_job_id: " + getMapreduceJobId()
        + " group: " + getGroup()
        + " name: " + getName()
        + " value: " + getValue()
        + ">";
  }

  public void unsetAssociations() {
    unsetDatabaseReference();
    __assoc_mapreduce_job = null;
  }

  public int compareTo(MapreduceCounter that) {
    return Long.valueOf(this.getId()).compareTo(that.getId());
  }
  
  
  public static class Attributes extends AttributesWithId {
    
    public static final long serialVersionUID = -6207738094290552389L;

    // Fields
    private int __mapreduce_job_id;
    private String __group;
    private String __name;
    private long __value;

    public Attributes(long id) {
      super(id);
    }

    public Attributes(long id, final int mapreduce_job_id, final String group, final String name, final long value) {
      super(id);
      this.__mapreduce_job_id = mapreduce_job_id;
      this.__group = group;
      this.__name = name;
      this.__value = value;
    }

    public static Attributes newDefaultInstance(long id) {
      return new Attributes(id, 0, "", "", 0L);
    }

    public Attributes(long id, Map<Enum, Object> fieldsMap) {
      super(id);
      int mapreduce_job_id = (Integer)fieldsMap.get(MapreduceCounter._Fields.mapreduce_job_id);
      String group = (String)fieldsMap.get(MapreduceCounter._Fields.group);
      String name = (String)fieldsMap.get(MapreduceCounter._Fields.name);
      long value = (Long)fieldsMap.get(MapreduceCounter._Fields.value);
      this.__mapreduce_job_id = mapreduce_job_id;
      this.__group = group;
      this.__name = name;
      this.__value = value;
    }

    public Attributes(Attributes other) {
      super(other.getId());
      this.__mapreduce_job_id = other.getMapreduceJobId();
      this.__group = other.getGroup();
      this.__name = other.getName();
      this.__value = other.getValue();
    }

    public int getMapreduceJobId() {
      return __mapreduce_job_id;
    }

    public Attributes setMapreduceJobId(int newval) {
      this.__mapreduce_job_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getGroup() {
      return __group;
    }

    public Attributes setGroup(String newval) {
      this.__group = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getName() {
      return __name;
    }

    public Attributes setName(String newval) {
      this.__name = newval;
      cachedHashCode = 0;
      return this;
    }

    public long getValue() {
      return __value;
    }

    public Attributes setValue(long newval) {
      this.__value = newval;
      cachedHashCode = 0;
      return this;
    }

    public void setField(_Fields field, Object value) {
      switch (field) {
        case mapreduce_job_id:
          setMapreduceJobId((Integer)value);
          break;
        case group:
          setGroup((String)value);
          break;
        case name:
          setName((String)value);
          break;
        case value:
          setValue((Long)value);
          break;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }
    }

    public void setField(String fieldName, Object value) {
      if (fieldName.equals("mapreduce_job_id")) {
        setMapreduceJobId((Integer)value);
        return;
      }
      if (fieldName.equals("group")) {
        setGroup((String)value);
        return;
      }
      if (fieldName.equals("name")) {
        setName((String)value);
        return;
      }
      if (fieldName.equals("value")) {
        setValue((Long)value);
        return;
      }
      throw new IllegalStateException("Invalid field: " + fieldName);
    }

    public static Class getFieldType(_Fields field) {
      switch (field) {
        case mapreduce_job_id:
          return int.class;
        case group:
          return String.class;
        case name:
          return String.class;
        case value:
          return long.class;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }    
    }

    public static Class getFieldType(String fieldName) {    
      if (fieldName.equals("mapreduce_job_id")) {
        return int.class;
      }
      if (fieldName.equals("group")) {
        return String.class;
      }
      if (fieldName.equals("name")) {
        return String.class;
      }
      if (fieldName.equals("value")) {
        return long.class;
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    @Override
    public Object getField(String fieldName) {
      if (fieldName.equals("id")) {
        return getId();
      }
      if (fieldName.equals("mapreduce_job_id")) {
        return getMapreduceJobId();
      }
      if (fieldName.equals("group")) {
        return getGroup();
      }
      if (fieldName.equals("name")) {
        return getName();
      }
      if (fieldName.equals("value")) {
        return getValue();
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    public Object getField(_Fields field) {
      switch (field) {
        case mapreduce_job_id:
          return getMapreduceJobId();
        case group:
          return getGroup();
        case name:
          return getName();
        case value:
          return getValue();
      }
      throw new IllegalStateException("Invalid field: " + field);
    }

    public boolean hasField(String fieldName) {
      if (fieldName.equals("id")) {
        return true;
      }
      if (fieldName.equals("mapreduce_job_id")) {
        return true;
      }
      if (fieldName.equals("group")) {
        return true;
      }
      if (fieldName.equals("name")) {
        return true;
      }
      if (fieldName.equals("value")) {
        return true;
      }
      return false;
    }

    public static Object getDefaultValue(_Fields field) {
      switch (field) {
        case mapreduce_job_id:
          return null;
        case group:
          return null;
        case name:
          return null;
        case value:
          return null;
      }
      throw new IllegalStateException("Invalid field: " + field);
    }
    
    @Override
    public Set<Enum> getFieldSet() {
      Set set = EnumSet.allOf(_Fields.class);
      return set;
    }
    
    public String toString() {
      return "<MapreduceCounter.Attributes"
          + " mapreduce_job_id: " + getMapreduceJobId()
          + " group: " + getGroup()
          + " name: " + getName()
          + " value: " + getValue()
          + ">";
    }
  }

  public static class Id implements ModelIdWrapper<MapreduceCounter.Id> {
    public static final long serialVersionUID = 1L;

    private final long id;

    public Id(Long id) {
      this.id = id;
    }

    @Override
    public Long getId() {
      return id;
    }

    @Override
    public int compareTo(Id other) {
      return this.getId().compareTo(other.getId());
    }

    @Override
    public boolean equals(Object other) {
      if (other instanceof Id) {
        return this.getId().equals(((Id)other).getId());
      }
      return false;
    }

    @Override
    public int hashCode() {
      return this.getId().hashCode();
    }

    @Override
    public String toString() {
      return "<MapreduceCounter.Id: " + this.getId() + ">";
    }
  }

  public static Set<Attributes> convertToAttributesSet(Collection<MapreduceCounter> models) {
    return models.stream()
        .map(MapreduceCounter::getAttributes)
        .collect(Collectors.toSet());
  }

  public static class AssociationMetadata implements IModelAssociationMetadata {

    private List<IAssociationMetadata> meta = new ArrayList<>();

    public AssociationMetadata(){
      meta.add(new DefaultAssociationMetadata(AssociationType.BELONGS_TO, MapreduceCounter.class, MapreduceJob.class, "mapreduce_job_id"));
    }

    @Override
    public List<IAssociationMetadata> getAssociationMetadata() {
      return meta;
    }
  }

}
