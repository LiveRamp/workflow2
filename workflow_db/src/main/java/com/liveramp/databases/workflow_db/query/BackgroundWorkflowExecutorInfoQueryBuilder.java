/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.query;

import java.util.Collection;

import com.rapleaf.jack.queries.AbstractQueryBuilder;
import com.rapleaf.jack.queries.Column;
import com.rapleaf.jack.queries.FieldSelector;
import com.rapleaf.jack.queries.where_operators.IWhereOperator;
import com.rapleaf.jack.queries.where_operators.JackMatchers;
import com.rapleaf.jack.queries.WhereConstraint;
import com.rapleaf.jack.queries.QueryOrder;
import com.rapleaf.jack.queries.OrderCriterion;
import com.rapleaf.jack.queries.LimitCriterion;
import com.liveramp.databases.workflow_db.iface.IBackgroundWorkflowExecutorInfoPersistence;
import com.liveramp.databases.workflow_db.models.BackgroundWorkflowExecutorInfo;


public class BackgroundWorkflowExecutorInfoQueryBuilder extends AbstractQueryBuilder<BackgroundWorkflowExecutorInfo> {

  public BackgroundWorkflowExecutorInfoQueryBuilder(IBackgroundWorkflowExecutorInfoPersistence caller) {
    super(caller);
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder select(BackgroundWorkflowExecutorInfo._Fields... fields) {
    for (BackgroundWorkflowExecutorInfo._Fields field : fields){
      addSelectedField(new FieldSelector(field));
    }
    return this;
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder selectAgg(FieldSelector... aggregatedFields) {
    addSelectedFields(aggregatedFields);
    return this;
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder id(Long value) {
    addId(value);
    return this;
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder idIn(Collection<Long> values) {
    addIds(values);
    return this;
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder whereId(IWhereOperator<Long> operator) {
    addWhereConstraint(new WhereConstraint<>(Column.fromId(null), operator, null));
    return this;
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder limit(int offset, int nResults) {
    setLimit(new LimitCriterion(offset, nResults));
    return this;
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder limit(int nResults) {
    setLimit(new LimitCriterion(nResults));
    return this;
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder groupBy(BackgroundWorkflowExecutorInfo._Fields... fields) {
    addGroupByFields(fields);
    return this;
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder order() {
    this.addOrder(new OrderCriterion(QueryOrder.ASC));
    return this;
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder order(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(queryOrder));
    return this;
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder orderById() {
    this.addOrder(new OrderCriterion(QueryOrder.ASC));
    return this;
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder orderById(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(queryOrder));
    return this;
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder host(String value) {
    addWhereConstraint(new WhereConstraint<>(BackgroundWorkflowExecutorInfo._Fields.host, JackMatchers.equalTo(value)));
    return this;
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder whereHost(IWhereOperator<String> operator) {
    addWhereConstraint(new WhereConstraint<>(BackgroundWorkflowExecutorInfo._Fields.host, operator));
    return this;
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder orderByHost() {
    this.addOrder(new OrderCriterion(BackgroundWorkflowExecutorInfo._Fields.host, QueryOrder.ASC));
    return this;
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder orderByHost(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(BackgroundWorkflowExecutorInfo._Fields.host, queryOrder));
    return this;
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder status(Integer value) {
    addWhereConstraint(new WhereConstraint<>(BackgroundWorkflowExecutorInfo._Fields.status, JackMatchers.equalTo(value)));
    return this;
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder whereStatus(IWhereOperator<Integer> operator) {
    addWhereConstraint(new WhereConstraint<>(BackgroundWorkflowExecutorInfo._Fields.status, operator));
    return this;
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder orderByStatus() {
    this.addOrder(new OrderCriterion(BackgroundWorkflowExecutorInfo._Fields.status, QueryOrder.ASC));
    return this;
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder orderByStatus(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(BackgroundWorkflowExecutorInfo._Fields.status, queryOrder));
    return this;
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder lastHeartbeat(Long value) {
    addWhereConstraint(new WhereConstraint<>(BackgroundWorkflowExecutorInfo._Fields.last_heartbeat, JackMatchers.equalTo(value)));
    return this;
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder whereLastHeartbeat(IWhereOperator<Long> operator) {
    addWhereConstraint(new WhereConstraint<>(BackgroundWorkflowExecutorInfo._Fields.last_heartbeat, operator));
    return this;
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder orderByLastHeartbeat() {
    this.addOrder(new OrderCriterion(BackgroundWorkflowExecutorInfo._Fields.last_heartbeat, QueryOrder.ASC));
    return this;
  }

  public BackgroundWorkflowExecutorInfoQueryBuilder orderByLastHeartbeat(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(BackgroundWorkflowExecutorInfo._Fields.last_heartbeat, queryOrder));
    return this;
  }
}
