
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.impl;

import java.sql.SQLRecoverableException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Collection;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Timestamp;

import com.rapleaf.jack.AbstractDatabaseModel;
import com.rapleaf.jack.BaseDatabaseConnection;
import com.rapleaf.jack.queries.WhereConstraint;
import com.rapleaf.jack.queries.WhereClause;
import com.rapleaf.jack.util.JackUtility;
import com.liveramp.databases.workflow_db.iface.IMapreduceJobPersistence;
import com.liveramp.databases.workflow_db.models.MapreduceJob;
import com.liveramp.databases.workflow_db.query.MapreduceJobQueryBuilder;
import com.liveramp.databases.workflow_db.query.MapreduceJobDeleteBuilder;

import com.liveramp.databases.workflow_db.IDatabases;

public class BaseMapreduceJobPersistenceImpl extends AbstractDatabaseModel<MapreduceJob> implements IMapreduceJobPersistence {
  private final IDatabases databases;

  public BaseMapreduceJobPersistenceImpl(BaseDatabaseConnection conn, IDatabases databases) {
    super(conn, "mapreduce_jobs", Arrays.<String>asList("step_attempt_id", "job_identifier", "job_name", "tracking_url", "avg_map_duration", "median_map_duration", "max_map_duration", "min_map_duration", "stdev_map_duration", "avg_reduce_duration", "median_reduce_duration", "max_reduce_duration", "min_reduce_duration", "stdev_reduce_duration", "tasks_sampled", "tasks_failed_in_sample"));
    this.databases = databases;
  }

  @Override
  public MapreduceJob create(Map<Enum, Object> fieldsMap) throws IOException {
    Long step_attempt_id = (Long) fieldsMap.get(MapreduceJob._Fields.step_attempt_id);
    String job_identifier = (String) fieldsMap.get(MapreduceJob._Fields.job_identifier);
    String job_name = (String) fieldsMap.get(MapreduceJob._Fields.job_name);
    String tracking_url = (String) fieldsMap.get(MapreduceJob._Fields.tracking_url);
    Long avg_map_duration = (Long) fieldsMap.get(MapreduceJob._Fields.avg_map_duration);
    Long median_map_duration = (Long) fieldsMap.get(MapreduceJob._Fields.median_map_duration);
    Long max_map_duration = (Long) fieldsMap.get(MapreduceJob._Fields.max_map_duration);
    Long min_map_duration = (Long) fieldsMap.get(MapreduceJob._Fields.min_map_duration);
    Long stdev_map_duration = (Long) fieldsMap.get(MapreduceJob._Fields.stdev_map_duration);
    Long avg_reduce_duration = (Long) fieldsMap.get(MapreduceJob._Fields.avg_reduce_duration);
    Long median_reduce_duration = (Long) fieldsMap.get(MapreduceJob._Fields.median_reduce_duration);
    Long max_reduce_duration = (Long) fieldsMap.get(MapreduceJob._Fields.max_reduce_duration);
    Long min_reduce_duration = (Long) fieldsMap.get(MapreduceJob._Fields.min_reduce_duration);
    Long stdev_reduce_duration = (Long) fieldsMap.get(MapreduceJob._Fields.stdev_reduce_duration);
    Integer tasks_sampled = (Integer) fieldsMap.get(MapreduceJob._Fields.tasks_sampled);
    Integer tasks_failed_in_sample = (Integer) fieldsMap.get(MapreduceJob._Fields.tasks_failed_in_sample);
    return create(step_attempt_id, job_identifier, job_name, tracking_url, avg_map_duration, median_map_duration, max_map_duration, min_map_duration, stdev_map_duration, avg_reduce_duration, median_reduce_duration, max_reduce_duration, min_reduce_duration, stdev_reduce_duration, tasks_sampled, tasks_failed_in_sample);
  }

  public MapreduceJob create(final Long step_attempt_id, final String job_identifier, final String job_name, final String tracking_url, final Long avg_map_duration, final Long median_map_duration, final Long max_map_duration, final Long min_map_duration, final Long stdev_map_duration, final Long avg_reduce_duration, final Long median_reduce_duration, final Long max_reduce_duration, final Long min_reduce_duration, final Long stdev_reduce_duration, final Integer tasks_sampled, final Integer tasks_failed_in_sample) throws IOException {
    StatementCreator statementCreator = new StatementCreator() {
      private final List<String> nonNullFields = new ArrayList<>();
      private final List<AttrSetter> statementSetters = new ArrayList<>();

      {
        int index = 1;

        if (step_attempt_id != null) {
          nonNullFields.add("step_attempt_id");
          int fieldIndex0 = index++;
          statementSetters.add(stmt -> stmt.setLong(fieldIndex0, step_attempt_id));
        }

        nonNullFields.add("job_identifier");
        int fieldIndex1 = index++;
        statementSetters.add(stmt -> stmt.setString(fieldIndex1, job_identifier));

        nonNullFields.add("job_name");
        int fieldIndex2 = index++;
        statementSetters.add(stmt -> stmt.setString(fieldIndex2, job_name));

        nonNullFields.add("tracking_url");
        int fieldIndex3 = index++;
        statementSetters.add(stmt -> stmt.setString(fieldIndex3, tracking_url));

        if (avg_map_duration != null) {
          nonNullFields.add("avg_map_duration");
          int fieldIndex4 = index++;
          statementSetters.add(stmt -> stmt.setLong(fieldIndex4, avg_map_duration));
        }

        if (median_map_duration != null) {
          nonNullFields.add("median_map_duration");
          int fieldIndex5 = index++;
          statementSetters.add(stmt -> stmt.setLong(fieldIndex5, median_map_duration));
        }

        if (max_map_duration != null) {
          nonNullFields.add("max_map_duration");
          int fieldIndex6 = index++;
          statementSetters.add(stmt -> stmt.setLong(fieldIndex6, max_map_duration));
        }

        if (min_map_duration != null) {
          nonNullFields.add("min_map_duration");
          int fieldIndex7 = index++;
          statementSetters.add(stmt -> stmt.setLong(fieldIndex7, min_map_duration));
        }

        if (stdev_map_duration != null) {
          nonNullFields.add("stdev_map_duration");
          int fieldIndex8 = index++;
          statementSetters.add(stmt -> stmt.setLong(fieldIndex8, stdev_map_duration));
        }

        if (avg_reduce_duration != null) {
          nonNullFields.add("avg_reduce_duration");
          int fieldIndex9 = index++;
          statementSetters.add(stmt -> stmt.setLong(fieldIndex9, avg_reduce_duration));
        }

        if (median_reduce_duration != null) {
          nonNullFields.add("median_reduce_duration");
          int fieldIndex10 = index++;
          statementSetters.add(stmt -> stmt.setLong(fieldIndex10, median_reduce_duration));
        }

        if (max_reduce_duration != null) {
          nonNullFields.add("max_reduce_duration");
          int fieldIndex11 = index++;
          statementSetters.add(stmt -> stmt.setLong(fieldIndex11, max_reduce_duration));
        }

        if (min_reduce_duration != null) {
          nonNullFields.add("min_reduce_duration");
          int fieldIndex12 = index++;
          statementSetters.add(stmt -> stmt.setLong(fieldIndex12, min_reduce_duration));
        }

        if (stdev_reduce_duration != null) {
          nonNullFields.add("stdev_reduce_duration");
          int fieldIndex13 = index++;
          statementSetters.add(stmt -> stmt.setLong(fieldIndex13, stdev_reduce_duration));
        }

        if (tasks_sampled != null) {
          nonNullFields.add("tasks_sampled");
          int fieldIndex14 = index++;
          statementSetters.add(stmt -> stmt.setInt(fieldIndex14, tasks_sampled));
        }

        if (tasks_failed_in_sample != null) {
          nonNullFields.add("tasks_failed_in_sample");
          int fieldIndex15 = index++;
          statementSetters.add(stmt -> stmt.setInt(fieldIndex15, tasks_failed_in_sample));
        }
      }

      @Override
      public String getStatement() {
        return getInsertStatement(nonNullFields);
      }

      @Override
      public void setStatement(PreparedStatement statement) throws SQLException {
        for (AttrSetter setter : statementSetters) {
          setter.set(statement);
        }
      }
    };

    long __id = realCreate(statementCreator);
    MapreduceJob newInst = new MapreduceJob(__id, step_attempt_id, job_identifier, job_name, tracking_url, avg_map_duration, median_map_duration, max_map_duration, min_map_duration, stdev_map_duration, avg_reduce_duration, median_reduce_duration, max_reduce_duration, min_reduce_duration, stdev_reduce_duration, tasks_sampled, tasks_failed_in_sample, databases);
    newInst.setCreated(true);
    cachedById.put(__id, newInst);
    clearForeignKeyCache();
    return newInst;
  }

  public MapreduceJob create(final String job_identifier, final String job_name, final String tracking_url) throws IOException {
    StatementCreator statementCreator = new StatementCreator() {
      private final List<String> nonNullFields = new ArrayList<>();
      private final List<AttrSetter> statementSetters = new ArrayList<>();

      {
        int index = 1;

        nonNullFields.add("job_identifier");
        int fieldIndex1 = index++;
        statementSetters.add(stmt -> stmt.setString(fieldIndex1, job_identifier));

        nonNullFields.add("job_name");
        int fieldIndex2 = index++;
        statementSetters.add(stmt -> stmt.setString(fieldIndex2, job_name));

        nonNullFields.add("tracking_url");
        int fieldIndex3 = index++;
        statementSetters.add(stmt -> stmt.setString(fieldIndex3, tracking_url));
      }

      @Override
      public String getStatement() {
        return getInsertStatement(nonNullFields);
      }

      @Override
      public void setStatement(PreparedStatement statement) throws SQLException {
        for (AttrSetter setter : statementSetters) {
          setter.set(statement);
        }
      }
    };

    long __id = realCreate(statementCreator);
    MapreduceJob newInst = new MapreduceJob(__id, null, job_identifier, job_name, tracking_url, null, null, null, null, null, null, null, null, null, null, null, null, databases);
    newInst.setCreated(true);
    cachedById.put(__id, newInst);
    clearForeignKeyCache();
    return newInst;
  }

  public MapreduceJob createDefaultInstance() throws IOException {
    return create("", "", "");
  }

  public List<MapreduceJob> find(Map<Enum, Object> fieldsMap) throws IOException {
    return find(null, fieldsMap);
  }

  public List<MapreduceJob> find(Collection<Long> ids, Map<Enum, Object> fieldsMap) throws IOException {
    List<MapreduceJob> foundList = new ArrayList<>();

    if (fieldsMap == null || fieldsMap.isEmpty()) {
      return foundList;
    }

    StringBuilder statementString = new StringBuilder();
    statementString.append("SELECT * FROM mapreduce_jobs WHERE (");
    List<Object> nonNullValues = new ArrayList<>();
    List<MapreduceJob._Fields> nonNullValueFields = new ArrayList<>();

    Iterator<Map.Entry<Enum, Object>> iter = fieldsMap.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Enum, Object> entry = iter.next();
      Enum field = entry.getKey();
      Object value = entry.getValue();

      String queryValue = value != null ? " = ? " : " IS NULL";
      if (value != null) {
        nonNullValueFields.add((MapreduceJob._Fields) field);
        nonNullValues.add(value);
      }

      statementString.append(field).append(queryValue);
      if (iter.hasNext()) {
        statementString.append(" AND ");
      }
    }
    if (ids != null) statementString.append(" AND ").append(getIdSetCondition(ids));
    statementString.append(")");

    int retryCount = 0;
    PreparedStatement preparedStatement;

    while (true) {
      preparedStatement = getPreparedStatement(statementString.toString());

      for (int i = 0; i < nonNullValues.size(); i++) {
        MapreduceJob._Fields field = nonNullValueFields.get(i);
        try {
          switch (field) {
            case step_attempt_id:
              preparedStatement.setLong(i+1, (Long) nonNullValues.get(i));
              break;
            case job_identifier:
              preparedStatement.setString(i+1, (String) nonNullValues.get(i));
              break;
            case job_name:
              preparedStatement.setString(i+1, (String) nonNullValues.get(i));
              break;
            case tracking_url:
              preparedStatement.setString(i+1, (String) nonNullValues.get(i));
              break;
            case avg_map_duration:
              preparedStatement.setLong(i+1, (Long) nonNullValues.get(i));
              break;
            case median_map_duration:
              preparedStatement.setLong(i+1, (Long) nonNullValues.get(i));
              break;
            case max_map_duration:
              preparedStatement.setLong(i+1, (Long) nonNullValues.get(i));
              break;
            case min_map_duration:
              preparedStatement.setLong(i+1, (Long) nonNullValues.get(i));
              break;
            case stdev_map_duration:
              preparedStatement.setLong(i+1, (Long) nonNullValues.get(i));
              break;
            case avg_reduce_duration:
              preparedStatement.setLong(i+1, (Long) nonNullValues.get(i));
              break;
            case median_reduce_duration:
              preparedStatement.setLong(i+1, (Long) nonNullValues.get(i));
              break;
            case max_reduce_duration:
              preparedStatement.setLong(i+1, (Long) nonNullValues.get(i));
              break;
            case min_reduce_duration:
              preparedStatement.setLong(i+1, (Long) nonNullValues.get(i));
              break;
            case stdev_reduce_duration:
              preparedStatement.setLong(i+1, (Long) nonNullValues.get(i));
              break;
            case tasks_sampled:
              preparedStatement.setInt(i+1, (Integer) nonNullValues.get(i));
              break;
            case tasks_failed_in_sample:
              preparedStatement.setInt(i+1, (Integer) nonNullValues.get(i));
              break;
          }
        } catch (SQLException e) {
          throw new IOException(e);
        }
      }

      try {
        executeQuery(foundList, preparedStatement);
        return foundList;
      } catch (SQLRecoverableException e) {
        if (++retryCount > AbstractDatabaseModel.MAX_CONNECTION_RETRIES) {
          throw new IOException(e);
        }
      } catch (SQLException e) {
        throw new IOException(e);
      }
    }
  }

  @Override
  protected void setStatementParameters(PreparedStatement preparedStatement, WhereClause whereClause) throws IOException {
    int index = 0;
    for (WhereConstraint constraint : whereClause.getWhereConstraints()) {
      for (Object parameter : constraint.getParameters()) {
        if (parameter == null) {
          continue;
        }
        try {
          if (constraint.isId()) {
            preparedStatement.setLong(++index, (Long)parameter);
          } else {
            MapreduceJob._Fields field = (MapreduceJob._Fields)constraint.getField();
            switch (field) {
              case step_attempt_id:
                preparedStatement.setLong(++index, (Long) parameter);
                break;
              case job_identifier:
                preparedStatement.setString(++index, (String) parameter);
                break;
              case job_name:
                preparedStatement.setString(++index, (String) parameter);
                break;
              case tracking_url:
                preparedStatement.setString(++index, (String) parameter);
                break;
              case avg_map_duration:
                preparedStatement.setLong(++index, (Long) parameter);
                break;
              case median_map_duration:
                preparedStatement.setLong(++index, (Long) parameter);
                break;
              case max_map_duration:
                preparedStatement.setLong(++index, (Long) parameter);
                break;
              case min_map_duration:
                preparedStatement.setLong(++index, (Long) parameter);
                break;
              case stdev_map_duration:
                preparedStatement.setLong(++index, (Long) parameter);
                break;
              case avg_reduce_duration:
                preparedStatement.setLong(++index, (Long) parameter);
                break;
              case median_reduce_duration:
                preparedStatement.setLong(++index, (Long) parameter);
                break;
              case max_reduce_duration:
                preparedStatement.setLong(++index, (Long) parameter);
                break;
              case min_reduce_duration:
                preparedStatement.setLong(++index, (Long) parameter);
                break;
              case stdev_reduce_duration:
                preparedStatement.setLong(++index, (Long) parameter);
                break;
              case tasks_sampled:
                preparedStatement.setInt(++index, (Integer) parameter);
                break;
              case tasks_failed_in_sample:
                preparedStatement.setInt(++index, (Integer) parameter);
                break;
            }
          }
        } catch (SQLException e) {
          throw new IOException(e);
        }
      }
    }
  }

  @Override
  protected void setAttrs(MapreduceJob model, PreparedStatement stmt, boolean setNull) throws SQLException {
    int index = 1;
    if (setNull && model.getStepAttemptId() == null) {
      stmt.setNull(index++, java.sql.Types.INTEGER);
    } else if (model.getStepAttemptId() != null) {
      stmt.setLong(index++, model.getStepAttemptId());
    }
    {
      stmt.setString(index++, model.getJobIdentifier());
    }
    {
      stmt.setString(index++, model.getJobName());
    }
    {
      stmt.setString(index++, model.getTrackingUrl());
    }
    if (setNull && model.getAvgMapDuration() == null) {
      stmt.setNull(index++, java.sql.Types.INTEGER);
    } else if (model.getAvgMapDuration() != null) {
      stmt.setLong(index++, model.getAvgMapDuration());
    }
    if (setNull && model.getMedianMapDuration() == null) {
      stmt.setNull(index++, java.sql.Types.INTEGER);
    } else if (model.getMedianMapDuration() != null) {
      stmt.setLong(index++, model.getMedianMapDuration());
    }
    if (setNull && model.getMaxMapDuration() == null) {
      stmt.setNull(index++, java.sql.Types.INTEGER);
    } else if (model.getMaxMapDuration() != null) {
      stmt.setLong(index++, model.getMaxMapDuration());
    }
    if (setNull && model.getMinMapDuration() == null) {
      stmt.setNull(index++, java.sql.Types.INTEGER);
    } else if (model.getMinMapDuration() != null) {
      stmt.setLong(index++, model.getMinMapDuration());
    }
    if (setNull && model.getStdevMapDuration() == null) {
      stmt.setNull(index++, java.sql.Types.INTEGER);
    } else if (model.getStdevMapDuration() != null) {
      stmt.setLong(index++, model.getStdevMapDuration());
    }
    if (setNull && model.getAvgReduceDuration() == null) {
      stmt.setNull(index++, java.sql.Types.INTEGER);
    } else if (model.getAvgReduceDuration() != null) {
      stmt.setLong(index++, model.getAvgReduceDuration());
    }
    if (setNull && model.getMedianReduceDuration() == null) {
      stmt.setNull(index++, java.sql.Types.INTEGER);
    } else if (model.getMedianReduceDuration() != null) {
      stmt.setLong(index++, model.getMedianReduceDuration());
    }
    if (setNull && model.getMaxReduceDuration() == null) {
      stmt.setNull(index++, java.sql.Types.INTEGER);
    } else if (model.getMaxReduceDuration() != null) {
      stmt.setLong(index++, model.getMaxReduceDuration());
    }
    if (setNull && model.getMinReduceDuration() == null) {
      stmt.setNull(index++, java.sql.Types.INTEGER);
    } else if (model.getMinReduceDuration() != null) {
      stmt.setLong(index++, model.getMinReduceDuration());
    }
    if (setNull && model.getStdevReduceDuration() == null) {
      stmt.setNull(index++, java.sql.Types.INTEGER);
    } else if (model.getStdevReduceDuration() != null) {
      stmt.setLong(index++, model.getStdevReduceDuration());
    }
    if (setNull && model.getTasksSampled() == null) {
      stmt.setNull(index++, java.sql.Types.INTEGER);
    } else if (model.getTasksSampled() != null) {
      stmt.setInt(index++, model.getTasksSampled());
    }
    if (setNull && model.getTasksFailedInSample() == null) {
      stmt.setNull(index++, java.sql.Types.INTEGER);
    } else if (model.getTasksFailedInSample() != null) {
      stmt.setInt(index++, model.getTasksFailedInSample());
    }
    stmt.setLong(index, model.getId());
  }

  @Override
  protected MapreduceJob instanceFromResultSet(ResultSet rs, Collection<Enum> selectedFields) throws SQLException {
    boolean allFields = selectedFields == null || selectedFields.isEmpty();
    long id = rs.getLong("id");
    return new MapreduceJob(id,
      allFields || selectedFields.contains(MapreduceJob._Fields.step_attempt_id) ? getLongOrNull(rs, "step_attempt_id") : null,
      allFields || selectedFields.contains(MapreduceJob._Fields.job_identifier) ? rs.getString("job_identifier") : "",
      allFields || selectedFields.contains(MapreduceJob._Fields.job_name) ? rs.getString("job_name") : "",
      allFields || selectedFields.contains(MapreduceJob._Fields.tracking_url) ? rs.getString("tracking_url") : "",
      allFields || selectedFields.contains(MapreduceJob._Fields.avg_map_duration) ? getLongOrNull(rs, "avg_map_duration") : null,
      allFields || selectedFields.contains(MapreduceJob._Fields.median_map_duration) ? getLongOrNull(rs, "median_map_duration") : null,
      allFields || selectedFields.contains(MapreduceJob._Fields.max_map_duration) ? getLongOrNull(rs, "max_map_duration") : null,
      allFields || selectedFields.contains(MapreduceJob._Fields.min_map_duration) ? getLongOrNull(rs, "min_map_duration") : null,
      allFields || selectedFields.contains(MapreduceJob._Fields.stdev_map_duration) ? getLongOrNull(rs, "stdev_map_duration") : null,
      allFields || selectedFields.contains(MapreduceJob._Fields.avg_reduce_duration) ? getLongOrNull(rs, "avg_reduce_duration") : null,
      allFields || selectedFields.contains(MapreduceJob._Fields.median_reduce_duration) ? getLongOrNull(rs, "median_reduce_duration") : null,
      allFields || selectedFields.contains(MapreduceJob._Fields.max_reduce_duration) ? getLongOrNull(rs, "max_reduce_duration") : null,
      allFields || selectedFields.contains(MapreduceJob._Fields.min_reduce_duration) ? getLongOrNull(rs, "min_reduce_duration") : null,
      allFields || selectedFields.contains(MapreduceJob._Fields.stdev_reduce_duration) ? getLongOrNull(rs, "stdev_reduce_duration") : null,
      allFields || selectedFields.contains(MapreduceJob._Fields.tasks_sampled) ? getIntOrNull(rs, "tasks_sampled") : null,
      allFields || selectedFields.contains(MapreduceJob._Fields.tasks_failed_in_sample) ? getIntOrNull(rs, "tasks_failed_in_sample") : null,
      databases
    );
  }

  public List<MapreduceJob> findByStepAttemptId(final Long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(MapreduceJob._Fields.step_attempt_id, value));
  }

  public List<MapreduceJob> findByJobIdentifier(final String value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(MapreduceJob._Fields.job_identifier, value));
  }

  public List<MapreduceJob> findByJobName(final String value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(MapreduceJob._Fields.job_name, value));
  }

  public List<MapreduceJob> findByTrackingUrl(final String value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(MapreduceJob._Fields.tracking_url, value));
  }

  public List<MapreduceJob> findByAvgMapDuration(final Long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(MapreduceJob._Fields.avg_map_duration, value));
  }

  public List<MapreduceJob> findByMedianMapDuration(final Long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(MapreduceJob._Fields.median_map_duration, value));
  }

  public List<MapreduceJob> findByMaxMapDuration(final Long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(MapreduceJob._Fields.max_map_duration, value));
  }

  public List<MapreduceJob> findByMinMapDuration(final Long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(MapreduceJob._Fields.min_map_duration, value));
  }

  public List<MapreduceJob> findByStdevMapDuration(final Long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(MapreduceJob._Fields.stdev_map_duration, value));
  }

  public List<MapreduceJob> findByAvgReduceDuration(final Long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(MapreduceJob._Fields.avg_reduce_duration, value));
  }

  public List<MapreduceJob> findByMedianReduceDuration(final Long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(MapreduceJob._Fields.median_reduce_duration, value));
  }

  public List<MapreduceJob> findByMaxReduceDuration(final Long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(MapreduceJob._Fields.max_reduce_duration, value));
  }

  public List<MapreduceJob> findByMinReduceDuration(final Long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(MapreduceJob._Fields.min_reduce_duration, value));
  }

  public List<MapreduceJob> findByStdevReduceDuration(final Long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(MapreduceJob._Fields.stdev_reduce_duration, value));
  }

  public List<MapreduceJob> findByTasksSampled(final Integer value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(MapreduceJob._Fields.tasks_sampled, value));
  }

  public List<MapreduceJob> findByTasksFailedInSample(final Integer value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(MapreduceJob._Fields.tasks_failed_in_sample, value));
  }

  public MapreduceJobQueryBuilder query() {
    return new MapreduceJobQueryBuilder(this);
  }

  public MapreduceJobDeleteBuilder delete() {
    return new MapreduceJobDeleteBuilder(this);
  }
}
