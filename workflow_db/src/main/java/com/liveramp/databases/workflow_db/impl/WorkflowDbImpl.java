
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.impl;

import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Set;
import java.util.Collection;
import java.util.List;

import com.liveramp.databases.workflow_db.IWorkflowDb;
import com.rapleaf.jack.LazyLoadPersistence;
import com.rapleaf.jack.queries.GenericInsertion;
import com.rapleaf.jack.queries.GenericQuery;
import com.rapleaf.jack.queries.GenericUpdate;
import com.rapleaf.jack.queries.GenericDeletion;
import com.rapleaf.jack.BaseDatabaseConnection;
import com.rapleaf.jack.queries.Records;
import com.rapleaf.jack.queries.Column;
import com.rapleaf.jack.queries.QueryFetcher;
import com.liveramp.databases.workflow_db.iface.IApplicationConfiguredNotificationPersistence;
import com.liveramp.databases.workflow_db.iface.IApplicationCounterSummaryPersistence;
import com.liveramp.databases.workflow_db.iface.IApplicationPersistence;
import com.liveramp.databases.workflow_db.iface.IBackgroundAttemptInfoPersistence;
import com.liveramp.databases.workflow_db.iface.IBackgroundStepAttemptInfoPersistence;
import com.liveramp.databases.workflow_db.iface.IBackgroundWorkflowExecutorInfoPersistence;
import com.liveramp.databases.workflow_db.iface.IConfiguredNotificationPersistence;
import com.liveramp.databases.workflow_db.iface.IDashboardApplicationPersistence;
import com.liveramp.databases.workflow_db.iface.IDashboardPersistence;
import com.liveramp.databases.workflow_db.iface.IExecutionTagPersistence;
import com.liveramp.databases.workflow_db.iface.IMapreduceCounterPersistence;
import com.liveramp.databases.workflow_db.iface.IMapreduceJobTaskExceptionPersistence;
import com.liveramp.databases.workflow_db.iface.IMapreduceJobPersistence;
import com.liveramp.databases.workflow_db.iface.IResourceRecordPersistence;
import com.liveramp.databases.workflow_db.iface.IResourceRootPersistence;
import com.liveramp.databases.workflow_db.iface.IStepAttemptDatastorePersistence;
import com.liveramp.databases.workflow_db.iface.IStepAttemptPersistence;
import com.liveramp.databases.workflow_db.iface.IStepDependencyPersistence;
import com.liveramp.databases.workflow_db.iface.IStepStatisticPersistence;
import com.liveramp.databases.workflow_db.iface.IUserDashboardPersistence;
import com.liveramp.databases.workflow_db.iface.IUserPersistence;
import com.liveramp.databases.workflow_db.iface.IWorkflowAlertMapreduceJobPersistence;
import com.liveramp.databases.workflow_db.iface.IWorkflowAlertWorkflowExecutionPersistence;
import com.liveramp.databases.workflow_db.iface.IWorkflowAlertPersistence;
import com.liveramp.databases.workflow_db.iface.IWorkflowAttemptConfiguredNotificationPersistence;
import com.liveramp.databases.workflow_db.iface.IWorkflowAttemptDatastorePersistence;
import com.liveramp.databases.workflow_db.iface.IWorkflowAttemptPersistence;
import com.liveramp.databases.workflow_db.iface.IWorkflowExecutionConfiguredNotificationPersistence;
import com.liveramp.databases.workflow_db.iface.IWorkflowExecutionPersistence;

import com.liveramp.databases.workflow_db.IDatabases;
import com.rapleaf.jack.tracking.PostQueryAction;

public class WorkflowDbImpl implements IWorkflowDb {

  private final BaseDatabaseConnection conn;
  private final IDatabases databases;
  private final PostQueryAction postQueryAction;
  private final LazyLoadPersistence<IApplicationConfiguredNotificationPersistence, IDatabases> application_configured_notifications;
  private final LazyLoadPersistence<IApplicationCounterSummaryPersistence, IDatabases> application_counter_summaries;
  private final LazyLoadPersistence<IApplicationPersistence, IDatabases> applications;
  private final LazyLoadPersistence<IBackgroundAttemptInfoPersistence, IDatabases> background_attempt_infos;
  private final LazyLoadPersistence<IBackgroundStepAttemptInfoPersistence, IDatabases> background_step_attempt_infos;
  private final LazyLoadPersistence<IBackgroundWorkflowExecutorInfoPersistence, IDatabases> background_workflow_executor_infos;
  private final LazyLoadPersistence<IConfiguredNotificationPersistence, IDatabases> configured_notifications;
  private final LazyLoadPersistence<IDashboardApplicationPersistence, IDatabases> dashboard_applications;
  private final LazyLoadPersistence<IDashboardPersistence, IDatabases> dashboards;
  private final LazyLoadPersistence<IExecutionTagPersistence, IDatabases> execution_tags;
  private final LazyLoadPersistence<IMapreduceCounterPersistence, IDatabases> mapreduce_counters;
  private final LazyLoadPersistence<IMapreduceJobTaskExceptionPersistence, IDatabases> mapreduce_job_task_exceptions;
  private final LazyLoadPersistence<IMapreduceJobPersistence, IDatabases> mapreduce_jobs;
  private final LazyLoadPersistence<IResourceRecordPersistence, IDatabases> resource_records;
  private final LazyLoadPersistence<IResourceRootPersistence, IDatabases> resource_roots;
  private final LazyLoadPersistence<IStepAttemptDatastorePersistence, IDatabases> step_attempt_datastores;
  private final LazyLoadPersistence<IStepAttemptPersistence, IDatabases> step_attempts;
  private final LazyLoadPersistence<IStepDependencyPersistence, IDatabases> step_dependencies;
  private final LazyLoadPersistence<IStepStatisticPersistence, IDatabases> step_statistics;
  private final LazyLoadPersistence<IUserDashboardPersistence, IDatabases> user_dashboards;
  private final LazyLoadPersistence<IUserPersistence, IDatabases> users;
  private final LazyLoadPersistence<IWorkflowAlertMapreduceJobPersistence, IDatabases> workflow_alert_mapreduce_jobs;
  private final LazyLoadPersistence<IWorkflowAlertWorkflowExecutionPersistence, IDatabases> workflow_alert_workflow_executions;
  private final LazyLoadPersistence<IWorkflowAlertPersistence, IDatabases> workflow_alerts;
  private final LazyLoadPersistence<IWorkflowAttemptConfiguredNotificationPersistence, IDatabases> workflow_attempt_configured_notifications;
  private final LazyLoadPersistence<IWorkflowAttemptDatastorePersistence, IDatabases> workflow_attempt_datastores;
  private final LazyLoadPersistence<IWorkflowAttemptPersistence, IDatabases> workflow_attempts;
  private final LazyLoadPersistence<IWorkflowExecutionConfiguredNotificationPersistence, IDatabases> workflow_execution_configured_notifications;
  private final LazyLoadPersistence<IWorkflowExecutionPersistence, IDatabases> workflow_executions;

  private boolean allowBulkOperation = false;

  public WorkflowDbImpl(BaseDatabaseConnection conn, IDatabases databases, PostQueryAction postQueryAction) {
    this.conn = conn;
    this.databases = databases;
    this.postQueryAction = postQueryAction;
    this.application_configured_notifications = new LazyLoadPersistence<>(conn, databases, BaseApplicationConfiguredNotificationPersistenceImpl::new);
    this.application_counter_summaries = new LazyLoadPersistence<>(conn, databases, BaseApplicationCounterSummaryPersistenceImpl::new);
    this.applications = new LazyLoadPersistence<>(conn, databases, BaseApplicationPersistenceImpl::new);
    this.background_attempt_infos = new LazyLoadPersistence<>(conn, databases, BaseBackgroundAttemptInfoPersistenceImpl::new);
    this.background_step_attempt_infos = new LazyLoadPersistence<>(conn, databases, BaseBackgroundStepAttemptInfoPersistenceImpl::new);
    this.background_workflow_executor_infos = new LazyLoadPersistence<>(conn, databases, BaseBackgroundWorkflowExecutorInfoPersistenceImpl::new);
    this.configured_notifications = new LazyLoadPersistence<>(conn, databases, BaseConfiguredNotificationPersistenceImpl::new);
    this.dashboard_applications = new LazyLoadPersistence<>(conn, databases, BaseDashboardApplicationPersistenceImpl::new);
    this.dashboards = new LazyLoadPersistence<>(conn, databases, BaseDashboardPersistenceImpl::new);
    this.execution_tags = new LazyLoadPersistence<>(conn, databases, BaseExecutionTagPersistenceImpl::new);
    this.mapreduce_counters = new LazyLoadPersistence<>(conn, databases, BaseMapreduceCounterPersistenceImpl::new);
    this.mapreduce_job_task_exceptions = new LazyLoadPersistence<>(conn, databases, BaseMapreduceJobTaskExceptionPersistenceImpl::new);
    this.mapreduce_jobs = new LazyLoadPersistence<>(conn, databases, BaseMapreduceJobPersistenceImpl::new);
    this.resource_records = new LazyLoadPersistence<>(conn, databases, BaseResourceRecordPersistenceImpl::new);
    this.resource_roots = new LazyLoadPersistence<>(conn, databases, BaseResourceRootPersistenceImpl::new);
    this.step_attempt_datastores = new LazyLoadPersistence<>(conn, databases, BaseStepAttemptDatastorePersistenceImpl::new);
    this.step_attempts = new LazyLoadPersistence<>(conn, databases, BaseStepAttemptPersistenceImpl::new);
    this.step_dependencies = new LazyLoadPersistence<>(conn, databases, BaseStepDependencyPersistenceImpl::new);
    this.step_statistics = new LazyLoadPersistence<>(conn, databases, BaseStepStatisticPersistenceImpl::new);
    this.user_dashboards = new LazyLoadPersistence<>(conn, databases, BaseUserDashboardPersistenceImpl::new);
    this.users = new LazyLoadPersistence<>(conn, databases, BaseUserPersistenceImpl::new);
    this.workflow_alert_mapreduce_jobs = new LazyLoadPersistence<>(conn, databases, BaseWorkflowAlertMapreduceJobPersistenceImpl::new);
    this.workflow_alert_workflow_executions = new LazyLoadPersistence<>(conn, databases, BaseWorkflowAlertWorkflowExecutionPersistenceImpl::new);
    this.workflow_alerts = new LazyLoadPersistence<>(conn, databases, BaseWorkflowAlertPersistenceImpl::new);
    this.workflow_attempt_configured_notifications = new LazyLoadPersistence<>(conn, databases, BaseWorkflowAttemptConfiguredNotificationPersistenceImpl::new);
    this.workflow_attempt_datastores = new LazyLoadPersistence<>(conn, databases, BaseWorkflowAttemptDatastorePersistenceImpl::new);
    this.workflow_attempts = new LazyLoadPersistence<>(conn, databases, BaseWorkflowAttemptPersistenceImpl::new);
    this.workflow_execution_configured_notifications = new LazyLoadPersistence<>(conn, databases, BaseWorkflowExecutionConfiguredNotificationPersistenceImpl::new);
    this.workflow_executions = new LazyLoadPersistence<>(conn, databases, BaseWorkflowExecutionPersistenceImpl::new);
  }

  public GenericInsertion.Builder createInsertion() {
    return GenericInsertion.create(conn);
  }

  public GenericQuery.Builder createQuery() {
    final GenericQuery.Builder builder = GenericQuery.create(conn);
    builder.setPostQueryAction(postQueryAction);
    return builder;
  }

  public GenericUpdate.Builder createUpdate() {
    return GenericUpdate.create(conn, allowBulkOperation);
  }

  public GenericDeletion.Builder createDeletion() {
    return GenericDeletion.create(conn, allowBulkOperation);
  }

  @Override
  public Records findBySql(String statement, List<?> params, Collection<Column> columns) throws IOException {
    final PreparedStatement preparedStatement = conn.getPreparedStatement(statement);
    try {
      for (int i = 0; i < params.size(); i++) {
        final Object param = params.get(i);
        final int paramIdx = i+1;
        preparedStatement.setObject(paramIdx, param);
      }
      return QueryFetcher.getQueryResults(preparedStatement, columns, conn);
    } catch (SQLException e) {
      throw new IOException(e);
    }
  }

  public IApplicationConfiguredNotificationPersistence applicationConfiguredNotifications(){
    return application_configured_notifications.get();
  }

  public IApplicationCounterSummaryPersistence applicationCounterSummaries(){
    return application_counter_summaries.get();
  }

  public IApplicationPersistence applications(){
    return applications.get();
  }

  public IBackgroundAttemptInfoPersistence backgroundAttemptInfos(){
    return background_attempt_infos.get();
  }

  public IBackgroundStepAttemptInfoPersistence backgroundStepAttemptInfos(){
    return background_step_attempt_infos.get();
  }

  public IBackgroundWorkflowExecutorInfoPersistence backgroundWorkflowExecutorInfos(){
    return background_workflow_executor_infos.get();
  }

  public IConfiguredNotificationPersistence configuredNotifications(){
    return configured_notifications.get();
  }

  public IDashboardApplicationPersistence dashboardApplications(){
    return dashboard_applications.get();
  }

  public IDashboardPersistence dashboards(){
    return dashboards.get();
  }

  public IExecutionTagPersistence executionTags(){
    return execution_tags.get();
  }

  public IMapreduceCounterPersistence mapreduceCounters(){
    return mapreduce_counters.get();
  }

  public IMapreduceJobTaskExceptionPersistence mapreduceJobTaskExceptions(){
    return mapreduce_job_task_exceptions.get();
  }

  public IMapreduceJobPersistence mapreduceJobs(){
    return mapreduce_jobs.get();
  }

  public IResourceRecordPersistence resourceRecords(){
    return resource_records.get();
  }

  public IResourceRootPersistence resourceRoots(){
    return resource_roots.get();
  }

  public IStepAttemptDatastorePersistence stepAttemptDatastores(){
    return step_attempt_datastores.get();
  }

  public IStepAttemptPersistence stepAttempts(){
    return step_attempts.get();
  }

  public IStepDependencyPersistence stepDependencies(){
    return step_dependencies.get();
  }

  public IStepStatisticPersistence stepStatistics(){
    return step_statistics.get();
  }

  public IUserDashboardPersistence userDashboards(){
    return user_dashboards.get();
  }

  public IUserPersistence users(){
    return users.get();
  }

  public IWorkflowAlertMapreduceJobPersistence workflowAlertMapreduceJobs(){
    return workflow_alert_mapreduce_jobs.get();
  }

  public IWorkflowAlertWorkflowExecutionPersistence workflowAlertWorkflowExecutions(){
    return workflow_alert_workflow_executions.get();
  }

  public IWorkflowAlertPersistence workflowAlerts(){
    return workflow_alerts.get();
  }

  public IWorkflowAttemptConfiguredNotificationPersistence workflowAttemptConfiguredNotifications(){
    return workflow_attempt_configured_notifications.get();
  }

  public IWorkflowAttemptDatastorePersistence workflowAttemptDatastores(){
    return workflow_attempt_datastores.get();
  }

  public IWorkflowAttemptPersistence workflowAttempts(){
    return workflow_attempts.get();
  }

  public IWorkflowExecutionConfiguredNotificationPersistence workflowExecutionConfiguredNotifications(){
    return workflow_execution_configured_notifications.get();
  }

  public IWorkflowExecutionPersistence workflowExecutions(){
    return workflow_executions.get();
  }

  public boolean deleteAll() throws IOException {
    boolean success = true;
    success &= applicationConfiguredNotifications().isEmpty() || applicationConfiguredNotifications().deleteAll();
    success &= applicationCounterSummaries().isEmpty() || applicationCounterSummaries().deleteAll();
    success &= applications().isEmpty() || applications().deleteAll();
    success &= backgroundAttemptInfos().isEmpty() || backgroundAttemptInfos().deleteAll();
    success &= backgroundStepAttemptInfos().isEmpty() || backgroundStepAttemptInfos().deleteAll();
    success &= backgroundWorkflowExecutorInfos().isEmpty() || backgroundWorkflowExecutorInfos().deleteAll();
    success &= configuredNotifications().isEmpty() || configuredNotifications().deleteAll();
    success &= dashboardApplications().isEmpty() || dashboardApplications().deleteAll();
    success &= dashboards().isEmpty() || dashboards().deleteAll();
    success &= executionTags().isEmpty() || executionTags().deleteAll();
    success &= mapreduceCounters().isEmpty() || mapreduceCounters().deleteAll();
    success &= mapreduceJobTaskExceptions().isEmpty() || mapreduceJobTaskExceptions().deleteAll();
    success &= mapreduceJobs().isEmpty() || mapreduceJobs().deleteAll();
    success &= resourceRecords().isEmpty() || resourceRecords().deleteAll();
    success &= resourceRoots().isEmpty() || resourceRoots().deleteAll();
    success &= stepAttemptDatastores().isEmpty() || stepAttemptDatastores().deleteAll();
    success &= stepAttempts().isEmpty() || stepAttempts().deleteAll();
    success &= stepDependencies().isEmpty() || stepDependencies().deleteAll();
    success &= stepStatistics().isEmpty() || stepStatistics().deleteAll();
    success &= userDashboards().isEmpty() || userDashboards().deleteAll();
    success &= users().isEmpty() || users().deleteAll();
    success &= workflowAlertMapreduceJobs().isEmpty() || workflowAlertMapreduceJobs().deleteAll();
    success &= workflowAlertWorkflowExecutions().isEmpty() || workflowAlertWorkflowExecutions().deleteAll();
    success &= workflowAlerts().isEmpty() || workflowAlerts().deleteAll();
    success &= workflowAttemptConfiguredNotifications().isEmpty() || workflowAttemptConfiguredNotifications().deleteAll();
    success &= workflowAttemptDatastores().isEmpty() || workflowAttemptDatastores().deleteAll();
    success &= workflowAttempts().isEmpty() || workflowAttempts().deleteAll();
    success &= workflowExecutionConfiguredNotifications().isEmpty() || workflowExecutionConfiguredNotifications().deleteAll();
    success &= workflowExecutions().isEmpty() || workflowExecutions().deleteAll();
    return success;
  }

  public void disableCaching() {
    application_configured_notifications.disableCaching();
    application_counter_summaries.disableCaching();
    applications.disableCaching();
    background_attempt_infos.disableCaching();
    background_step_attempt_infos.disableCaching();
    background_workflow_executor_infos.disableCaching();
    configured_notifications.disableCaching();
    dashboard_applications.disableCaching();
    dashboards.disableCaching();
    execution_tags.disableCaching();
    mapreduce_counters.disableCaching();
    mapreduce_job_task_exceptions.disableCaching();
    mapreduce_jobs.disableCaching();
    resource_records.disableCaching();
    resource_roots.disableCaching();
    step_attempt_datastores.disableCaching();
    step_attempts.disableCaching();
    step_dependencies.disableCaching();
    step_statistics.disableCaching();
    user_dashboards.disableCaching();
    users.disableCaching();
    workflow_alert_mapreduce_jobs.disableCaching();
    workflow_alert_workflow_executions.disableCaching();
    workflow_alerts.disableCaching();
    workflow_attempt_configured_notifications.disableCaching();
    workflow_attempt_datastores.disableCaching();
    workflow_attempts.disableCaching();
    workflow_execution_configured_notifications.disableCaching();
    workflow_executions.disableCaching();
  }

  public void setAutoCommit(boolean autoCommit) {
    conn.setAutoCommit(autoCommit);
  }

  public boolean getAutoCommit() {
    return conn.getAutoCommit();
  }

  public void commit() {
    conn.commit();
  }

  public void rollback() {
    conn.rollback();
  }

  public void resetConnection() {
    conn.resetConnection();
  }

  @Override
  public void close() throws IOException {
    conn.close();
  }

  @Override
  public void setBulkOperation(boolean isAllowBulkOperation) {
    this.allowBulkOperation = isAllowBulkOperation;
  }

  @Override
  public boolean getBulkOperation() {
    return allowBulkOperation;
  }

  public IDatabases getDatabases() {
    return databases;
  }

}
