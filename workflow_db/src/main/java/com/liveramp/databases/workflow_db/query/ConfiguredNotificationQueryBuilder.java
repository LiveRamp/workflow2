/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.query;

import java.util.Collection;

import com.rapleaf.jack.queries.AbstractQueryBuilder;
import com.rapleaf.jack.queries.Column;
import com.rapleaf.jack.queries.FieldSelector;
import com.rapleaf.jack.queries.where_operators.IWhereOperator;
import com.rapleaf.jack.queries.where_operators.JackMatchers;
import com.rapleaf.jack.queries.WhereConstraint;
import com.rapleaf.jack.queries.QueryOrder;
import com.rapleaf.jack.queries.OrderCriterion;
import com.rapleaf.jack.queries.LimitCriterion;
import com.liveramp.databases.workflow_db.iface.IConfiguredNotificationPersistence;
import com.liveramp.databases.workflow_db.models.ConfiguredNotification;


public class ConfiguredNotificationQueryBuilder extends AbstractQueryBuilder<ConfiguredNotification> {

  public ConfiguredNotificationQueryBuilder(IConfiguredNotificationPersistence caller) {
    super(caller);
  }

  public ConfiguredNotificationQueryBuilder select(ConfiguredNotification._Fields... fields) {
    for (ConfiguredNotification._Fields field : fields){
      addSelectedField(new FieldSelector(field));
    }
    return this;
  }

  public ConfiguredNotificationQueryBuilder selectAgg(FieldSelector... aggregatedFields) {
    addSelectedFields(aggregatedFields);
    return this;
  }

  public ConfiguredNotificationQueryBuilder id(Long value) {
    addId(value);
    return this;
  }

  public ConfiguredNotificationQueryBuilder idIn(Collection<Long> values) {
    addIds(values);
    return this;
  }

  public ConfiguredNotificationQueryBuilder whereId(IWhereOperator<Long> operator) {
    addWhereConstraint(new WhereConstraint<>(Column.fromId(null), operator, null));
    return this;
  }

  public ConfiguredNotificationQueryBuilder limit(int offset, int nResults) {
    setLimit(new LimitCriterion(offset, nResults));
    return this;
  }

  public ConfiguredNotificationQueryBuilder limit(int nResults) {
    setLimit(new LimitCriterion(nResults));
    return this;
  }

  public ConfiguredNotificationQueryBuilder groupBy(ConfiguredNotification._Fields... fields) {
    addGroupByFields(fields);
    return this;
  }

  public ConfiguredNotificationQueryBuilder order() {
    this.addOrder(new OrderCriterion(QueryOrder.ASC));
    return this;
  }

  public ConfiguredNotificationQueryBuilder order(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(queryOrder));
    return this;
  }

  public ConfiguredNotificationQueryBuilder orderById() {
    this.addOrder(new OrderCriterion(QueryOrder.ASC));
    return this;
  }

  public ConfiguredNotificationQueryBuilder orderById(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(queryOrder));
    return this;
  }

  public ConfiguredNotificationQueryBuilder workflowRunnerNotification(Integer value) {
    addWhereConstraint(new WhereConstraint<>(ConfiguredNotification._Fields.workflow_runner_notification, JackMatchers.equalTo(value)));
    return this;
  }

  public ConfiguredNotificationQueryBuilder whereWorkflowRunnerNotification(IWhereOperator<Integer> operator) {
    addWhereConstraint(new WhereConstraint<>(ConfiguredNotification._Fields.workflow_runner_notification, operator));
    return this;
  }

  public ConfiguredNotificationQueryBuilder orderByWorkflowRunnerNotification() {
    this.addOrder(new OrderCriterion(ConfiguredNotification._Fields.workflow_runner_notification, QueryOrder.ASC));
    return this;
  }

  public ConfiguredNotificationQueryBuilder orderByWorkflowRunnerNotification(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(ConfiguredNotification._Fields.workflow_runner_notification, queryOrder));
    return this;
  }

  public ConfiguredNotificationQueryBuilder email(String value) {
    addWhereConstraint(new WhereConstraint<>(ConfiguredNotification._Fields.email, JackMatchers.equalTo(value)));
    return this;
  }

  public ConfiguredNotificationQueryBuilder whereEmail(IWhereOperator<String> operator) {
    addWhereConstraint(new WhereConstraint<>(ConfiguredNotification._Fields.email, operator));
    return this;
  }

  public ConfiguredNotificationQueryBuilder orderByEmail() {
    this.addOrder(new OrderCriterion(ConfiguredNotification._Fields.email, QueryOrder.ASC));
    return this;
  }

  public ConfiguredNotificationQueryBuilder orderByEmail(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(ConfiguredNotification._Fields.email, queryOrder));
    return this;
  }

  public ConfiguredNotificationQueryBuilder providedAlertsHandler(Boolean value) {
    addWhereConstraint(new WhereConstraint<>(ConfiguredNotification._Fields.provided_alerts_handler, JackMatchers.equalTo(value)));
    return this;
  }

  public ConfiguredNotificationQueryBuilder whereProvidedAlertsHandler(IWhereOperator<Boolean> operator) {
    addWhereConstraint(new WhereConstraint<>(ConfiguredNotification._Fields.provided_alerts_handler, operator));
    return this;
  }

  public ConfiguredNotificationQueryBuilder orderByProvidedAlertsHandler() {
    this.addOrder(new OrderCriterion(ConfiguredNotification._Fields.provided_alerts_handler, QueryOrder.ASC));
    return this;
  }

  public ConfiguredNotificationQueryBuilder orderByProvidedAlertsHandler(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(ConfiguredNotification._Fields.provided_alerts_handler, queryOrder));
    return this;
  }
}
