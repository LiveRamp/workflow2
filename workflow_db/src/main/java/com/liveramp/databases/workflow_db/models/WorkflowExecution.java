
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.models;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import com.rapleaf.jack.AssociationType;
import com.rapleaf.jack.AttributesWithId;
import com.rapleaf.jack.BelongsToAssociation;
import com.rapleaf.jack.DefaultAssociationMetadata;
import com.rapleaf.jack.HasManyAssociation;
import com.rapleaf.jack.HasOneAssociation;
import com.rapleaf.jack.IAssociationMetadata;
import com.rapleaf.jack.IModelAssociationMetadata;
import com.rapleaf.jack.ModelIdWrapper;
import com.rapleaf.jack.ModelWithId;
import com.rapleaf.jack.queries.AbstractTable;
import com.rapleaf.jack.queries.Column;

import com.liveramp.databases.workflow_db.IDatabases;
import com.rapleaf.jack.util.JackUtility;

public class WorkflowExecution extends ModelWithId<WorkflowExecution, IDatabases> implements Comparable<WorkflowExecution>{
  
  public static final long serialVersionUID = 7107245730139068186L;

  public static class Tbl extends AbstractTable<WorkflowExecution.Attributes, WorkflowExecution> {
    public final Column<Long> ID;
    public final Column<Integer> APP_TYPE;
    public final Column<String> NAME;
    public final Column<String> SCOPE_IDENTIFIER;
    public final Column<Integer> STATUS;
    public final Column<Long> START_TIME;
    public final Column<Long> END_TIME;
    public final Column<Integer> APPLICATION_ID;
    public final Column<String> POOL_OVERRIDE;

    private Tbl(String alias) {
      super("workflow_executions", alias, WorkflowExecution.Attributes.class, WorkflowExecution.class);
      this.ID = Column.fromId(alias);
      this.APP_TYPE = Column.fromField(alias, _Fields.app_type, Integer.class);
      this.NAME = Column.fromField(alias, _Fields.name, String.class);
      this.SCOPE_IDENTIFIER = Column.fromField(alias, _Fields.scope_identifier, String.class);
      this.STATUS = Column.fromField(alias, _Fields.status, Integer.class);
      this.START_TIME = Column.fromTimestamp(alias, _Fields.start_time);
      this.END_TIME = Column.fromTimestamp(alias, _Fields.end_time);
      this.APPLICATION_ID = Column.fromField(alias, _Fields.application_id, Integer.class);
      this.POOL_OVERRIDE = Column.fromField(alias, _Fields.pool_override, String.class);
      Collections.addAll(this.allColumns, ID, APP_TYPE, NAME, SCOPE_IDENTIFIER, STATUS, START_TIME, END_TIME, APPLICATION_ID, POOL_OVERRIDE);
    }

    public static Tbl as(String alias) {
      return new Tbl(alias);
    }
  }

  public static final Tbl TBL = new Tbl("workflow_executions");
  public static final Column<Long> ID = TBL.ID;
  public static final Column<Integer> APP_TYPE = TBL.APP_TYPE;
  public static final Column<String> NAME = TBL.NAME;
  public static final Column<String> SCOPE_IDENTIFIER = TBL.SCOPE_IDENTIFIER;
  public static final Column<Integer> STATUS = TBL.STATUS;
  public static final Column<Long> START_TIME = TBL.START_TIME;
  public static final Column<Long> END_TIME = TBL.END_TIME;
  public static final Column<Integer> APPLICATION_ID = TBL.APPLICATION_ID;
  public static final Column<String> POOL_OVERRIDE = TBL.POOL_OVERRIDE;

  private final Attributes attributes;

  private transient WorkflowExecution.Id cachedTypedId;

  // Associations
  private BelongsToAssociation<Application> __assoc_application;
  private HasManyAssociation<WorkflowAttempt> __assoc_workflow_attempt;
  private HasManyAssociation<WorkflowExecutionConfiguredNotification> __assoc_workflow_execution_configured_notification;
  private HasManyAssociation<WorkflowAlertWorkflowExecution> __assoc_workflow_alert_workflow_execution;
  private HasManyAssociation<ExecutionTag> __assoc_execution_tags;

  public enum _Fields {
    app_type,
    name,
    scope_identifier,
    status,
    start_time,
    end_time,
    application_id,
    pool_override,
  }

  @Override
  public WorkflowExecution.Id getTypedId() {
    if (cachedTypedId == null) {
      cachedTypedId = new WorkflowExecution.Id(this.getId());
    }
    return cachedTypedId;
  }

  public WorkflowExecution(long id, final Integer app_type, final String name, final String scope_identifier, final int status, final Long start_time, final Long end_time, final Integer application_id, final String pool_override, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, app_type, name, scope_identifier, status, start_time, end_time, application_id, pool_override);
    this.__assoc_application = new BelongsToAssociation<>(databases.getWorkflowDb().applications(), getApplicationId() == null ? null : getApplicationId().longValue());
    this.__assoc_workflow_attempt = new HasManyAssociation<>(databases.getWorkflowDb().workflowAttempts(), "workflow_execution_id", getId());
    this.__assoc_workflow_execution_configured_notification = new HasManyAssociation<>(databases.getWorkflowDb().workflowExecutionConfiguredNotifications(), "workflow_execution_id", getId());
    this.__assoc_workflow_alert_workflow_execution = new HasManyAssociation<>(databases.getWorkflowDb().workflowAlertWorkflowExecutions(), "workflow_execution_id", getId());
    this.__assoc_execution_tags = new HasManyAssociation<>(databases.getWorkflowDb().executionTags(), "workflow_execution_id", getId());
  }

  public WorkflowExecution(long id, final Integer app_type, final String name, final String scope_identifier, final int status, final Long start_time, final Long end_time, final Integer application_id, final String pool_override) {
    super(null);
    attributes = new Attributes(id, app_type, name, scope_identifier, status, start_time, end_time, application_id, pool_override);
  }
  
  public WorkflowExecution(long id, final String name, final int status, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, name, status);
    this.__assoc_application = new BelongsToAssociation<>(databases.getWorkflowDb().applications(), getApplicationId() == null ? null : getApplicationId().longValue());
    this.__assoc_workflow_attempt = new HasManyAssociation<>(databases.getWorkflowDb().workflowAttempts(), "workflow_execution_id", getId());
    this.__assoc_workflow_execution_configured_notification = new HasManyAssociation<>(databases.getWorkflowDb().workflowExecutionConfiguredNotifications(), "workflow_execution_id", getId());
    this.__assoc_workflow_alert_workflow_execution = new HasManyAssociation<>(databases.getWorkflowDb().workflowAlertWorkflowExecutions(), "workflow_execution_id", getId());
    this.__assoc_execution_tags = new HasManyAssociation<>(databases.getWorkflowDb().executionTags(), "workflow_execution_id", getId());
  }

  public WorkflowExecution(long id, final String name, final int status) {
    super(null);
    attributes = new Attributes(id, name, status);
  }

  public static WorkflowExecution newDefaultInstance(long id) {
    return new WorkflowExecution(id, "", 0);
  }

  public WorkflowExecution(Attributes attributes, IDatabases databases) {
    super(databases);
    this.attributes = attributes;

    if (databases != null) {
      this.__assoc_application = new BelongsToAssociation<>(databases.getWorkflowDb().applications(), getApplicationId() == null ? null : getApplicationId().longValue());
      this.__assoc_workflow_attempt = new HasManyAssociation<>(databases.getWorkflowDb().workflowAttempts(), "workflow_execution_id", getId());
      this.__assoc_workflow_execution_configured_notification = new HasManyAssociation<>(databases.getWorkflowDb().workflowExecutionConfiguredNotifications(), "workflow_execution_id", getId());
      this.__assoc_workflow_alert_workflow_execution = new HasManyAssociation<>(databases.getWorkflowDb().workflowAlertWorkflowExecutions(), "workflow_execution_id", getId());
      this.__assoc_execution_tags = new HasManyAssociation<>(databases.getWorkflowDb().executionTags(), "workflow_execution_id", getId());
    }
  }

  public WorkflowExecution(Attributes attributes) {
    this(attributes, (IDatabases) null);
  }

  public WorkflowExecution(long id, Map<Enum, Object> fieldsMap) {
    super(null);
    attributes = new Attributes(id, fieldsMap);
  }

  public WorkflowExecution (WorkflowExecution other) {
    this(other, (IDatabases)null);
  }

  public WorkflowExecution (WorkflowExecution other, IDatabases databases) {
    super(databases);
    attributes = new Attributes(other.getAttributes());

    if (databases != null) {
      this.__assoc_application = new BelongsToAssociation<>(databases.getWorkflowDb().applications(), getApplicationId() == null ? null : getApplicationId().longValue());
      this.__assoc_workflow_attempt = new HasManyAssociation<>(databases.getWorkflowDb().workflowAttempts(), "workflow_execution_id", getId());
      this.__assoc_workflow_execution_configured_notification = new HasManyAssociation<>(databases.getWorkflowDb().workflowExecutionConfiguredNotifications(), "workflow_execution_id", getId());
      this.__assoc_workflow_alert_workflow_execution = new HasManyAssociation<>(databases.getWorkflowDb().workflowAlertWorkflowExecutions(), "workflow_execution_id", getId());
      this.__assoc_execution_tags = new HasManyAssociation<>(databases.getWorkflowDb().executionTags(), "workflow_execution_id", getId());
    }
  }

  public Attributes getAttributes() {
    return attributes;
  }

  public Integer getAppType() {
    return attributes.getAppType();
  }

  public WorkflowExecution setAppType(Integer newval) {
    attributes.setAppType(newval);
    cachedHashCode = 0;
    return this;
  }

  public String getName() {
    return attributes.getName();
  }

  public WorkflowExecution setName(String newval) {
    attributes.setName(newval);
    cachedHashCode = 0;
    return this;
  }

  public String getScopeIdentifier() {
    return attributes.getScopeIdentifier();
  }

  public WorkflowExecution setScopeIdentifier(String newval) {
    attributes.setScopeIdentifier(newval);
    cachedHashCode = 0;
    return this;
  }

  public int getStatus() {
    return attributes.getStatus();
  }

  public WorkflowExecution setStatus(int newval) {
    attributes.setStatus(newval);
    cachedHashCode = 0;
    return this;
  }

  public Long getStartTime() {
    return attributes.getStartTime();
  }

  public WorkflowExecution setStartTime(Long newval) {
    attributes.setStartTime(newval);
    cachedHashCode = 0;
    return this;
  }

  public Long getEndTime() {
    return attributes.getEndTime();
  }

  public WorkflowExecution setEndTime(Long newval) {
    attributes.setEndTime(newval);
    cachedHashCode = 0;
    return this;
  }

  public Integer getApplicationId() {
    return attributes.getApplicationId();
  }

  public WorkflowExecution setApplicationId(Integer newval) {
    attributes.setApplicationId(newval);
    if(__assoc_application != null){
      this.__assoc_application.setOwnerId(newval);
    }
    cachedHashCode = 0;
    return this;
  }

  public String getPoolOverride() {
    return attributes.getPoolOverride();
  }

  public WorkflowExecution setPoolOverride(String newval) {
    attributes.setPoolOverride(newval);
    cachedHashCode = 0;
    return this;
  }

  public void setField(_Fields field, Object value) {
    switch (field) {
      case app_type:
        setAppType((Integer)value);
        break;
      case name:
        setName((String)value);
        break;
      case scope_identifier:
        setScopeIdentifier((String)value);
        break;
      case status:
        setStatus((Integer)value);
        break;
      case start_time:
        setStartTime((Long)value);
        break;
      case end_time:
        setEndTime((Long)value);
        break;
      case application_id:
        setApplicationId((Integer)value);
        break;
      case pool_override:
        setPoolOverride((String)value);
        break;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }
  }
  
  public void setField(String fieldName, Object value) {
    if (fieldName.equals("app_type")) {
      setAppType((Integer)  value);
      return;
    }
    if (fieldName.equals("name")) {
      setName((String)  value);
      return;
    }
    if (fieldName.equals("scope_identifier")) {
      setScopeIdentifier((String)  value);
      return;
    }
    if (fieldName.equals("status")) {
      setStatus((Integer)  value);
      return;
    }
    if (fieldName.equals("start_time")) {
      setStartTime((Long)  value);
      return;
    }
    if (fieldName.equals("end_time")) {
      setEndTime((Long)  value);
      return;
    }
    if (fieldName.equals("application_id")) {
      setApplicationId((Integer)  value);
      return;
    }
    if (fieldName.equals("pool_override")) {
      setPoolOverride((String)  value);
      return;
    }
    throw new IllegalStateException("Invalid field: " + fieldName);
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
      case app_type:
        return Integer.class;
      case name:
        return String.class;
      case scope_identifier:
        return String.class;
      case status:
        return int.class;
      case start_time:
        return Long.class;
      case end_time:
        return Long.class;
      case application_id:
        return Integer.class;
      case pool_override:
        return String.class;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
    if (fieldName.equals("app_type")) {
      return Integer.class;
    }
    if (fieldName.equals("name")) {
      return String.class;
    }
    if (fieldName.equals("scope_identifier")) {
      return String.class;
    }
    if (fieldName.equals("status")) {
      return int.class;
    }
    if (fieldName.equals("start_time")) {
      return Long.class;
    }
    if (fieldName.equals("end_time")) {
      return Long.class;
    }
    if (fieldName.equals("application_id")) {
      return Integer.class;
    }
    if (fieldName.equals("pool_override")) {
      return String.class;
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Application getApplication() throws IOException {
    return __assoc_application.get();
  }

  public List<WorkflowAttempt> getWorkflowAttempt() throws IOException {
    return __assoc_workflow_attempt.get();
  }

  public List<WorkflowExecutionConfiguredNotification> getWorkflowExecutionConfiguredNotification() throws IOException {
    return __assoc_workflow_execution_configured_notification.get();
  }

  public List<WorkflowAlertWorkflowExecution> getWorkflowAlertWorkflowExecution() throws IOException {
    return __assoc_workflow_alert_workflow_execution.get();
  }

  public List<ExecutionTag> getExecutionTags() throws IOException {
    return __assoc_execution_tags.get();
  }

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
    if (fieldName.equals("app_type")) {
      return getAppType();
    }
    if (fieldName.equals("name")) {
      return getName();
    }
    if (fieldName.equals("scope_identifier")) {
      return getScopeIdentifier();
    }
    if (fieldName.equals("status")) {
      return getStatus();
    }
    if (fieldName.equals("start_time")) {
      return getStartTime();
    }
    if (fieldName.equals("end_time")) {
      return getEndTime();
    }
    if (fieldName.equals("application_id")) {
      return getApplicationId();
    }
    if (fieldName.equals("pool_override")) {
      return getPoolOverride();
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
      case app_type:
        return getAppType();
      case name:
        return getName();
      case scope_identifier:
        return getScopeIdentifier();
      case status:
        return getStatus();
      case start_time:
        return getStartTime();
      case end_time:
        return getEndTime();
      case application_id:
        return getApplicationId();
      case pool_override:
        return getPoolOverride();
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  public boolean hasField(String fieldName) {
    if (fieldName.equals("id")) {
      return true;
    }
    if (fieldName.equals("app_type")) {
      return true;
    }
    if (fieldName.equals("name")) {
      return true;
    }
    if (fieldName.equals("scope_identifier")) {
      return true;
    }
    if (fieldName.equals("status")) {
      return true;
    }
    if (fieldName.equals("start_time")) {
      return true;
    }
    if (fieldName.equals("end_time")) {
      return true;
    }
    if (fieldName.equals("application_id")) {
      return true;
    }
    if (fieldName.equals("pool_override")) {
      return true;
    }
    return false;
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
      case app_type:
        return null;
      case name:
        return null;
      case scope_identifier:
        return null;
      case status:
        return null;
      case start_time:
        return null;
      case end_time:
        return null;
      case application_id:
        return null;
      case pool_override:
        return null;
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public WorkflowExecution getCopy() {
    return getCopy(databases);
  }

  @Override
  public WorkflowExecution getCopy(IDatabases databases) {
    return new WorkflowExecution(this, databases);
  }

  @Override
  public boolean save() throws IOException {
    return databases.getWorkflowDb().workflowExecutions().save(this);
  }

  public Application createApplication(final String name) throws IOException {
 
    Application newApplication = databases.getWorkflowDb().applications().create(name);
    setApplicationId(JackUtility.safeLongToInt(newApplication.getId()));
    save();
    __assoc_application.clearCache();
    return newApplication;
  }

  public Application createApplication(final String name, final Integer app_type) throws IOException {
 
    Application newApplication = databases.getWorkflowDb().applications().create(name, app_type);
    setApplicationId(JackUtility.safeLongToInt(newApplication.getId()));
    save();
    __assoc_application.clearCache();
    return newApplication;
  }

  public Application createApplication() throws IOException {
 
    Application newApplication = databases.getWorkflowDb().applications().create("");
    setApplicationId(JackUtility.safeLongToInt(newApplication.getId()));
    save();
    __assoc_application.clearCache();
    return newApplication;
  }

  public String toString() {
    return "<WorkflowExecution"
        + " id: " + this.getId()
        + " app_type: " + getAppType()
        + " name: " + getName()
        + " scope_identifier: " + getScopeIdentifier()
        + " status: " + getStatus()
        + " start_time: " + getStartTime()
        + " end_time: " + getEndTime()
        + " application_id: " + getApplicationId()
        + " pool_override: " + getPoolOverride()
        + ">";
  }

  public void unsetAssociations() {
    unsetDatabaseReference();
    __assoc_application = null;
    __assoc_workflow_attempt = null;
    __assoc_workflow_execution_configured_notification = null;
    __assoc_workflow_alert_workflow_execution = null;
    __assoc_execution_tags = null;
  }

  public int compareTo(WorkflowExecution that) {
    return Long.valueOf(this.getId()).compareTo(that.getId());
  }
  
  
  public static class Attributes extends AttributesWithId {
    
    public static final long serialVersionUID = -896366392286820279L;

    // Fields
    private Integer __app_type;
    private String __name;
    private String __scope_identifier;
    private int __status;
    private Long __start_time;
    private Long __end_time;
    private Integer __application_id;
    private String __pool_override;

    public Attributes(long id) {
      super(id);
    }

    public Attributes(long id, final Integer app_type, final String name, final String scope_identifier, final int status, final Long start_time, final Long end_time, final Integer application_id, final String pool_override) {
      super(id);
      this.__app_type = app_type;
      this.__name = name;
      this.__scope_identifier = scope_identifier;
      this.__status = status;
      this.__start_time = start_time;
      this.__end_time = end_time;
      this.__application_id = application_id;
      this.__pool_override = pool_override;
    }
    
    public Attributes(long id, final String name, final int status) {
      super(id);
      this.__name = name;
      this.__status = status;
    }

    public static Attributes newDefaultInstance(long id) {
      return new Attributes(id, "", 0);
    }

    public Attributes(long id, Map<Enum, Object> fieldsMap) {
      super(id);
      Integer app_type = (Integer)fieldsMap.get(WorkflowExecution._Fields.app_type);
      String name = (String)fieldsMap.get(WorkflowExecution._Fields.name);
      String scope_identifier = (String)fieldsMap.get(WorkflowExecution._Fields.scope_identifier);
      int status = (Integer)fieldsMap.get(WorkflowExecution._Fields.status);
      Long start_time = (Long)fieldsMap.get(WorkflowExecution._Fields.start_time);
      Long end_time = (Long)fieldsMap.get(WorkflowExecution._Fields.end_time);
      Integer application_id = (Integer)fieldsMap.get(WorkflowExecution._Fields.application_id);
      String pool_override = (String)fieldsMap.get(WorkflowExecution._Fields.pool_override);
      this.__app_type = app_type;
      this.__name = name;
      this.__scope_identifier = scope_identifier;
      this.__status = status;
      this.__start_time = start_time;
      this.__end_time = end_time;
      this.__application_id = application_id;
      this.__pool_override = pool_override;
    }

    public Attributes(Attributes other) {
      super(other.getId());
      this.__app_type = other.getAppType();
      this.__name = other.getName();
      this.__scope_identifier = other.getScopeIdentifier();
      this.__status = other.getStatus();
      this.__start_time = other.getStartTime();
      this.__end_time = other.getEndTime();
      this.__application_id = other.getApplicationId();
      this.__pool_override = other.getPoolOverride();
    }

    public Integer getAppType() {
      return __app_type;
    }

    public Attributes setAppType(Integer newval) {
      this.__app_type = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getName() {
      return __name;
    }

    public Attributes setName(String newval) {
      this.__name = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getScopeIdentifier() {
      return __scope_identifier;
    }

    public Attributes setScopeIdentifier(String newval) {
      this.__scope_identifier = newval;
      cachedHashCode = 0;
      return this;
    }

    public int getStatus() {
      return __status;
    }

    public Attributes setStatus(int newval) {
      this.__status = newval;
      cachedHashCode = 0;
      return this;
    }

    public Long getStartTime() {
      return __start_time;
    }

    public Attributes setStartTime(Long newval) {
      this.__start_time = newval;
      cachedHashCode = 0;
      return this;
    }

    public Long getEndTime() {
      return __end_time;
    }

    public Attributes setEndTime(Long newval) {
      this.__end_time = newval;
      cachedHashCode = 0;
      return this;
    }

    public Integer getApplicationId() {
      return __application_id;
    }

    public Attributes setApplicationId(Integer newval) {
      this.__application_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getPoolOverride() {
      return __pool_override;
    }

    public Attributes setPoolOverride(String newval) {
      this.__pool_override = newval;
      cachedHashCode = 0;
      return this;
    }

    public void setField(_Fields field, Object value) {
      switch (field) {
        case app_type:
          setAppType((Integer)value);
          break;
        case name:
          setName((String)value);
          break;
        case scope_identifier:
          setScopeIdentifier((String)value);
          break;
        case status:
          setStatus((Integer)value);
          break;
        case start_time:
          setStartTime((Long)value);
          break;
        case end_time:
          setEndTime((Long)value);
          break;
        case application_id:
          setApplicationId((Integer)value);
          break;
        case pool_override:
          setPoolOverride((String)value);
          break;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }
    }

    public void setField(String fieldName, Object value) {
      if (fieldName.equals("app_type")) {
        setAppType((Integer)value);
        return;
      }
      if (fieldName.equals("name")) {
        setName((String)value);
        return;
      }
      if (fieldName.equals("scope_identifier")) {
        setScopeIdentifier((String)value);
        return;
      }
      if (fieldName.equals("status")) {
        setStatus((Integer)value);
        return;
      }
      if (fieldName.equals("start_time")) {
        setStartTime((Long)value);
        return;
      }
      if (fieldName.equals("end_time")) {
        setEndTime((Long)value);
        return;
      }
      if (fieldName.equals("application_id")) {
        setApplicationId((Integer)value);
        return;
      }
      if (fieldName.equals("pool_override")) {
        setPoolOverride((String)value);
        return;
      }
      throw new IllegalStateException("Invalid field: " + fieldName);
    }

    public static Class getFieldType(_Fields field) {
      switch (field) {
        case app_type:
          return Integer.class;
        case name:
          return String.class;
        case scope_identifier:
          return String.class;
        case status:
          return int.class;
        case start_time:
          return Long.class;
        case end_time:
          return Long.class;
        case application_id:
          return Integer.class;
        case pool_override:
          return String.class;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }    
    }

    public static Class getFieldType(String fieldName) {    
      if (fieldName.equals("app_type")) {
        return Integer.class;
      }
      if (fieldName.equals("name")) {
        return String.class;
      }
      if (fieldName.equals("scope_identifier")) {
        return String.class;
      }
      if (fieldName.equals("status")) {
        return int.class;
      }
      if (fieldName.equals("start_time")) {
        return Long.class;
      }
      if (fieldName.equals("end_time")) {
        return Long.class;
      }
      if (fieldName.equals("application_id")) {
        return Integer.class;
      }
      if (fieldName.equals("pool_override")) {
        return String.class;
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    @Override
    public Object getField(String fieldName) {
      if (fieldName.equals("id")) {
        return getId();
      }
      if (fieldName.equals("app_type")) {
        return getAppType();
      }
      if (fieldName.equals("name")) {
        return getName();
      }
      if (fieldName.equals("scope_identifier")) {
        return getScopeIdentifier();
      }
      if (fieldName.equals("status")) {
        return getStatus();
      }
      if (fieldName.equals("start_time")) {
        return getStartTime();
      }
      if (fieldName.equals("end_time")) {
        return getEndTime();
      }
      if (fieldName.equals("application_id")) {
        return getApplicationId();
      }
      if (fieldName.equals("pool_override")) {
        return getPoolOverride();
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    public Object getField(_Fields field) {
      switch (field) {
        case app_type:
          return getAppType();
        case name:
          return getName();
        case scope_identifier:
          return getScopeIdentifier();
        case status:
          return getStatus();
        case start_time:
          return getStartTime();
        case end_time:
          return getEndTime();
        case application_id:
          return getApplicationId();
        case pool_override:
          return getPoolOverride();
      }
      throw new IllegalStateException("Invalid field: " + field);
    }

    public boolean hasField(String fieldName) {
      if (fieldName.equals("id")) {
        return true;
      }
      if (fieldName.equals("app_type")) {
        return true;
      }
      if (fieldName.equals("name")) {
        return true;
      }
      if (fieldName.equals("scope_identifier")) {
        return true;
      }
      if (fieldName.equals("status")) {
        return true;
      }
      if (fieldName.equals("start_time")) {
        return true;
      }
      if (fieldName.equals("end_time")) {
        return true;
      }
      if (fieldName.equals("application_id")) {
        return true;
      }
      if (fieldName.equals("pool_override")) {
        return true;
      }
      return false;
    }

    public static Object getDefaultValue(_Fields field) {
      switch (field) {
        case app_type:
          return null;
        case name:
          return null;
        case scope_identifier:
          return null;
        case status:
          return null;
        case start_time:
          return null;
        case end_time:
          return null;
        case application_id:
          return null;
        case pool_override:
          return null;
      }
      throw new IllegalStateException("Invalid field: " + field);
    }
    
    @Override
    public Set<Enum> getFieldSet() {
      Set set = EnumSet.allOf(_Fields.class);
      return set;
    }
    
    public String toString() {
      return "<WorkflowExecution.Attributes"
          + " app_type: " + getAppType()
          + " name: " + getName()
          + " scope_identifier: " + getScopeIdentifier()
          + " status: " + getStatus()
          + " start_time: " + getStartTime()
          + " end_time: " + getEndTime()
          + " application_id: " + getApplicationId()
          + " pool_override: " + getPoolOverride()
          + ">";
    }
  }

  public static class Id implements ModelIdWrapper<WorkflowExecution.Id> {
    public static final long serialVersionUID = 1L;

    private final long id;

    public Id(Long id) {
      this.id = id;
    }

    @Override
    public Long getId() {
      return id;
    }

    @Override
    public int compareTo(Id other) {
      return this.getId().compareTo(other.getId());
    }

    @Override
    public boolean equals(Object other) {
      if (other instanceof Id) {
        return this.getId().equals(((Id)other).getId());
      }
      return false;
    }

    @Override
    public int hashCode() {
      return this.getId().hashCode();
    }

    @Override
    public String toString() {
      return "<WorkflowExecution.Id: " + this.getId() + ">";
    }
  }

  public static Set<Attributes> convertToAttributesSet(Collection<WorkflowExecution> models) {
    return models.stream()
        .map(WorkflowExecution::getAttributes)
        .collect(Collectors.toSet());
  }

  public static class AssociationMetadata implements IModelAssociationMetadata {

    private List<IAssociationMetadata> meta = new ArrayList<>();

    public AssociationMetadata(){
      meta.add(new DefaultAssociationMetadata(AssociationType.BELONGS_TO, WorkflowExecution.class, Application.class, "application_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_MANY, WorkflowExecution.class, WorkflowAttempt.class, "workflow_execution_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_MANY, WorkflowExecution.class, WorkflowExecutionConfiguredNotification.class, "workflow_execution_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_MANY, WorkflowExecution.class, WorkflowAlertWorkflowExecution.class, "workflow_execution_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_MANY, WorkflowExecution.class, ExecutionTag.class, "workflow_execution_id"));
    }

    @Override
    public List<IAssociationMetadata> getAssociationMetadata() {
      return meta;
    }
  }

}
