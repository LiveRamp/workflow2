/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.query;

import java.util.Collection;

import com.rapleaf.jack.queries.AbstractQueryBuilder;
import com.rapleaf.jack.queries.Column;
import com.rapleaf.jack.queries.FieldSelector;
import com.rapleaf.jack.queries.where_operators.IWhereOperator;
import com.rapleaf.jack.queries.where_operators.JackMatchers;
import com.rapleaf.jack.queries.WhereConstraint;
import com.rapleaf.jack.queries.QueryOrder;
import com.rapleaf.jack.queries.OrderCriterion;
import com.rapleaf.jack.queries.LimitCriterion;
import com.liveramp.databases.workflow_db.iface.IResourceRootPersistence;
import com.liveramp.databases.workflow_db.models.ResourceRoot;


public class ResourceRootQueryBuilder extends AbstractQueryBuilder<ResourceRoot> {

  public ResourceRootQueryBuilder(IResourceRootPersistence caller) {
    super(caller);
  }

  public ResourceRootQueryBuilder select(ResourceRoot._Fields... fields) {
    for (ResourceRoot._Fields field : fields){
      addSelectedField(new FieldSelector(field));
    }
    return this;
  }

  public ResourceRootQueryBuilder selectAgg(FieldSelector... aggregatedFields) {
    addSelectedFields(aggregatedFields);
    return this;
  }

  public ResourceRootQueryBuilder id(Long value) {
    addId(value);
    return this;
  }

  public ResourceRootQueryBuilder idIn(Collection<Long> values) {
    addIds(values);
    return this;
  }

  public ResourceRootQueryBuilder whereId(IWhereOperator<Long> operator) {
    addWhereConstraint(new WhereConstraint<>(Column.fromId(null), operator, null));
    return this;
  }

  public ResourceRootQueryBuilder limit(int offset, int nResults) {
    setLimit(new LimitCriterion(offset, nResults));
    return this;
  }

  public ResourceRootQueryBuilder limit(int nResults) {
    setLimit(new LimitCriterion(nResults));
    return this;
  }

  public ResourceRootQueryBuilder groupBy(ResourceRoot._Fields... fields) {
    addGroupByFields(fields);
    return this;
  }

  public ResourceRootQueryBuilder order() {
    this.addOrder(new OrderCriterion(QueryOrder.ASC));
    return this;
  }

  public ResourceRootQueryBuilder order(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(queryOrder));
    return this;
  }

  public ResourceRootQueryBuilder orderById() {
    this.addOrder(new OrderCriterion(QueryOrder.ASC));
    return this;
  }

  public ResourceRootQueryBuilder orderById(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(queryOrder));
    return this;
  }

  public ResourceRootQueryBuilder name(String value) {
    addWhereConstraint(new WhereConstraint<>(ResourceRoot._Fields.name, JackMatchers.equalTo(value)));
    return this;
  }

  public ResourceRootQueryBuilder whereName(IWhereOperator<String> operator) {
    addWhereConstraint(new WhereConstraint<>(ResourceRoot._Fields.name, operator));
    return this;
  }

  public ResourceRootQueryBuilder orderByName() {
    this.addOrder(new OrderCriterion(ResourceRoot._Fields.name, QueryOrder.ASC));
    return this;
  }

  public ResourceRootQueryBuilder orderByName(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(ResourceRoot._Fields.name, queryOrder));
    return this;
  }

  public ResourceRootQueryBuilder createdAt(Long value) {
    addWhereConstraint(new WhereConstraint<>(ResourceRoot._Fields.created_at, JackMatchers.equalTo(value)));
    return this;
  }

  public ResourceRootQueryBuilder whereCreatedAt(IWhereOperator<Long> operator) {
    addWhereConstraint(new WhereConstraint<>(ResourceRoot._Fields.created_at, operator));
    return this;
  }

  public ResourceRootQueryBuilder orderByCreatedAt() {
    this.addOrder(new OrderCriterion(ResourceRoot._Fields.created_at, QueryOrder.ASC));
    return this;
  }

  public ResourceRootQueryBuilder orderByCreatedAt(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(ResourceRoot._Fields.created_at, queryOrder));
    return this;
  }

  public ResourceRootQueryBuilder updatedAt(Long value) {
    addWhereConstraint(new WhereConstraint<>(ResourceRoot._Fields.updated_at, JackMatchers.equalTo(value)));
    return this;
  }

  public ResourceRootQueryBuilder whereUpdatedAt(IWhereOperator<Long> operator) {
    addWhereConstraint(new WhereConstraint<>(ResourceRoot._Fields.updated_at, operator));
    return this;
  }

  public ResourceRootQueryBuilder orderByUpdatedAt() {
    this.addOrder(new OrderCriterion(ResourceRoot._Fields.updated_at, QueryOrder.ASC));
    return this;
  }

  public ResourceRootQueryBuilder orderByUpdatedAt(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(ResourceRoot._Fields.updated_at, queryOrder));
    return this;
  }

  public ResourceRootQueryBuilder scopeIdentifier(String value) {
    addWhereConstraint(new WhereConstraint<>(ResourceRoot._Fields.scope_identifier, JackMatchers.equalTo(value)));
    return this;
  }

  public ResourceRootQueryBuilder whereScopeIdentifier(IWhereOperator<String> operator) {
    addWhereConstraint(new WhereConstraint<>(ResourceRoot._Fields.scope_identifier, operator));
    return this;
  }

  public ResourceRootQueryBuilder orderByScopeIdentifier() {
    this.addOrder(new OrderCriterion(ResourceRoot._Fields.scope_identifier, QueryOrder.ASC));
    return this;
  }

  public ResourceRootQueryBuilder orderByScopeIdentifier(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(ResourceRoot._Fields.scope_identifier, queryOrder));
    return this;
  }

  public ResourceRootQueryBuilder version(Long value) {
    addWhereConstraint(new WhereConstraint<>(ResourceRoot._Fields.version, JackMatchers.equalTo(value)));
    return this;
  }

  public ResourceRootQueryBuilder whereVersion(IWhereOperator<Long> operator) {
    addWhereConstraint(new WhereConstraint<>(ResourceRoot._Fields.version, operator));
    return this;
  }

  public ResourceRootQueryBuilder orderByVersion() {
    this.addOrder(new OrderCriterion(ResourceRoot._Fields.version, QueryOrder.ASC));
    return this;
  }

  public ResourceRootQueryBuilder orderByVersion(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(ResourceRoot._Fields.version, queryOrder));
    return this;
  }

  public ResourceRootQueryBuilder versionType(String value) {
    addWhereConstraint(new WhereConstraint<>(ResourceRoot._Fields.version_type, JackMatchers.equalTo(value)));
    return this;
  }

  public ResourceRootQueryBuilder whereVersionType(IWhereOperator<String> operator) {
    addWhereConstraint(new WhereConstraint<>(ResourceRoot._Fields.version_type, operator));
    return this;
  }

  public ResourceRootQueryBuilder orderByVersionType() {
    this.addOrder(new OrderCriterion(ResourceRoot._Fields.version_type, QueryOrder.ASC));
    return this;
  }

  public ResourceRootQueryBuilder orderByVersionType(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(ResourceRoot._Fields.version_type, queryOrder));
    return this;
  }
}
