
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.impl;

import java.sql.SQLRecoverableException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Collection;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Timestamp;

import com.rapleaf.jack.AbstractDatabaseModel;
import com.rapleaf.jack.BaseDatabaseConnection;
import com.rapleaf.jack.queries.WhereConstraint;
import com.rapleaf.jack.queries.WhereClause;
import com.rapleaf.jack.util.JackUtility;
import com.liveramp.databases.workflow_db.iface.IApplicationConfiguredNotificationPersistence;
import com.liveramp.databases.workflow_db.models.ApplicationConfiguredNotification;
import com.liveramp.databases.workflow_db.query.ApplicationConfiguredNotificationQueryBuilder;
import com.liveramp.databases.workflow_db.query.ApplicationConfiguredNotificationDeleteBuilder;

import com.liveramp.databases.workflow_db.IDatabases;

public class BaseApplicationConfiguredNotificationPersistenceImpl extends AbstractDatabaseModel<ApplicationConfiguredNotification> implements IApplicationConfiguredNotificationPersistence {
  private final IDatabases databases;

  public BaseApplicationConfiguredNotificationPersistenceImpl(BaseDatabaseConnection conn, IDatabases databases) {
    super(conn, "application_configured_notifications", Arrays.<String>asList("application_id", "configured_notification_id"));
    this.databases = databases;
  }

  @Override
  public ApplicationConfiguredNotification create(Map<Enum, Object> fieldsMap) throws IOException {
    long application_id = (Long) fieldsMap.get(ApplicationConfiguredNotification._Fields.application_id);
    long configured_notification_id = (Long) fieldsMap.get(ApplicationConfiguredNotification._Fields.configured_notification_id);
    return create(application_id, configured_notification_id);
  }

  public ApplicationConfiguredNotification create(final long application_id, final long configured_notification_id) throws IOException {
    StatementCreator statementCreator = new StatementCreator() {
      private final List<String> nonNullFields = new ArrayList<>();
      private final List<AttrSetter> statementSetters = new ArrayList<>();

      {
        int index = 1;

        nonNullFields.add("application_id");
        int fieldIndex0 = index++;
        statementSetters.add(stmt -> stmt.setLong(fieldIndex0, application_id));

        nonNullFields.add("configured_notification_id");
        int fieldIndex1 = index++;
        statementSetters.add(stmt -> stmt.setLong(fieldIndex1, configured_notification_id));
      }

      @Override
      public String getStatement() {
        return getInsertStatement(nonNullFields);
      }

      @Override
      public void setStatement(PreparedStatement statement) throws SQLException {
        for (AttrSetter setter : statementSetters) {
          setter.set(statement);
        }
      }
    };

    long __id = realCreate(statementCreator);
    ApplicationConfiguredNotification newInst = new ApplicationConfiguredNotification(__id, application_id, configured_notification_id, databases);
    newInst.setCreated(true);
    cachedById.put(__id, newInst);
    clearForeignKeyCache();
    return newInst;
  }

  public ApplicationConfiguredNotification createDefaultInstance() throws IOException {
    return create(0L, 0L);
  }

  public List<ApplicationConfiguredNotification> find(Map<Enum, Object> fieldsMap) throws IOException {
    return find(null, fieldsMap);
  }

  public List<ApplicationConfiguredNotification> find(Collection<Long> ids, Map<Enum, Object> fieldsMap) throws IOException {
    List<ApplicationConfiguredNotification> foundList = new ArrayList<>();

    if (fieldsMap == null || fieldsMap.isEmpty()) {
      return foundList;
    }

    StringBuilder statementString = new StringBuilder();
    statementString.append("SELECT * FROM application_configured_notifications WHERE (");
    List<Object> nonNullValues = new ArrayList<>();
    List<ApplicationConfiguredNotification._Fields> nonNullValueFields = new ArrayList<>();

    Iterator<Map.Entry<Enum, Object>> iter = fieldsMap.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Enum, Object> entry = iter.next();
      Enum field = entry.getKey();
      Object value = entry.getValue();

      String queryValue = value != null ? " = ? " : " IS NULL";
      if (value != null) {
        nonNullValueFields.add((ApplicationConfiguredNotification._Fields) field);
        nonNullValues.add(value);
      }

      statementString.append(field).append(queryValue);
      if (iter.hasNext()) {
        statementString.append(" AND ");
      }
    }
    if (ids != null) statementString.append(" AND ").append(getIdSetCondition(ids));
    statementString.append(")");

    int retryCount = 0;
    PreparedStatement preparedStatement;

    while (true) {
      preparedStatement = getPreparedStatement(statementString.toString());

      for (int i = 0; i < nonNullValues.size(); i++) {
        ApplicationConfiguredNotification._Fields field = nonNullValueFields.get(i);
        try {
          switch (field) {
            case application_id:
              preparedStatement.setLong(i+1, (Long) nonNullValues.get(i));
              break;
            case configured_notification_id:
              preparedStatement.setLong(i+1, (Long) nonNullValues.get(i));
              break;
          }
        } catch (SQLException e) {
          throw new IOException(e);
        }
      }

      try {
        executeQuery(foundList, preparedStatement);
        return foundList;
      } catch (SQLRecoverableException e) {
        if (++retryCount > AbstractDatabaseModel.MAX_CONNECTION_RETRIES) {
          throw new IOException(e);
        }
      } catch (SQLException e) {
        throw new IOException(e);
      }
    }
  }

  @Override
  protected void setStatementParameters(PreparedStatement preparedStatement, WhereClause whereClause) throws IOException {
    int index = 0;
    for (WhereConstraint constraint : whereClause.getWhereConstraints()) {
      for (Object parameter : constraint.getParameters()) {
        if (parameter == null) {
          continue;
        }
        try {
          if (constraint.isId()) {
            preparedStatement.setLong(++index, (Long)parameter);
          } else {
            ApplicationConfiguredNotification._Fields field = (ApplicationConfiguredNotification._Fields)constraint.getField();
            switch (field) {
              case application_id:
                preparedStatement.setLong(++index, (Long) parameter);
                break;
              case configured_notification_id:
                preparedStatement.setLong(++index, (Long) parameter);
                break;
            }
          }
        } catch (SQLException e) {
          throw new IOException(e);
        }
      }
    }
  }

  @Override
  protected void setAttrs(ApplicationConfiguredNotification model, PreparedStatement stmt, boolean setNull) throws SQLException {
    int index = 1;
    {
      stmt.setLong(index++, model.getApplicationId());
    }
    {
      stmt.setLong(index++, model.getConfiguredNotificationId());
    }
    stmt.setLong(index, model.getId());
  }

  @Override
  protected ApplicationConfiguredNotification instanceFromResultSet(ResultSet rs, Collection<Enum> selectedFields) throws SQLException {
    boolean allFields = selectedFields == null || selectedFields.isEmpty();
    long id = rs.getLong("id");
    return new ApplicationConfiguredNotification(id,
      allFields || selectedFields.contains(ApplicationConfiguredNotification._Fields.application_id) ? getLongOrNull(rs, "application_id") : 0L,
      allFields || selectedFields.contains(ApplicationConfiguredNotification._Fields.configured_notification_id) ? getLongOrNull(rs, "configured_notification_id") : 0L,
      databases
    );
  }

  public List<ApplicationConfiguredNotification> findByApplicationId(final long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(ApplicationConfiguredNotification._Fields.application_id, value));
  }

  public List<ApplicationConfiguredNotification> findByConfiguredNotificationId(final long value) throws IOException {
    return find(Collections.<Enum, Object>singletonMap(ApplicationConfiguredNotification._Fields.configured_notification_id, value));
  }

  public ApplicationConfiguredNotificationQueryBuilder query() {
    return new ApplicationConfiguredNotificationQueryBuilder(this);
  }

  public ApplicationConfiguredNotificationDeleteBuilder delete() {
    return new ApplicationConfiguredNotificationDeleteBuilder(this);
  }
}
