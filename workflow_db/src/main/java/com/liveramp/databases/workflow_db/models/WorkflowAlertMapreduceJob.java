
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.models;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import com.rapleaf.jack.AssociationType;
import com.rapleaf.jack.AttributesWithId;
import com.rapleaf.jack.BelongsToAssociation;
import com.rapleaf.jack.DefaultAssociationMetadata;
import com.rapleaf.jack.HasManyAssociation;
import com.rapleaf.jack.HasOneAssociation;
import com.rapleaf.jack.IAssociationMetadata;
import com.rapleaf.jack.IModelAssociationMetadata;
import com.rapleaf.jack.ModelIdWrapper;
import com.rapleaf.jack.ModelWithId;
import com.rapleaf.jack.queries.AbstractTable;
import com.rapleaf.jack.queries.Column;

import com.liveramp.databases.workflow_db.IDatabases;
import com.rapleaf.jack.util.JackUtility;

public class WorkflowAlertMapreduceJob extends ModelWithId<WorkflowAlertMapreduceJob, IDatabases> implements Comparable<WorkflowAlertMapreduceJob>{
  
  public static final long serialVersionUID = 5252044116274844338L;

  public static class Tbl extends AbstractTable<WorkflowAlertMapreduceJob.Attributes, WorkflowAlertMapreduceJob> {
    public final Column<Long> ID;
    public final Column<Long> WORKFLOW_ALERT_ID;
    public final Column<Long> MAPREDUCE_JOB_ID;

    private Tbl(String alias) {
      super("workflow_alert_mapreduce_jobs", alias, WorkflowAlertMapreduceJob.Attributes.class, WorkflowAlertMapreduceJob.class);
      this.ID = Column.fromId(alias);
      this.WORKFLOW_ALERT_ID = Column.fromField(alias, _Fields.workflow_alert_id, Long.class);
      this.MAPREDUCE_JOB_ID = Column.fromField(alias, _Fields.mapreduce_job_id, Long.class);
      Collections.addAll(this.allColumns, ID, WORKFLOW_ALERT_ID, MAPREDUCE_JOB_ID);
    }

    public static Tbl as(String alias) {
      return new Tbl(alias);
    }
  }

  public static final Tbl TBL = new Tbl("workflow_alert_mapreduce_jobs");
  public static final Column<Long> ID = TBL.ID;
  public static final Column<Long> WORKFLOW_ALERT_ID = TBL.WORKFLOW_ALERT_ID;
  public static final Column<Long> MAPREDUCE_JOB_ID = TBL.MAPREDUCE_JOB_ID;

  private final Attributes attributes;

  private transient WorkflowAlertMapreduceJob.Id cachedTypedId;

  // Associations
  private BelongsToAssociation<MapreduceJob> __assoc_mapreduce_job;
  private BelongsToAssociation<WorkflowAlert> __assoc_workflow_alert;

  public enum _Fields {
    workflow_alert_id,
    mapreduce_job_id,
  }

  @Override
  public WorkflowAlertMapreduceJob.Id getTypedId() {
    if (cachedTypedId == null) {
      cachedTypedId = new WorkflowAlertMapreduceJob.Id(this.getId());
    }
    return cachedTypedId;
  }

  public WorkflowAlertMapreduceJob(long id, final long workflow_alert_id, final long mapreduce_job_id, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, workflow_alert_id, mapreduce_job_id);
    this.__assoc_mapreduce_job = new BelongsToAssociation<>(databases.getWorkflowDb().mapreduceJobs(), getMapreduceJobId());
    this.__assoc_workflow_alert = new BelongsToAssociation<>(databases.getWorkflowDb().workflowAlerts(), getWorkflowAlertId());
  }

  public WorkflowAlertMapreduceJob(long id, final long workflow_alert_id, final long mapreduce_job_id) {
    super(null);
    attributes = new Attributes(id, workflow_alert_id, mapreduce_job_id);
  }

  public static WorkflowAlertMapreduceJob newDefaultInstance(long id) {
    return new WorkflowAlertMapreduceJob(id, 0L, 0L);
  }

  public WorkflowAlertMapreduceJob(Attributes attributes, IDatabases databases) {
    super(databases);
    this.attributes = attributes;

    if (databases != null) {
      this.__assoc_mapreduce_job = new BelongsToAssociation<>(databases.getWorkflowDb().mapreduceJobs(), getMapreduceJobId());
      this.__assoc_workflow_alert = new BelongsToAssociation<>(databases.getWorkflowDb().workflowAlerts(), getWorkflowAlertId());
    }
  }

  public WorkflowAlertMapreduceJob(Attributes attributes) {
    this(attributes, (IDatabases) null);
  }

  public WorkflowAlertMapreduceJob(long id, Map<Enum, Object> fieldsMap) {
    super(null);
    attributes = new Attributes(id, fieldsMap);
  }

  public WorkflowAlertMapreduceJob (WorkflowAlertMapreduceJob other) {
    this(other, (IDatabases)null);
  }

  public WorkflowAlertMapreduceJob (WorkflowAlertMapreduceJob other, IDatabases databases) {
    super(databases);
    attributes = new Attributes(other.getAttributes());

    if (databases != null) {
      this.__assoc_mapreduce_job = new BelongsToAssociation<>(databases.getWorkflowDb().mapreduceJobs(), getMapreduceJobId());
      this.__assoc_workflow_alert = new BelongsToAssociation<>(databases.getWorkflowDb().workflowAlerts(), getWorkflowAlertId());
    }
  }

  public Attributes getAttributes() {
    return attributes;
  }

  public long getWorkflowAlertId() {
    return attributes.getWorkflowAlertId();
  }

  public WorkflowAlertMapreduceJob setWorkflowAlertId(long newval) {
    attributes.setWorkflowAlertId(newval);
    if(__assoc_workflow_alert != null){
      this.__assoc_workflow_alert.setOwnerId(newval);
    }
    cachedHashCode = 0;
    return this;
  }

  public long getMapreduceJobId() {
    return attributes.getMapreduceJobId();
  }

  public WorkflowAlertMapreduceJob setMapreduceJobId(long newval) {
    attributes.setMapreduceJobId(newval);
    if(__assoc_mapreduce_job != null){
      this.__assoc_mapreduce_job.setOwnerId(newval);
    }
    cachedHashCode = 0;
    return this;
  }

  public void setField(_Fields field, Object value) {
    switch (field) {
      case workflow_alert_id:
        setWorkflowAlertId((Long)value);
        break;
      case mapreduce_job_id:
        setMapreduceJobId((Long)value);
        break;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }
  }
  
  public void setField(String fieldName, Object value) {
    if (fieldName.equals("workflow_alert_id")) {
      setWorkflowAlertId((Long)  value);
      return;
    }
    if (fieldName.equals("mapreduce_job_id")) {
      setMapreduceJobId((Long)  value);
      return;
    }
    throw new IllegalStateException("Invalid field: " + fieldName);
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
      case workflow_alert_id:
        return long.class;
      case mapreduce_job_id:
        return long.class;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
    if (fieldName.equals("workflow_alert_id")) {
      return long.class;
    }
    if (fieldName.equals("mapreduce_job_id")) {
      return long.class;
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public MapreduceJob getMapreduceJob() throws IOException {
    return __assoc_mapreduce_job.get();
  }

  public WorkflowAlert getWorkflowAlert() throws IOException {
    return __assoc_workflow_alert.get();
  }

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
    if (fieldName.equals("workflow_alert_id")) {
      return getWorkflowAlertId();
    }
    if (fieldName.equals("mapreduce_job_id")) {
      return getMapreduceJobId();
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
      case workflow_alert_id:
        return getWorkflowAlertId();
      case mapreduce_job_id:
        return getMapreduceJobId();
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  public boolean hasField(String fieldName) {
    if (fieldName.equals("id")) {
      return true;
    }
    if (fieldName.equals("workflow_alert_id")) {
      return true;
    }
    if (fieldName.equals("mapreduce_job_id")) {
      return true;
    }
    return false;
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
      case workflow_alert_id:
        return null;
      case mapreduce_job_id:
        return null;
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public WorkflowAlertMapreduceJob getCopy() {
    return getCopy(databases);
  }

  @Override
  public WorkflowAlertMapreduceJob getCopy(IDatabases databases) {
    return new WorkflowAlertMapreduceJob(this, databases);
  }

  @Override
  public boolean save() throws IOException {
    return databases.getWorkflowDb().workflowAlertMapreduceJobs().save(this);
  }

  public MapreduceJob createMapreduceJob(final String job_identifier, final String job_name, final String tracking_url) throws IOException {
 
    MapreduceJob newMapreduceJob = databases.getWorkflowDb().mapreduceJobs().create(job_identifier, job_name, tracking_url);
    setMapreduceJobId(newMapreduceJob.getId());
    save();
    __assoc_mapreduce_job.clearCache();
    return newMapreduceJob;
  }

  public MapreduceJob createMapreduceJob(final Long step_attempt_id, final String job_identifier, final String job_name, final String tracking_url, final Long avg_map_duration, final Long median_map_duration, final Long max_map_duration, final Long min_map_duration, final Long stdev_map_duration, final Long avg_reduce_duration, final Long median_reduce_duration, final Long max_reduce_duration, final Long min_reduce_duration, final Long stdev_reduce_duration, final Integer tasks_sampled, final Integer tasks_failed_in_sample) throws IOException {
 
    MapreduceJob newMapreduceJob = databases.getWorkflowDb().mapreduceJobs().create(step_attempt_id, job_identifier, job_name, tracking_url, avg_map_duration, median_map_duration, max_map_duration, min_map_duration, stdev_map_duration, avg_reduce_duration, median_reduce_duration, max_reduce_duration, min_reduce_duration, stdev_reduce_duration, tasks_sampled, tasks_failed_in_sample);
    setMapreduceJobId(newMapreduceJob.getId());
    save();
    __assoc_mapreduce_job.clearCache();
    return newMapreduceJob;
  }

  public MapreduceJob createMapreduceJob() throws IOException {
 
    MapreduceJob newMapreduceJob = databases.getWorkflowDb().mapreduceJobs().create("", "", "");
    setMapreduceJobId(newMapreduceJob.getId());
    save();
    __assoc_mapreduce_job.clearCache();
    return newMapreduceJob;
  }

  public WorkflowAlert createWorkflowAlert() throws IOException {
 
    WorkflowAlert newWorkflowAlert = databases.getWorkflowDb().workflowAlerts().create();
    setWorkflowAlertId(newWorkflowAlert.getId());
    save();
    __assoc_workflow_alert.clearCache();
    return newWorkflowAlert;
  }

  public WorkflowAlert createWorkflowAlert(final String alert_class, final String message) throws IOException {
 
    WorkflowAlert newWorkflowAlert = databases.getWorkflowDb().workflowAlerts().create(alert_class, message);
    setWorkflowAlertId(newWorkflowAlert.getId());
    save();
    __assoc_workflow_alert.clearCache();
    return newWorkflowAlert;
  }

  public String toString() {
    return "<WorkflowAlertMapreduceJob"
        + " id: " + this.getId()
        + " workflow_alert_id: " + getWorkflowAlertId()
        + " mapreduce_job_id: " + getMapreduceJobId()
        + ">";
  }

  public void unsetAssociations() {
    unsetDatabaseReference();
    __assoc_mapreduce_job = null;
    __assoc_workflow_alert = null;
  }

  public int compareTo(WorkflowAlertMapreduceJob that) {
    return Long.valueOf(this.getId()).compareTo(that.getId());
  }
  
  
  public static class Attributes extends AttributesWithId {
    
    public static final long serialVersionUID = 2059855351732755354L;

    // Fields
    private long __workflow_alert_id;
    private long __mapreduce_job_id;

    public Attributes(long id) {
      super(id);
    }

    public Attributes(long id, final long workflow_alert_id, final long mapreduce_job_id) {
      super(id);
      this.__workflow_alert_id = workflow_alert_id;
      this.__mapreduce_job_id = mapreduce_job_id;
    }

    public static Attributes newDefaultInstance(long id) {
      return new Attributes(id, 0L, 0L);
    }

    public Attributes(long id, Map<Enum, Object> fieldsMap) {
      super(id);
      long workflow_alert_id = (Long)fieldsMap.get(WorkflowAlertMapreduceJob._Fields.workflow_alert_id);
      long mapreduce_job_id = (Long)fieldsMap.get(WorkflowAlertMapreduceJob._Fields.mapreduce_job_id);
      this.__workflow_alert_id = workflow_alert_id;
      this.__mapreduce_job_id = mapreduce_job_id;
    }

    public Attributes(Attributes other) {
      super(other.getId());
      this.__workflow_alert_id = other.getWorkflowAlertId();
      this.__mapreduce_job_id = other.getMapreduceJobId();
    }

    public long getWorkflowAlertId() {
      return __workflow_alert_id;
    }

    public Attributes setWorkflowAlertId(long newval) {
      this.__workflow_alert_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public long getMapreduceJobId() {
      return __mapreduce_job_id;
    }

    public Attributes setMapreduceJobId(long newval) {
      this.__mapreduce_job_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public void setField(_Fields field, Object value) {
      switch (field) {
        case workflow_alert_id:
          setWorkflowAlertId((Long)value);
          break;
        case mapreduce_job_id:
          setMapreduceJobId((Long)value);
          break;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }
    }

    public void setField(String fieldName, Object value) {
      if (fieldName.equals("workflow_alert_id")) {
        setWorkflowAlertId((Long)value);
        return;
      }
      if (fieldName.equals("mapreduce_job_id")) {
        setMapreduceJobId((Long)value);
        return;
      }
      throw new IllegalStateException("Invalid field: " + fieldName);
    }

    public static Class getFieldType(_Fields field) {
      switch (field) {
        case workflow_alert_id:
          return long.class;
        case mapreduce_job_id:
          return long.class;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }    
    }

    public static Class getFieldType(String fieldName) {    
      if (fieldName.equals("workflow_alert_id")) {
        return long.class;
      }
      if (fieldName.equals("mapreduce_job_id")) {
        return long.class;
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    @Override
    public Object getField(String fieldName) {
      if (fieldName.equals("id")) {
        return getId();
      }
      if (fieldName.equals("workflow_alert_id")) {
        return getWorkflowAlertId();
      }
      if (fieldName.equals("mapreduce_job_id")) {
        return getMapreduceJobId();
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    public Object getField(_Fields field) {
      switch (field) {
        case workflow_alert_id:
          return getWorkflowAlertId();
        case mapreduce_job_id:
          return getMapreduceJobId();
      }
      throw new IllegalStateException("Invalid field: " + field);
    }

    public boolean hasField(String fieldName) {
      if (fieldName.equals("id")) {
        return true;
      }
      if (fieldName.equals("workflow_alert_id")) {
        return true;
      }
      if (fieldName.equals("mapreduce_job_id")) {
        return true;
      }
      return false;
    }

    public static Object getDefaultValue(_Fields field) {
      switch (field) {
        case workflow_alert_id:
          return null;
        case mapreduce_job_id:
          return null;
      }
      throw new IllegalStateException("Invalid field: " + field);
    }
    
    @Override
    public Set<Enum> getFieldSet() {
      Set set = EnumSet.allOf(_Fields.class);
      return set;
    }
    
    public String toString() {
      return "<WorkflowAlertMapreduceJob.Attributes"
          + " workflow_alert_id: " + getWorkflowAlertId()
          + " mapreduce_job_id: " + getMapreduceJobId()
          + ">";
    }
  }

  public static class Id implements ModelIdWrapper<WorkflowAlertMapreduceJob.Id> {
    public static final long serialVersionUID = 1L;

    private final long id;

    public Id(Long id) {
      this.id = id;
    }

    @Override
    public Long getId() {
      return id;
    }

    @Override
    public int compareTo(Id other) {
      return this.getId().compareTo(other.getId());
    }

    @Override
    public boolean equals(Object other) {
      if (other instanceof Id) {
        return this.getId().equals(((Id)other).getId());
      }
      return false;
    }

    @Override
    public int hashCode() {
      return this.getId().hashCode();
    }

    @Override
    public String toString() {
      return "<WorkflowAlertMapreduceJob.Id: " + this.getId() + ">";
    }
  }

  public static Set<Attributes> convertToAttributesSet(Collection<WorkflowAlertMapreduceJob> models) {
    return models.stream()
        .map(WorkflowAlertMapreduceJob::getAttributes)
        .collect(Collectors.toSet());
  }

  public static class AssociationMetadata implements IModelAssociationMetadata {

    private List<IAssociationMetadata> meta = new ArrayList<>();

    public AssociationMetadata(){
      meta.add(new DefaultAssociationMetadata(AssociationType.BELONGS_TO, WorkflowAlertMapreduceJob.class, MapreduceJob.class, "mapreduce_job_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.BELONGS_TO, WorkflowAlertMapreduceJob.class, WorkflowAlert.class, "workflow_alert_id"));
    }

    @Override
    public List<IAssociationMetadata> getAssociationMetadata() {
      return meta;
    }
  }

}
