
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.models;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import com.rapleaf.jack.AssociationType;
import com.rapleaf.jack.AttributesWithId;
import com.rapleaf.jack.BelongsToAssociation;
import com.rapleaf.jack.DefaultAssociationMetadata;
import com.rapleaf.jack.HasManyAssociation;
import com.rapleaf.jack.HasOneAssociation;
import com.rapleaf.jack.IAssociationMetadata;
import com.rapleaf.jack.IModelAssociationMetadata;
import com.rapleaf.jack.ModelIdWrapper;
import com.rapleaf.jack.ModelWithId;
import com.rapleaf.jack.queries.AbstractTable;
import com.rapleaf.jack.queries.Column;

import com.liveramp.databases.workflow_db.IDatabases;
import com.rapleaf.jack.util.JackUtility;

public class DashboardApplication extends ModelWithId<DashboardApplication, IDatabases> implements Comparable<DashboardApplication>{
  
  public static final long serialVersionUID = -6716829222999069456L;

  public static class Tbl extends AbstractTable<DashboardApplication.Attributes, DashboardApplication> {
    public final Column<Long> ID;
    public final Column<Integer> DASHBOARD_ID;
    public final Column<Integer> APPLICATION_ID;

    private Tbl(String alias) {
      super("dashboard_applications", alias, DashboardApplication.Attributes.class, DashboardApplication.class);
      this.ID = Column.fromId(alias);
      this.DASHBOARD_ID = Column.fromField(alias, _Fields.dashboard_id, Integer.class);
      this.APPLICATION_ID = Column.fromField(alias, _Fields.application_id, Integer.class);
      Collections.addAll(this.allColumns, ID, DASHBOARD_ID, APPLICATION_ID);
    }

    public static Tbl as(String alias) {
      return new Tbl(alias);
    }
  }

  public static final Tbl TBL = new Tbl("dashboard_applications");
  public static final Column<Long> ID = TBL.ID;
  public static final Column<Integer> DASHBOARD_ID = TBL.DASHBOARD_ID;
  public static final Column<Integer> APPLICATION_ID = TBL.APPLICATION_ID;

  private final Attributes attributes;

  private transient DashboardApplication.Id cachedTypedId;

  // Associations
  private BelongsToAssociation<Dashboard> __assoc_dashboard;
  private BelongsToAssociation<Application> __assoc_application;

  public enum _Fields {
    dashboard_id,
    application_id,
  }

  @Override
  public DashboardApplication.Id getTypedId() {
    if (cachedTypedId == null) {
      cachedTypedId = new DashboardApplication.Id(this.getId());
    }
    return cachedTypedId;
  }

  public DashboardApplication(long id, final int dashboard_id, final int application_id, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, dashboard_id, application_id);
    this.__assoc_dashboard = new BelongsToAssociation<>(databases.getWorkflowDb().dashboards(), (long) getDashboardId());
    this.__assoc_application = new BelongsToAssociation<>(databases.getWorkflowDb().applications(), (long) getApplicationId());
  }

  public DashboardApplication(long id, final int dashboard_id, final int application_id) {
    super(null);
    attributes = new Attributes(id, dashboard_id, application_id);
  }

  public static DashboardApplication newDefaultInstance(long id) {
    return new DashboardApplication(id, 0, 0);
  }

  public DashboardApplication(Attributes attributes, IDatabases databases) {
    super(databases);
    this.attributes = attributes;

    if (databases != null) {
      this.__assoc_dashboard = new BelongsToAssociation<>(databases.getWorkflowDb().dashboards(), (long) getDashboardId());
      this.__assoc_application = new BelongsToAssociation<>(databases.getWorkflowDb().applications(), (long) getApplicationId());
    }
  }

  public DashboardApplication(Attributes attributes) {
    this(attributes, (IDatabases) null);
  }

  public DashboardApplication(long id, Map<Enum, Object> fieldsMap) {
    super(null);
    attributes = new Attributes(id, fieldsMap);
  }

  public DashboardApplication (DashboardApplication other) {
    this(other, (IDatabases)null);
  }

  public DashboardApplication (DashboardApplication other, IDatabases databases) {
    super(databases);
    attributes = new Attributes(other.getAttributes());

    if (databases != null) {
      this.__assoc_dashboard = new BelongsToAssociation<>(databases.getWorkflowDb().dashboards(), (long) getDashboardId());
      this.__assoc_application = new BelongsToAssociation<>(databases.getWorkflowDb().applications(), (long) getApplicationId());
    }
  }

  public Attributes getAttributes() {
    return attributes;
  }

  public int getDashboardId() {
    return attributes.getDashboardId();
  }

  public DashboardApplication setDashboardId(int newval) {
    attributes.setDashboardId(newval);
    if(__assoc_dashboard != null){
      this.__assoc_dashboard.setOwnerId(newval);
    }
    cachedHashCode = 0;
    return this;
  }

  public int getApplicationId() {
    return attributes.getApplicationId();
  }

  public DashboardApplication setApplicationId(int newval) {
    attributes.setApplicationId(newval);
    if(__assoc_application != null){
      this.__assoc_application.setOwnerId(newval);
    }
    cachedHashCode = 0;
    return this;
  }

  public void setField(_Fields field, Object value) {
    switch (field) {
      case dashboard_id:
        setDashboardId((Integer)value);
        break;
      case application_id:
        setApplicationId((Integer)value);
        break;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }
  }
  
  public void setField(String fieldName, Object value) {
    if (fieldName.equals("dashboard_id")) {
      setDashboardId((Integer)  value);
      return;
    }
    if (fieldName.equals("application_id")) {
      setApplicationId((Integer)  value);
      return;
    }
    throw new IllegalStateException("Invalid field: " + fieldName);
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
      case dashboard_id:
        return int.class;
      case application_id:
        return int.class;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
    if (fieldName.equals("dashboard_id")) {
      return int.class;
    }
    if (fieldName.equals("application_id")) {
      return int.class;
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Dashboard getDashboard() throws IOException {
    return __assoc_dashboard.get();
  }

  public Application getApplication() throws IOException {
    return __assoc_application.get();
  }

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
    if (fieldName.equals("dashboard_id")) {
      return getDashboardId();
    }
    if (fieldName.equals("application_id")) {
      return getApplicationId();
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
      case dashboard_id:
        return getDashboardId();
      case application_id:
        return getApplicationId();
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  public boolean hasField(String fieldName) {
    if (fieldName.equals("id")) {
      return true;
    }
    if (fieldName.equals("dashboard_id")) {
      return true;
    }
    if (fieldName.equals("application_id")) {
      return true;
    }
    return false;
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
      case dashboard_id:
        return null;
      case application_id:
        return null;
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public DashboardApplication getCopy() {
    return getCopy(databases);
  }

  @Override
  public DashboardApplication getCopy(IDatabases databases) {
    return new DashboardApplication(this, databases);
  }

  @Override
  public boolean save() throws IOException {
    return databases.getWorkflowDb().dashboardApplications().save(this);
  }

  public Dashboard createDashboard(final String name) throws IOException {
 
    Dashboard newDashboard = databases.getWorkflowDb().dashboards().create(name);
    setDashboardId(JackUtility.safeLongToInt(newDashboard.getId()));
    save();
    __assoc_dashboard.clearCache();
    return newDashboard;
  }

  public Dashboard createDashboard() throws IOException {
 
    Dashboard newDashboard = databases.getWorkflowDb().dashboards().create("");
    setDashboardId(JackUtility.safeLongToInt(newDashboard.getId()));
    save();
    __assoc_dashboard.clearCache();
    return newDashboard;
  }

  public Application createApplication(final String name) throws IOException {
 
    Application newApplication = databases.getWorkflowDb().applications().create(name);
    setApplicationId(JackUtility.safeLongToInt(newApplication.getId()));
    save();
    __assoc_application.clearCache();
    return newApplication;
  }

  public Application createApplication(final String name, final Integer app_type) throws IOException {
 
    Application newApplication = databases.getWorkflowDb().applications().create(name, app_type);
    setApplicationId(JackUtility.safeLongToInt(newApplication.getId()));
    save();
    __assoc_application.clearCache();
    return newApplication;
  }

  public Application createApplication() throws IOException {
 
    Application newApplication = databases.getWorkflowDb().applications().create("");
    setApplicationId(JackUtility.safeLongToInt(newApplication.getId()));
    save();
    __assoc_application.clearCache();
    return newApplication;
  }

  public String toString() {
    return "<DashboardApplication"
        + " id: " + this.getId()
        + " dashboard_id: " + getDashboardId()
        + " application_id: " + getApplicationId()
        + ">";
  }

  public void unsetAssociations() {
    unsetDatabaseReference();
    __assoc_dashboard = null;
    __assoc_application = null;
  }

  public int compareTo(DashboardApplication that) {
    return Long.valueOf(this.getId()).compareTo(that.getId());
  }
  
  
  public static class Attributes extends AttributesWithId {
    
    public static final long serialVersionUID = 20902124323012440L;

    // Fields
    private int __dashboard_id;
    private int __application_id;

    public Attributes(long id) {
      super(id);
    }

    public Attributes(long id, final int dashboard_id, final int application_id) {
      super(id);
      this.__dashboard_id = dashboard_id;
      this.__application_id = application_id;
    }

    public static Attributes newDefaultInstance(long id) {
      return new Attributes(id, 0, 0);
    }

    public Attributes(long id, Map<Enum, Object> fieldsMap) {
      super(id);
      int dashboard_id = (Integer)fieldsMap.get(DashboardApplication._Fields.dashboard_id);
      int application_id = (Integer)fieldsMap.get(DashboardApplication._Fields.application_id);
      this.__dashboard_id = dashboard_id;
      this.__application_id = application_id;
    }

    public Attributes(Attributes other) {
      super(other.getId());
      this.__dashboard_id = other.getDashboardId();
      this.__application_id = other.getApplicationId();
    }

    public int getDashboardId() {
      return __dashboard_id;
    }

    public Attributes setDashboardId(int newval) {
      this.__dashboard_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public int getApplicationId() {
      return __application_id;
    }

    public Attributes setApplicationId(int newval) {
      this.__application_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public void setField(_Fields field, Object value) {
      switch (field) {
        case dashboard_id:
          setDashboardId((Integer)value);
          break;
        case application_id:
          setApplicationId((Integer)value);
          break;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }
    }

    public void setField(String fieldName, Object value) {
      if (fieldName.equals("dashboard_id")) {
        setDashboardId((Integer)value);
        return;
      }
      if (fieldName.equals("application_id")) {
        setApplicationId((Integer)value);
        return;
      }
      throw new IllegalStateException("Invalid field: " + fieldName);
    }

    public static Class getFieldType(_Fields field) {
      switch (field) {
        case dashboard_id:
          return int.class;
        case application_id:
          return int.class;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }    
    }

    public static Class getFieldType(String fieldName) {    
      if (fieldName.equals("dashboard_id")) {
        return int.class;
      }
      if (fieldName.equals("application_id")) {
        return int.class;
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    @Override
    public Object getField(String fieldName) {
      if (fieldName.equals("id")) {
        return getId();
      }
      if (fieldName.equals("dashboard_id")) {
        return getDashboardId();
      }
      if (fieldName.equals("application_id")) {
        return getApplicationId();
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    public Object getField(_Fields field) {
      switch (field) {
        case dashboard_id:
          return getDashboardId();
        case application_id:
          return getApplicationId();
      }
      throw new IllegalStateException("Invalid field: " + field);
    }

    public boolean hasField(String fieldName) {
      if (fieldName.equals("id")) {
        return true;
      }
      if (fieldName.equals("dashboard_id")) {
        return true;
      }
      if (fieldName.equals("application_id")) {
        return true;
      }
      return false;
    }

    public static Object getDefaultValue(_Fields field) {
      switch (field) {
        case dashboard_id:
          return null;
        case application_id:
          return null;
      }
      throw new IllegalStateException("Invalid field: " + field);
    }
    
    @Override
    public Set<Enum> getFieldSet() {
      Set set = EnumSet.allOf(_Fields.class);
      return set;
    }
    
    public String toString() {
      return "<DashboardApplication.Attributes"
          + " dashboard_id: " + getDashboardId()
          + " application_id: " + getApplicationId()
          + ">";
    }
  }

  public static class Id implements ModelIdWrapper<DashboardApplication.Id> {
    public static final long serialVersionUID = 1L;

    private final long id;

    public Id(Long id) {
      this.id = id;
    }

    @Override
    public Long getId() {
      return id;
    }

    @Override
    public int compareTo(Id other) {
      return this.getId().compareTo(other.getId());
    }

    @Override
    public boolean equals(Object other) {
      if (other instanceof Id) {
        return this.getId().equals(((Id)other).getId());
      }
      return false;
    }

    @Override
    public int hashCode() {
      return this.getId().hashCode();
    }

    @Override
    public String toString() {
      return "<DashboardApplication.Id: " + this.getId() + ">";
    }
  }

  public static Set<Attributes> convertToAttributesSet(Collection<DashboardApplication> models) {
    return models.stream()
        .map(DashboardApplication::getAttributes)
        .collect(Collectors.toSet());
  }

  public static class AssociationMetadata implements IModelAssociationMetadata {

    private List<IAssociationMetadata> meta = new ArrayList<>();

    public AssociationMetadata(){
      meta.add(new DefaultAssociationMetadata(AssociationType.BELONGS_TO, DashboardApplication.class, Dashboard.class, "dashboard_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.BELONGS_TO, DashboardApplication.class, Application.class, "application_id"));
    }

    @Override
    public List<IAssociationMetadata> getAssociationMetadata() {
      return meta;
    }
  }

}
