
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.models;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import com.rapleaf.jack.AssociationType;
import com.rapleaf.jack.AttributesWithId;
import com.rapleaf.jack.BelongsToAssociation;
import com.rapleaf.jack.DefaultAssociationMetadata;
import com.rapleaf.jack.HasManyAssociation;
import com.rapleaf.jack.HasOneAssociation;
import com.rapleaf.jack.IAssociationMetadata;
import com.rapleaf.jack.IModelAssociationMetadata;
import com.rapleaf.jack.ModelIdWrapper;
import com.rapleaf.jack.ModelWithId;
import com.rapleaf.jack.queries.AbstractTable;
import com.rapleaf.jack.queries.Column;

import com.liveramp.databases.workflow_db.IDatabases;
import com.rapleaf.jack.util.JackUtility;

public class StepDependency extends ModelWithId<StepDependency, IDatabases> implements Comparable<StepDependency>{
  
  public static final long serialVersionUID = -7032903375238473963L;

  public static class Tbl extends AbstractTable<StepDependency.Attributes, StepDependency> {
    public final Column<Long> ID;
    public final Column<Long> STEP_ATTEMPT_ID;
    public final Column<Long> DEPENDENCY_ATTEMPT_ID;

    private Tbl(String alias) {
      super("step_dependencies", alias, StepDependency.Attributes.class, StepDependency.class);
      this.ID = Column.fromId(alias);
      this.STEP_ATTEMPT_ID = Column.fromField(alias, _Fields.step_attempt_id, Long.class);
      this.DEPENDENCY_ATTEMPT_ID = Column.fromField(alias, _Fields.dependency_attempt_id, Long.class);
      Collections.addAll(this.allColumns, ID, STEP_ATTEMPT_ID, DEPENDENCY_ATTEMPT_ID);
    }

    public static Tbl as(String alias) {
      return new Tbl(alias);
    }
  }

  public static final Tbl TBL = new Tbl("step_dependencies");
  public static final Column<Long> ID = TBL.ID;
  public static final Column<Long> STEP_ATTEMPT_ID = TBL.STEP_ATTEMPT_ID;
  public static final Column<Long> DEPENDENCY_ATTEMPT_ID = TBL.DEPENDENCY_ATTEMPT_ID;

  private final Attributes attributes;

  private transient StepDependency.Id cachedTypedId;

  // Associations
  private BelongsToAssociation<StepAttempt> __assoc_step_attempt;
  private BelongsToAssociation<StepAttempt> __assoc_dependency_attempt;

  public enum _Fields {
    step_attempt_id,
    dependency_attempt_id,
  }

  @Override
  public StepDependency.Id getTypedId() {
    if (cachedTypedId == null) {
      cachedTypedId = new StepDependency.Id(this.getId());
    }
    return cachedTypedId;
  }

  public StepDependency(long id, final long step_attempt_id, final long dependency_attempt_id, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, step_attempt_id, dependency_attempt_id);
    this.__assoc_step_attempt = new BelongsToAssociation<>(databases.getWorkflowDb().stepAttempts(), getStepAttemptId());
    this.__assoc_dependency_attempt = new BelongsToAssociation<>(databases.getWorkflowDb().stepAttempts(), getDependencyAttemptId());
  }

  public StepDependency(long id, final long step_attempt_id, final long dependency_attempt_id) {
    super(null);
    attributes = new Attributes(id, step_attempt_id, dependency_attempt_id);
  }

  public static StepDependency newDefaultInstance(long id) {
    return new StepDependency(id, 0L, 0L);
  }

  public StepDependency(Attributes attributes, IDatabases databases) {
    super(databases);
    this.attributes = attributes;

    if (databases != null) {
      this.__assoc_step_attempt = new BelongsToAssociation<>(databases.getWorkflowDb().stepAttempts(), getStepAttemptId());
      this.__assoc_dependency_attempt = new BelongsToAssociation<>(databases.getWorkflowDb().stepAttempts(), getDependencyAttemptId());
    }
  }

  public StepDependency(Attributes attributes) {
    this(attributes, (IDatabases) null);
  }

  public StepDependency(long id, Map<Enum, Object> fieldsMap) {
    super(null);
    attributes = new Attributes(id, fieldsMap);
  }

  public StepDependency (StepDependency other) {
    this(other, (IDatabases)null);
  }

  public StepDependency (StepDependency other, IDatabases databases) {
    super(databases);
    attributes = new Attributes(other.getAttributes());

    if (databases != null) {
      this.__assoc_step_attempt = new BelongsToAssociation<>(databases.getWorkflowDb().stepAttempts(), getStepAttemptId());
      this.__assoc_dependency_attempt = new BelongsToAssociation<>(databases.getWorkflowDb().stepAttempts(), getDependencyAttemptId());
    }
  }

  public Attributes getAttributes() {
    return attributes;
  }

  public long getStepAttemptId() {
    return attributes.getStepAttemptId();
  }

  public StepDependency setStepAttemptId(long newval) {
    attributes.setStepAttemptId(newval);
    if(__assoc_step_attempt != null){
      this.__assoc_step_attempt.setOwnerId(newval);
    }
    cachedHashCode = 0;
    return this;
  }

  public long getDependencyAttemptId() {
    return attributes.getDependencyAttemptId();
  }

  public StepDependency setDependencyAttemptId(long newval) {
    attributes.setDependencyAttemptId(newval);
    if(__assoc_dependency_attempt != null){
      this.__assoc_dependency_attempt.setOwnerId(newval);
    }
    cachedHashCode = 0;
    return this;
  }

  public void setField(_Fields field, Object value) {
    switch (field) {
      case step_attempt_id:
        setStepAttemptId((Long)value);
        break;
      case dependency_attempt_id:
        setDependencyAttemptId((Long)value);
        break;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }
  }
  
  public void setField(String fieldName, Object value) {
    if (fieldName.equals("step_attempt_id")) {
      setStepAttemptId((Long)  value);
      return;
    }
    if (fieldName.equals("dependency_attempt_id")) {
      setDependencyAttemptId((Long)  value);
      return;
    }
    throw new IllegalStateException("Invalid field: " + fieldName);
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
      case step_attempt_id:
        return long.class;
      case dependency_attempt_id:
        return long.class;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
    if (fieldName.equals("step_attempt_id")) {
      return long.class;
    }
    if (fieldName.equals("dependency_attempt_id")) {
      return long.class;
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public StepAttempt getStepAttempt() throws IOException {
    return __assoc_step_attempt.get();
  }

  public StepAttempt getDependencyAttempt() throws IOException {
    return __assoc_dependency_attempt.get();
  }

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
    if (fieldName.equals("step_attempt_id")) {
      return getStepAttemptId();
    }
    if (fieldName.equals("dependency_attempt_id")) {
      return getDependencyAttemptId();
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
      case step_attempt_id:
        return getStepAttemptId();
      case dependency_attempt_id:
        return getDependencyAttemptId();
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  public boolean hasField(String fieldName) {
    if (fieldName.equals("id")) {
      return true;
    }
    if (fieldName.equals("step_attempt_id")) {
      return true;
    }
    if (fieldName.equals("dependency_attempt_id")) {
      return true;
    }
    return false;
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
      case step_attempt_id:
        return null;
      case dependency_attempt_id:
        return null;
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public StepDependency getCopy() {
    return getCopy(databases);
  }

  @Override
  public StepDependency getCopy(IDatabases databases) {
    return new StepDependency(this, databases);
  }

  @Override
  public boolean save() throws IOException {
    return databases.getWorkflowDb().stepDependencies().save(this);
  }

  public StepAttempt createStepAttempt(final int workflow_attempt_id, final String step_token, final int step_status, final String action_class) throws IOException {
 
    StepAttempt newStepAttempt = databases.getWorkflowDb().stepAttempts().create(workflow_attempt_id, step_token, step_status, action_class);
    setStepAttemptId(newStepAttempt.getId());
    save();
    __assoc_step_attempt.clearCache();
    return newStepAttempt;
  }

  public StepAttempt createStepAttempt(final int workflow_attempt_id, final String step_token, final Long start_time, final Long end_time, final int step_status, final String failure_cause, final String failure_trace, final String action_class, final String status_message) throws IOException {
 
    StepAttempt newStepAttempt = databases.getWorkflowDb().stepAttempts().create(workflow_attempt_id, step_token, start_time, end_time, step_status, failure_cause, failure_trace, action_class, status_message);
    setStepAttemptId(newStepAttempt.getId());
    save();
    __assoc_step_attempt.clearCache();
    return newStepAttempt;
  }

  public StepAttempt createStepAttempt() throws IOException {
 
    StepAttempt newStepAttempt = databases.getWorkflowDb().stepAttempts().create(0, "", 0, "");
    setStepAttemptId(newStepAttempt.getId());
    save();
    __assoc_step_attempt.clearCache();
    return newStepAttempt;
  }

  public StepAttempt createDependencyAttempt(final int workflow_attempt_id, final String step_token, final int step_status, final String action_class) throws IOException {
 
    StepAttempt newStepAttempt = databases.getWorkflowDb().stepAttempts().create(workflow_attempt_id, step_token, step_status, action_class);
    setDependencyAttemptId(newStepAttempt.getId());
    save();
    __assoc_dependency_attempt.clearCache();
    return newStepAttempt;
  }

  public StepAttempt createDependencyAttempt(final int workflow_attempt_id, final String step_token, final Long start_time, final Long end_time, final int step_status, final String failure_cause, final String failure_trace, final String action_class, final String status_message) throws IOException {
 
    StepAttempt newStepAttempt = databases.getWorkflowDb().stepAttempts().create(workflow_attempt_id, step_token, start_time, end_time, step_status, failure_cause, failure_trace, action_class, status_message);
    setDependencyAttemptId(newStepAttempt.getId());
    save();
    __assoc_dependency_attempt.clearCache();
    return newStepAttempt;
  }

  public StepAttempt createDependencyAttempt() throws IOException {
 
    StepAttempt newStepAttempt = databases.getWorkflowDb().stepAttempts().create(0, "", 0, "");
    setDependencyAttemptId(newStepAttempt.getId());
    save();
    __assoc_dependency_attempt.clearCache();
    return newStepAttempt;
  }

  public String toString() {
    return "<StepDependency"
        + " id: " + this.getId()
        + " step_attempt_id: " + getStepAttemptId()
        + " dependency_attempt_id: " + getDependencyAttemptId()
        + ">";
  }

  public void unsetAssociations() {
    unsetDatabaseReference();
    __assoc_step_attempt = null;
    __assoc_dependency_attempt = null;
  }

  public int compareTo(StepDependency that) {
    return Long.valueOf(this.getId()).compareTo(that.getId());
  }
  
  
  public static class Attributes extends AttributesWithId {
    
    public static final long serialVersionUID = -5815034814818990890L;

    // Fields
    private long __step_attempt_id;
    private long __dependency_attempt_id;

    public Attributes(long id) {
      super(id);
    }

    public Attributes(long id, final long step_attempt_id, final long dependency_attempt_id) {
      super(id);
      this.__step_attempt_id = step_attempt_id;
      this.__dependency_attempt_id = dependency_attempt_id;
    }

    public static Attributes newDefaultInstance(long id) {
      return new Attributes(id, 0L, 0L);
    }

    public Attributes(long id, Map<Enum, Object> fieldsMap) {
      super(id);
      long step_attempt_id = (Long)fieldsMap.get(StepDependency._Fields.step_attempt_id);
      long dependency_attempt_id = (Long)fieldsMap.get(StepDependency._Fields.dependency_attempt_id);
      this.__step_attempt_id = step_attempt_id;
      this.__dependency_attempt_id = dependency_attempt_id;
    }

    public Attributes(Attributes other) {
      super(other.getId());
      this.__step_attempt_id = other.getStepAttemptId();
      this.__dependency_attempt_id = other.getDependencyAttemptId();
    }

    public long getStepAttemptId() {
      return __step_attempt_id;
    }

    public Attributes setStepAttemptId(long newval) {
      this.__step_attempt_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public long getDependencyAttemptId() {
      return __dependency_attempt_id;
    }

    public Attributes setDependencyAttemptId(long newval) {
      this.__dependency_attempt_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public void setField(_Fields field, Object value) {
      switch (field) {
        case step_attempt_id:
          setStepAttemptId((Long)value);
          break;
        case dependency_attempt_id:
          setDependencyAttemptId((Long)value);
          break;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }
    }

    public void setField(String fieldName, Object value) {
      if (fieldName.equals("step_attempt_id")) {
        setStepAttemptId((Long)value);
        return;
      }
      if (fieldName.equals("dependency_attempt_id")) {
        setDependencyAttemptId((Long)value);
        return;
      }
      throw new IllegalStateException("Invalid field: " + fieldName);
    }

    public static Class getFieldType(_Fields field) {
      switch (field) {
        case step_attempt_id:
          return long.class;
        case dependency_attempt_id:
          return long.class;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }    
    }

    public static Class getFieldType(String fieldName) {    
      if (fieldName.equals("step_attempt_id")) {
        return long.class;
      }
      if (fieldName.equals("dependency_attempt_id")) {
        return long.class;
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    @Override
    public Object getField(String fieldName) {
      if (fieldName.equals("id")) {
        return getId();
      }
      if (fieldName.equals("step_attempt_id")) {
        return getStepAttemptId();
      }
      if (fieldName.equals("dependency_attempt_id")) {
        return getDependencyAttemptId();
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    public Object getField(_Fields field) {
      switch (field) {
        case step_attempt_id:
          return getStepAttemptId();
        case dependency_attempt_id:
          return getDependencyAttemptId();
      }
      throw new IllegalStateException("Invalid field: " + field);
    }

    public boolean hasField(String fieldName) {
      if (fieldName.equals("id")) {
        return true;
      }
      if (fieldName.equals("step_attempt_id")) {
        return true;
      }
      if (fieldName.equals("dependency_attempt_id")) {
        return true;
      }
      return false;
    }

    public static Object getDefaultValue(_Fields field) {
      switch (field) {
        case step_attempt_id:
          return null;
        case dependency_attempt_id:
          return null;
      }
      throw new IllegalStateException("Invalid field: " + field);
    }
    
    @Override
    public Set<Enum> getFieldSet() {
      Set set = EnumSet.allOf(_Fields.class);
      return set;
    }
    
    public String toString() {
      return "<StepDependency.Attributes"
          + " step_attempt_id: " + getStepAttemptId()
          + " dependency_attempt_id: " + getDependencyAttemptId()
          + ">";
    }
  }

  public static class Id implements ModelIdWrapper<StepDependency.Id> {
    public static final long serialVersionUID = 1L;

    private final long id;

    public Id(Long id) {
      this.id = id;
    }

    @Override
    public Long getId() {
      return id;
    }

    @Override
    public int compareTo(Id other) {
      return this.getId().compareTo(other.getId());
    }

    @Override
    public boolean equals(Object other) {
      if (other instanceof Id) {
        return this.getId().equals(((Id)other).getId());
      }
      return false;
    }

    @Override
    public int hashCode() {
      return this.getId().hashCode();
    }

    @Override
    public String toString() {
      return "<StepDependency.Id: " + this.getId() + ">";
    }
  }

  public static Set<Attributes> convertToAttributesSet(Collection<StepDependency> models) {
    return models.stream()
        .map(StepDependency::getAttributes)
        .collect(Collectors.toSet());
  }

  public static class AssociationMetadata implements IModelAssociationMetadata {

    private List<IAssociationMetadata> meta = new ArrayList<>();

    public AssociationMetadata(){
      meta.add(new DefaultAssociationMetadata(AssociationType.BELONGS_TO, StepDependency.class, StepAttempt.class, "step_attempt_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.BELONGS_TO, StepDependency.class, StepAttempt.class, "dependency_attempt_id"));
    }

    @Override
    public List<IAssociationMetadata> getAssociationMetadata() {
      return meta;
    }
  }

}
