
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.models;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import com.rapleaf.jack.AssociationType;
import com.rapleaf.jack.AttributesWithId;
import com.rapleaf.jack.BelongsToAssociation;
import com.rapleaf.jack.DefaultAssociationMetadata;
import com.rapleaf.jack.HasManyAssociation;
import com.rapleaf.jack.HasOneAssociation;
import com.rapleaf.jack.IAssociationMetadata;
import com.rapleaf.jack.IModelAssociationMetadata;
import com.rapleaf.jack.ModelIdWrapper;
import com.rapleaf.jack.ModelWithId;
import com.rapleaf.jack.queries.AbstractTable;
import com.rapleaf.jack.queries.Column;

import com.liveramp.databases.workflow_db.IDatabases;
import com.rapleaf.jack.util.JackUtility;

public class Dashboard extends ModelWithId<Dashboard, IDatabases> implements Comparable<Dashboard>{
  
  public static final long serialVersionUID = 81208951937446996L;

  public static class Tbl extends AbstractTable<Dashboard.Attributes, Dashboard> {
    public final Column<Long> ID;
    public final Column<String> NAME;

    private Tbl(String alias) {
      super("dashboards", alias, Dashboard.Attributes.class, Dashboard.class);
      this.ID = Column.fromId(alias);
      this.NAME = Column.fromField(alias, _Fields.name, String.class);
      Collections.addAll(this.allColumns, ID, NAME);
    }

    public static Tbl as(String alias) {
      return new Tbl(alias);
    }
  }

  public static final Tbl TBL = new Tbl("dashboards");
  public static final Column<Long> ID = TBL.ID;
  public static final Column<String> NAME = TBL.NAME;

  private final Attributes attributes;

  private transient Dashboard.Id cachedTypedId;

  // Associations
  private HasManyAssociation<UserDashboard> __assoc_user_dashboards;
  private HasManyAssociation<DashboardApplication> __assoc_dashboard_applications;
  private HasManyAssociation<User> __assoc_users;
  private HasManyAssociation<Application> __assoc_applications;

  public enum _Fields {
    name,
  }

  @Override
  public Dashboard.Id getTypedId() {
    if (cachedTypedId == null) {
      cachedTypedId = new Dashboard.Id(this.getId());
    }
    return cachedTypedId;
  }

  public Dashboard(long id, final String name, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, name);
    this.__assoc_user_dashboards = new HasManyAssociation<>(databases.getWorkflowDb().userDashboards(), "dashboard_id", getId());
    this.__assoc_dashboard_applications = new HasManyAssociation<>(databases.getWorkflowDb().dashboardApplications(), "dashboard_id", getId());
    this.__assoc_users = new HasManyAssociation<>(databases.getWorkflowDb().users(), "dashboard_id", getId());
    this.__assoc_applications = new HasManyAssociation<>(databases.getWorkflowDb().applications(), "dashboard_id", getId());
  }

  public Dashboard(long id, final String name) {
    super(null);
    attributes = new Attributes(id, name);
  }

  public static Dashboard newDefaultInstance(long id) {
    return new Dashboard(id, "");
  }

  public Dashboard(Attributes attributes, IDatabases databases) {
    super(databases);
    this.attributes = attributes;

    if (databases != null) {
      this.__assoc_user_dashboards = new HasManyAssociation<>(databases.getWorkflowDb().userDashboards(), "dashboard_id", getId());
      this.__assoc_dashboard_applications = new HasManyAssociation<>(databases.getWorkflowDb().dashboardApplications(), "dashboard_id", getId());
      this.__assoc_users = new HasManyAssociation<>(databases.getWorkflowDb().users(), "dashboard_id", getId());
      this.__assoc_applications = new HasManyAssociation<>(databases.getWorkflowDb().applications(), "dashboard_id", getId());
    }
  }

  public Dashboard(Attributes attributes) {
    this(attributes, (IDatabases) null);
  }

  public Dashboard(long id, Map<Enum, Object> fieldsMap) {
    super(null);
    attributes = new Attributes(id, fieldsMap);
  }

  public Dashboard (Dashboard other) {
    this(other, (IDatabases)null);
  }

  public Dashboard (Dashboard other, IDatabases databases) {
    super(databases);
    attributes = new Attributes(other.getAttributes());

    if (databases != null) {
      this.__assoc_user_dashboards = new HasManyAssociation<>(databases.getWorkflowDb().userDashboards(), "dashboard_id", getId());
      this.__assoc_dashboard_applications = new HasManyAssociation<>(databases.getWorkflowDb().dashboardApplications(), "dashboard_id", getId());
      this.__assoc_users = new HasManyAssociation<>(databases.getWorkflowDb().users(), "dashboard_id", getId());
      this.__assoc_applications = new HasManyAssociation<>(databases.getWorkflowDb().applications(), "dashboard_id", getId());
    }
  }

  public Attributes getAttributes() {
    return attributes;
  }

  public String getName() {
    return attributes.getName();
  }

  public Dashboard setName(String newval) {
    attributes.setName(newval);
    cachedHashCode = 0;
    return this;
  }

  public void setField(_Fields field, Object value) {
    switch (field) {
      case name:
        setName((String)value);
        break;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }
  }
  
  public void setField(String fieldName, Object value) {
    if (fieldName.equals("name")) {
      setName((String)  value);
      return;
    }
    throw new IllegalStateException("Invalid field: " + fieldName);
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
      case name:
        return String.class;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
    if (fieldName.equals("name")) {
      return String.class;
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public List<UserDashboard> getUserDashboards() throws IOException {
    return __assoc_user_dashboards.get();
  }

  public List<DashboardApplication> getDashboardApplications() throws IOException {
    return __assoc_dashboard_applications.get();
  }

  public List<User> getUsers() throws IOException {
    return __assoc_users.get();
  }

  public List<Application> getApplications() throws IOException {
    return __assoc_applications.get();
  }

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
    if (fieldName.equals("name")) {
      return getName();
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
      case name:
        return getName();
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  public boolean hasField(String fieldName) {
    if (fieldName.equals("id")) {
      return true;
    }
    if (fieldName.equals("name")) {
      return true;
    }
    return false;
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
      case name:
        return null;
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public Dashboard getCopy() {
    return getCopy(databases);
  }

  @Override
  public Dashboard getCopy(IDatabases databases) {
    return new Dashboard(this, databases);
  }

  @Override
  public boolean save() throws IOException {
    return databases.getWorkflowDb().dashboards().save(this);
  }

  public String toString() {
    return "<Dashboard"
        + " id: " + this.getId()
        + " name: " + getName()
        + ">";
  }

  public void unsetAssociations() {
    unsetDatabaseReference();
    __assoc_user_dashboards = null;
    __assoc_dashboard_applications = null;
    __assoc_users = null;
    __assoc_applications = null;
  }

  public int compareTo(Dashboard that) {
    return Long.valueOf(this.getId()).compareTo(that.getId());
  }
  
  
  public static class Attributes extends AttributesWithId {
    
    public static final long serialVersionUID = -5586394029305940033L;

    // Fields
    private String __name;

    public Attributes(long id) {
      super(id);
    }

    public Attributes(long id, final String name) {
      super(id);
      this.__name = name;
    }

    public static Attributes newDefaultInstance(long id) {
      return new Attributes(id, "");
    }

    public Attributes(long id, Map<Enum, Object> fieldsMap) {
      super(id);
      String name = (String)fieldsMap.get(Dashboard._Fields.name);
      this.__name = name;
    }

    public Attributes(Attributes other) {
      super(other.getId());
      this.__name = other.getName();
    }

    public String getName() {
      return __name;
    }

    public Attributes setName(String newval) {
      this.__name = newval;
      cachedHashCode = 0;
      return this;
    }

    public void setField(_Fields field, Object value) {
      switch (field) {
        case name:
          setName((String)value);
          break;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }
    }

    public void setField(String fieldName, Object value) {
      if (fieldName.equals("name")) {
        setName((String)value);
        return;
      }
      throw new IllegalStateException("Invalid field: " + fieldName);
    }

    public static Class getFieldType(_Fields field) {
      switch (field) {
        case name:
          return String.class;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }    
    }

    public static Class getFieldType(String fieldName) {    
      if (fieldName.equals("name")) {
        return String.class;
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    @Override
    public Object getField(String fieldName) {
      if (fieldName.equals("id")) {
        return getId();
      }
      if (fieldName.equals("name")) {
        return getName();
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    public Object getField(_Fields field) {
      switch (field) {
        case name:
          return getName();
      }
      throw new IllegalStateException("Invalid field: " + field);
    }

    public boolean hasField(String fieldName) {
      if (fieldName.equals("id")) {
        return true;
      }
      if (fieldName.equals("name")) {
        return true;
      }
      return false;
    }

    public static Object getDefaultValue(_Fields field) {
      switch (field) {
        case name:
          return null;
      }
      throw new IllegalStateException("Invalid field: " + field);
    }
    
    @Override
    public Set<Enum> getFieldSet() {
      Set set = EnumSet.allOf(_Fields.class);
      return set;
    }
    
    public String toString() {
      return "<Dashboard.Attributes"
          + " name: " + getName()
          + ">";
    }
  }

  public static class Id implements ModelIdWrapper<Dashboard.Id> {
    public static final long serialVersionUID = 1L;

    private final long id;

    public Id(Long id) {
      this.id = id;
    }

    @Override
    public Long getId() {
      return id;
    }

    @Override
    public int compareTo(Id other) {
      return this.getId().compareTo(other.getId());
    }

    @Override
    public boolean equals(Object other) {
      if (other instanceof Id) {
        return this.getId().equals(((Id)other).getId());
      }
      return false;
    }

    @Override
    public int hashCode() {
      return this.getId().hashCode();
    }

    @Override
    public String toString() {
      return "<Dashboard.Id: " + this.getId() + ">";
    }
  }

  public static Set<Attributes> convertToAttributesSet(Collection<Dashboard> models) {
    return models.stream()
        .map(Dashboard::getAttributes)
        .collect(Collectors.toSet());
  }

  public static class AssociationMetadata implements IModelAssociationMetadata {

    private List<IAssociationMetadata> meta = new ArrayList<>();

    public AssociationMetadata(){
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_MANY, Dashboard.class, UserDashboard.class, "dashboard_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_MANY, Dashboard.class, DashboardApplication.class, "dashboard_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_MANY, Dashboard.class, User.class, "dashboard_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.HAS_MANY, Dashboard.class, Application.class, "dashboard_id"));
    }

    @Override
    public List<IAssociationMetadata> getAssociationMetadata() {
      return meta;
    }
  }

}
