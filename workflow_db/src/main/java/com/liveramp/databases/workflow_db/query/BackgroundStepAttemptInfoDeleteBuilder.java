/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.query;

import java.util.Collection;

import com.rapleaf.jack.queries.AbstractDeleteBuilder;
import com.rapleaf.jack.queries.where_operators.IWhereOperator;
import com.rapleaf.jack.queries.where_operators.JackMatchers;
import com.rapleaf.jack.queries.WhereConstraint;
import com.liveramp.databases.workflow_db.iface.IBackgroundStepAttemptInfoPersistence;
import com.liveramp.databases.workflow_db.models.BackgroundStepAttemptInfo;


public class BackgroundStepAttemptInfoDeleteBuilder extends AbstractDeleteBuilder<BackgroundStepAttemptInfo> {

  public BackgroundStepAttemptInfoDeleteBuilder(IBackgroundStepAttemptInfoPersistence caller) {
    super(caller);
  }

  public BackgroundStepAttemptInfoDeleteBuilder id(Long value) {
    addId(value);
    return this;
  }

  public BackgroundStepAttemptInfoDeleteBuilder idIn(Collection<Long> values) {
    addIds(values);
    return this;
  }

  public BackgroundStepAttemptInfoDeleteBuilder stepAttemptId(Long value) {
    addWhereConstraint(new WhereConstraint<Long>(BackgroundStepAttemptInfo._Fields.step_attempt_id, JackMatchers.equalTo(value)));
    return this;
  }

  public BackgroundStepAttemptInfoDeleteBuilder whereStepAttemptId(IWhereOperator<Long> operator) {
    addWhereConstraint(new WhereConstraint<Long>(BackgroundStepAttemptInfo._Fields.step_attempt_id, operator));
    return this;
  }

  public BackgroundStepAttemptInfoDeleteBuilder serializedContext(byte[] value) {
    addWhereConstraint(new WhereConstraint<byte[]>(BackgroundStepAttemptInfo._Fields.serialized_context, JackMatchers.equalTo(value)));
    return this;
  }

  public BackgroundStepAttemptInfoDeleteBuilder whereSerializedContext(IWhereOperator<byte[]> operator) {
    addWhereConstraint(new WhereConstraint<byte[]>(BackgroundStepAttemptInfo._Fields.serialized_context, operator));
    return this;
  }

  public BackgroundStepAttemptInfoDeleteBuilder nextExecuteCheck(Long value) {
    addWhereConstraint(new WhereConstraint<Long>(BackgroundStepAttemptInfo._Fields.next_execute_check, JackMatchers.equalTo(value)));
    return this;
  }

  public BackgroundStepAttemptInfoDeleteBuilder whereNextExecuteCheck(IWhereOperator<Long> operator) {
    addWhereConstraint(new WhereConstraint<Long>(BackgroundStepAttemptInfo._Fields.next_execute_check, operator));
    return this;
  }

  public BackgroundStepAttemptInfoDeleteBuilder executeCheckCooldownSeconds(Integer value) {
    addWhereConstraint(new WhereConstraint<Integer>(BackgroundStepAttemptInfo._Fields.execute_check_cooldown_seconds, JackMatchers.equalTo(value)));
    return this;
  }

  public BackgroundStepAttemptInfoDeleteBuilder whereExecuteCheckCooldownSeconds(IWhereOperator<Integer> operator) {
    addWhereConstraint(new WhereConstraint<Integer>(BackgroundStepAttemptInfo._Fields.execute_check_cooldown_seconds, operator));
    return this;
  }

  public BackgroundStepAttemptInfoDeleteBuilder claimedByWorker(String value) {
    addWhereConstraint(new WhereConstraint<String>(BackgroundStepAttemptInfo._Fields.claimed_by_worker, JackMatchers.equalTo(value)));
    return this;
  }

  public BackgroundStepAttemptInfoDeleteBuilder whereClaimedByWorker(IWhereOperator<String> operator) {
    addWhereConstraint(new WhereConstraint<String>(BackgroundStepAttemptInfo._Fields.claimed_by_worker, operator));
    return this;
  }

  public BackgroundStepAttemptInfoDeleteBuilder backgroundWorkflowExecutorInfoId(Integer value) {
    addWhereConstraint(new WhereConstraint<Integer>(BackgroundStepAttemptInfo._Fields.background_workflow_executor_info_id, JackMatchers.equalTo(value)));
    return this;
  }

  public BackgroundStepAttemptInfoDeleteBuilder whereBackgroundWorkflowExecutorInfoId(IWhereOperator<Integer> operator) {
    addWhereConstraint(new WhereConstraint<Integer>(BackgroundStepAttemptInfo._Fields.background_workflow_executor_info_id, operator));
    return this;
  }
}
