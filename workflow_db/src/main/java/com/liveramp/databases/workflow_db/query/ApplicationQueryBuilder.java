/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.query;

import java.util.Collection;

import com.rapleaf.jack.queries.AbstractQueryBuilder;
import com.rapleaf.jack.queries.Column;
import com.rapleaf.jack.queries.FieldSelector;
import com.rapleaf.jack.queries.where_operators.IWhereOperator;
import com.rapleaf.jack.queries.where_operators.JackMatchers;
import com.rapleaf.jack.queries.WhereConstraint;
import com.rapleaf.jack.queries.QueryOrder;
import com.rapleaf.jack.queries.OrderCriterion;
import com.rapleaf.jack.queries.LimitCriterion;
import com.liveramp.databases.workflow_db.iface.IApplicationPersistence;
import com.liveramp.databases.workflow_db.models.Application;


public class ApplicationQueryBuilder extends AbstractQueryBuilder<Application> {

  public ApplicationQueryBuilder(IApplicationPersistence caller) {
    super(caller);
  }

  public ApplicationQueryBuilder select(Application._Fields... fields) {
    for (Application._Fields field : fields){
      addSelectedField(new FieldSelector(field));
    }
    return this;
  }

  public ApplicationQueryBuilder selectAgg(FieldSelector... aggregatedFields) {
    addSelectedFields(aggregatedFields);
    return this;
  }

  public ApplicationQueryBuilder id(Long value) {
    addId(value);
    return this;
  }

  public ApplicationQueryBuilder idIn(Collection<Long> values) {
    addIds(values);
    return this;
  }

  public ApplicationQueryBuilder whereId(IWhereOperator<Long> operator) {
    addWhereConstraint(new WhereConstraint<>(Column.fromId(null), operator, null));
    return this;
  }

  public ApplicationQueryBuilder limit(int offset, int nResults) {
    setLimit(new LimitCriterion(offset, nResults));
    return this;
  }

  public ApplicationQueryBuilder limit(int nResults) {
    setLimit(new LimitCriterion(nResults));
    return this;
  }

  public ApplicationQueryBuilder groupBy(Application._Fields... fields) {
    addGroupByFields(fields);
    return this;
  }

  public ApplicationQueryBuilder order() {
    this.addOrder(new OrderCriterion(QueryOrder.ASC));
    return this;
  }

  public ApplicationQueryBuilder order(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(queryOrder));
    return this;
  }

  public ApplicationQueryBuilder orderById() {
    this.addOrder(new OrderCriterion(QueryOrder.ASC));
    return this;
  }

  public ApplicationQueryBuilder orderById(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(queryOrder));
    return this;
  }

  public ApplicationQueryBuilder name(String value) {
    addWhereConstraint(new WhereConstraint<>(Application._Fields.name, JackMatchers.equalTo(value)));
    return this;
  }

  public ApplicationQueryBuilder whereName(IWhereOperator<String> operator) {
    addWhereConstraint(new WhereConstraint<>(Application._Fields.name, operator));
    return this;
  }

  public ApplicationQueryBuilder orderByName() {
    this.addOrder(new OrderCriterion(Application._Fields.name, QueryOrder.ASC));
    return this;
  }

  public ApplicationQueryBuilder orderByName(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(Application._Fields.name, queryOrder));
    return this;
  }

  public ApplicationQueryBuilder appType(Integer value) {
    addWhereConstraint(new WhereConstraint<>(Application._Fields.app_type, JackMatchers.equalTo(value)));
    return this;
  }

  public ApplicationQueryBuilder whereAppType(IWhereOperator<Integer> operator) {
    addWhereConstraint(new WhereConstraint<>(Application._Fields.app_type, operator));
    return this;
  }

  public ApplicationQueryBuilder orderByAppType() {
    this.addOrder(new OrderCriterion(Application._Fields.app_type, QueryOrder.ASC));
    return this;
  }

  public ApplicationQueryBuilder orderByAppType(QueryOrder queryOrder) {
    this.addOrder(new OrderCriterion(Application._Fields.app_type, queryOrder));
    return this;
  }
}
