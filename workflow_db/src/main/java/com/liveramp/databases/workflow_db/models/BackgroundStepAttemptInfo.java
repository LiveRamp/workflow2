
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.databases.workflow_db.models;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import com.rapleaf.jack.AssociationType;
import com.rapleaf.jack.AttributesWithId;
import com.rapleaf.jack.BelongsToAssociation;
import com.rapleaf.jack.DefaultAssociationMetadata;
import com.rapleaf.jack.HasManyAssociation;
import com.rapleaf.jack.HasOneAssociation;
import com.rapleaf.jack.IAssociationMetadata;
import com.rapleaf.jack.IModelAssociationMetadata;
import com.rapleaf.jack.ModelIdWrapper;
import com.rapleaf.jack.ModelWithId;
import com.rapleaf.jack.queries.AbstractTable;
import com.rapleaf.jack.queries.Column;

import com.liveramp.databases.workflow_db.IDatabases;
import com.rapleaf.jack.util.JackUtility;

public class BackgroundStepAttemptInfo extends ModelWithId<BackgroundStepAttemptInfo, IDatabases> implements Comparable<BackgroundStepAttemptInfo>{
  
  public static final long serialVersionUID = -4354594951639899680L;

  public static class Tbl extends AbstractTable<BackgroundStepAttemptInfo.Attributes, BackgroundStepAttemptInfo> {
    public final Column<Long> ID;
    public final Column<Long> STEP_ATTEMPT_ID;
    public final Column<byte[]> SERIALIZED_CONTEXT;
    public final Column<Long> NEXT_EXECUTE_CHECK;
    public final Column<Integer> EXECUTE_CHECK_COOLDOWN_SECONDS;
    public final Column<String> CLAIMED_BY_WORKER;
    public final Column<Integer> BACKGROUND_WORKFLOW_EXECUTOR_INFO_ID;

    private Tbl(String alias) {
      super("background_step_attempt_infos", alias, BackgroundStepAttemptInfo.Attributes.class, BackgroundStepAttemptInfo.class);
      this.ID = Column.fromId(alias);
      this.STEP_ATTEMPT_ID = Column.fromField(alias, _Fields.step_attempt_id, Long.class);
      this.SERIALIZED_CONTEXT = Column.fromField(alias, _Fields.serialized_context, byte[].class);
      this.NEXT_EXECUTE_CHECK = Column.fromDate(alias, _Fields.next_execute_check);
      this.EXECUTE_CHECK_COOLDOWN_SECONDS = Column.fromField(alias, _Fields.execute_check_cooldown_seconds, Integer.class);
      this.CLAIMED_BY_WORKER = Column.fromField(alias, _Fields.claimed_by_worker, String.class);
      this.BACKGROUND_WORKFLOW_EXECUTOR_INFO_ID = Column.fromField(alias, _Fields.background_workflow_executor_info_id, Integer.class);
      Collections.addAll(this.allColumns, ID, STEP_ATTEMPT_ID, SERIALIZED_CONTEXT, NEXT_EXECUTE_CHECK, EXECUTE_CHECK_COOLDOWN_SECONDS, CLAIMED_BY_WORKER, BACKGROUND_WORKFLOW_EXECUTOR_INFO_ID);
    }

    public static Tbl as(String alias) {
      return new Tbl(alias);
    }
  }

  public static final Tbl TBL = new Tbl("background_step_attempt_infos");
  public static final Column<Long> ID = TBL.ID;
  public static final Column<Long> STEP_ATTEMPT_ID = TBL.STEP_ATTEMPT_ID;
  public static final Column<byte[]> SERIALIZED_CONTEXT = TBL.SERIALIZED_CONTEXT;
  public static final Column<Long> NEXT_EXECUTE_CHECK = TBL.NEXT_EXECUTE_CHECK;
  public static final Column<Integer> EXECUTE_CHECK_COOLDOWN_SECONDS = TBL.EXECUTE_CHECK_COOLDOWN_SECONDS;
  public static final Column<String> CLAIMED_BY_WORKER = TBL.CLAIMED_BY_WORKER;
  public static final Column<Integer> BACKGROUND_WORKFLOW_EXECUTOR_INFO_ID = TBL.BACKGROUND_WORKFLOW_EXECUTOR_INFO_ID;

  private final Attributes attributes;

  private transient BackgroundStepAttemptInfo.Id cachedTypedId;

  // Associations
  private BelongsToAssociation<StepAttempt> __assoc_step_attempt;
  private BelongsToAssociation<BackgroundWorkflowExecutorInfo> __assoc_background_workflow_executor_info;

  public enum _Fields {
    step_attempt_id,
    serialized_context,
    next_execute_check,
    execute_check_cooldown_seconds,
    claimed_by_worker,
    background_workflow_executor_info_id,
  }

  @Override
  public BackgroundStepAttemptInfo.Id getTypedId() {
    if (cachedTypedId == null) {
      cachedTypedId = new BackgroundStepAttemptInfo.Id(this.getId());
    }
    return cachedTypedId;
  }

  public BackgroundStepAttemptInfo(long id, final long step_attempt_id, final byte[] serialized_context, final long next_execute_check, final int execute_check_cooldown_seconds, final String claimed_by_worker, final Integer background_workflow_executor_info_id, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, step_attempt_id, serialized_context, next_execute_check, execute_check_cooldown_seconds, claimed_by_worker, background_workflow_executor_info_id);
    this.__assoc_step_attempt = new BelongsToAssociation<>(databases.getWorkflowDb().stepAttempts(), getStepAttemptId());
    this.__assoc_background_workflow_executor_info = new BelongsToAssociation<>(databases.getWorkflowDb().backgroundWorkflowExecutorInfos(), getBackgroundWorkflowExecutorInfoId() == null ? null : getBackgroundWorkflowExecutorInfoId().longValue());
  }

  public BackgroundStepAttemptInfo(long id, final long step_attempt_id, final byte[] serialized_context, final long next_execute_check, final int execute_check_cooldown_seconds, final String claimed_by_worker, final Integer background_workflow_executor_info_id) {
    super(null);
    attributes = new Attributes(id, step_attempt_id, serialized_context, next_execute_check, execute_check_cooldown_seconds, claimed_by_worker, background_workflow_executor_info_id);
  }
  
  public BackgroundStepAttemptInfo(long id, final long step_attempt_id, final byte[] serialized_context, final long next_execute_check, final int execute_check_cooldown_seconds, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, step_attempt_id, serialized_context, next_execute_check, execute_check_cooldown_seconds);
    this.__assoc_step_attempt = new BelongsToAssociation<>(databases.getWorkflowDb().stepAttempts(), getStepAttemptId());
    this.__assoc_background_workflow_executor_info = new BelongsToAssociation<>(databases.getWorkflowDb().backgroundWorkflowExecutorInfos(), getBackgroundWorkflowExecutorInfoId() == null ? null : getBackgroundWorkflowExecutorInfoId().longValue());
  }

  public BackgroundStepAttemptInfo(long id, final long step_attempt_id, final byte[] serialized_context, final long next_execute_check, final int execute_check_cooldown_seconds) {
    super(null);
    attributes = new Attributes(id, step_attempt_id, serialized_context, next_execute_check, execute_check_cooldown_seconds);
  }

  public static BackgroundStepAttemptInfo newDefaultInstance(long id) {
    return new BackgroundStepAttemptInfo(id, 0L, new byte[0], 0L, 0);
  }

  public BackgroundStepAttemptInfo(Attributes attributes, IDatabases databases) {
    super(databases);
    this.attributes = attributes;

    if (databases != null) {
      this.__assoc_step_attempt = new BelongsToAssociation<>(databases.getWorkflowDb().stepAttempts(), getStepAttemptId());
      this.__assoc_background_workflow_executor_info = new BelongsToAssociation<>(databases.getWorkflowDb().backgroundWorkflowExecutorInfos(), getBackgroundWorkflowExecutorInfoId() == null ? null : getBackgroundWorkflowExecutorInfoId().longValue());
    }
  }

  public BackgroundStepAttemptInfo(Attributes attributes) {
    this(attributes, (IDatabases) null);
  }

  public BackgroundStepAttemptInfo(long id, Map<Enum, Object> fieldsMap) {
    super(null);
    attributes = new Attributes(id, fieldsMap);
  }

  public BackgroundStepAttemptInfo (BackgroundStepAttemptInfo other) {
    this(other, (IDatabases)null);
  }

  public BackgroundStepAttemptInfo (BackgroundStepAttemptInfo other, IDatabases databases) {
    super(databases);
    attributes = new Attributes(other.getAttributes());

    if (databases != null) {
      this.__assoc_step_attempt = new BelongsToAssociation<>(databases.getWorkflowDb().stepAttempts(), getStepAttemptId());
      this.__assoc_background_workflow_executor_info = new BelongsToAssociation<>(databases.getWorkflowDb().backgroundWorkflowExecutorInfos(), getBackgroundWorkflowExecutorInfoId() == null ? null : getBackgroundWorkflowExecutorInfoId().longValue());
    }
  }

  public Attributes getAttributes() {
    return attributes;
  }

  public long getStepAttemptId() {
    return attributes.getStepAttemptId();
  }

  public BackgroundStepAttemptInfo setStepAttemptId(long newval) {
    attributes.setStepAttemptId(newval);
    if(__assoc_step_attempt != null){
      this.__assoc_step_attempt.setOwnerId(newval);
    }
    cachedHashCode = 0;
    return this;
  }

  public byte[] getSerializedContext() {
    return attributes.getSerializedContext();
  }

  public BackgroundStepAttemptInfo setSerializedContext(byte[] newval) {
    attributes.setSerializedContext(newval);
    cachedHashCode = 0;
    return this;
  }

  public long getNextExecuteCheck() {
    return attributes.getNextExecuteCheck();
  }

  public BackgroundStepAttemptInfo setNextExecuteCheck(long newval) {
    attributes.setNextExecuteCheck(newval);
    cachedHashCode = 0;
    return this;
  }

  public int getExecuteCheckCooldownSeconds() {
    return attributes.getExecuteCheckCooldownSeconds();
  }

  public BackgroundStepAttemptInfo setExecuteCheckCooldownSeconds(int newval) {
    attributes.setExecuteCheckCooldownSeconds(newval);
    cachedHashCode = 0;
    return this;
  }

  public String getClaimedByWorker() {
    return attributes.getClaimedByWorker();
  }

  public BackgroundStepAttemptInfo setClaimedByWorker(String newval) {
    attributes.setClaimedByWorker(newval);
    cachedHashCode = 0;
    return this;
  }

  public Integer getBackgroundWorkflowExecutorInfoId() {
    return attributes.getBackgroundWorkflowExecutorInfoId();
  }

  public BackgroundStepAttemptInfo setBackgroundWorkflowExecutorInfoId(Integer newval) {
    attributes.setBackgroundWorkflowExecutorInfoId(newval);
    if(__assoc_background_workflow_executor_info != null){
      this.__assoc_background_workflow_executor_info.setOwnerId(newval);
    }
    cachedHashCode = 0;
    return this;
  }

  public void setField(_Fields field, Object value) {
    switch (field) {
      case step_attempt_id:
        setStepAttemptId((Long)value);
        break;
      case serialized_context:
        setSerializedContext((byte[])value);
        break;
      case next_execute_check:
        setNextExecuteCheck((Long)value);
        break;
      case execute_check_cooldown_seconds:
        setExecuteCheckCooldownSeconds((Integer)value);
        break;
      case claimed_by_worker:
        setClaimedByWorker((String)value);
        break;
      case background_workflow_executor_info_id:
        setBackgroundWorkflowExecutorInfoId((Integer)value);
        break;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }
  }
  
  public void setField(String fieldName, Object value) {
    if (fieldName.equals("step_attempt_id")) {
      setStepAttemptId((Long)  value);
      return;
    }
    if (fieldName.equals("serialized_context")) {
      setSerializedContext((byte[])  value);
      return;
    }
    if (fieldName.equals("next_execute_check")) {
      setNextExecuteCheck((Long)  value);
      return;
    }
    if (fieldName.equals("execute_check_cooldown_seconds")) {
      setExecuteCheckCooldownSeconds((Integer)  value);
      return;
    }
    if (fieldName.equals("claimed_by_worker")) {
      setClaimedByWorker((String)  value);
      return;
    }
    if (fieldName.equals("background_workflow_executor_info_id")) {
      setBackgroundWorkflowExecutorInfoId((Integer)  value);
      return;
    }
    throw new IllegalStateException("Invalid field: " + fieldName);
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
      case step_attempt_id:
        return long.class;
      case serialized_context:
        return byte[].class;
      case next_execute_check:
        return long.class;
      case execute_check_cooldown_seconds:
        return int.class;
      case claimed_by_worker:
        return String.class;
      case background_workflow_executor_info_id:
        return Integer.class;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
    if (fieldName.equals("step_attempt_id")) {
      return long.class;
    }
    if (fieldName.equals("serialized_context")) {
      return byte[].class;
    }
    if (fieldName.equals("next_execute_check")) {
      return long.class;
    }
    if (fieldName.equals("execute_check_cooldown_seconds")) {
      return int.class;
    }
    if (fieldName.equals("claimed_by_worker")) {
      return String.class;
    }
    if (fieldName.equals("background_workflow_executor_info_id")) {
      return Integer.class;
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public StepAttempt getStepAttempt() throws IOException {
    return __assoc_step_attempt.get();
  }

  public BackgroundWorkflowExecutorInfo getBackgroundWorkflowExecutorInfo() throws IOException {
    return __assoc_background_workflow_executor_info.get();
  }

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
    if (fieldName.equals("step_attempt_id")) {
      return getStepAttemptId();
    }
    if (fieldName.equals("serialized_context")) {
      return getSerializedContext();
    }
    if (fieldName.equals("next_execute_check")) {
      return getNextExecuteCheck();
    }
    if (fieldName.equals("execute_check_cooldown_seconds")) {
      return getExecuteCheckCooldownSeconds();
    }
    if (fieldName.equals("claimed_by_worker")) {
      return getClaimedByWorker();
    }
    if (fieldName.equals("background_workflow_executor_info_id")) {
      return getBackgroundWorkflowExecutorInfoId();
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
      case step_attempt_id:
        return getStepAttemptId();
      case serialized_context:
        return getSerializedContext();
      case next_execute_check:
        return getNextExecuteCheck();
      case execute_check_cooldown_seconds:
        return getExecuteCheckCooldownSeconds();
      case claimed_by_worker:
        return getClaimedByWorker();
      case background_workflow_executor_info_id:
        return getBackgroundWorkflowExecutorInfoId();
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  public boolean hasField(String fieldName) {
    if (fieldName.equals("id")) {
      return true;
    }
    if (fieldName.equals("step_attempt_id")) {
      return true;
    }
    if (fieldName.equals("serialized_context")) {
      return true;
    }
    if (fieldName.equals("next_execute_check")) {
      return true;
    }
    if (fieldName.equals("execute_check_cooldown_seconds")) {
      return true;
    }
    if (fieldName.equals("claimed_by_worker")) {
      return true;
    }
    if (fieldName.equals("background_workflow_executor_info_id")) {
      return true;
    }
    return false;
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
      case step_attempt_id:
        return null;
      case serialized_context:
        return null;
      case next_execute_check:
        return null;
      case execute_check_cooldown_seconds:
        return null;
      case claimed_by_worker:
        return null;
      case background_workflow_executor_info_id:
        return null;
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public BackgroundStepAttemptInfo getCopy() {
    return getCopy(databases);
  }

  @Override
  public BackgroundStepAttemptInfo getCopy(IDatabases databases) {
    return new BackgroundStepAttemptInfo(this, databases);
  }

  @Override
  public boolean save() throws IOException {
    return databases.getWorkflowDb().backgroundStepAttemptInfos().save(this);
  }

  public StepAttempt createStepAttempt(final int workflow_attempt_id, final String step_token, final int step_status, final String action_class) throws IOException {
 
    StepAttempt newStepAttempt = databases.getWorkflowDb().stepAttempts().create(workflow_attempt_id, step_token, step_status, action_class);
    setStepAttemptId(newStepAttempt.getId());
    save();
    __assoc_step_attempt.clearCache();
    return newStepAttempt;
  }

  public StepAttempt createStepAttempt(final int workflow_attempt_id, final String step_token, final Long start_time, final Long end_time, final int step_status, final String failure_cause, final String failure_trace, final String action_class, final String status_message) throws IOException {
 
    StepAttempt newStepAttempt = databases.getWorkflowDb().stepAttempts().create(workflow_attempt_id, step_token, start_time, end_time, step_status, failure_cause, failure_trace, action_class, status_message);
    setStepAttemptId(newStepAttempt.getId());
    save();
    __assoc_step_attempt.clearCache();
    return newStepAttempt;
  }

  public StepAttempt createStepAttempt() throws IOException {
 
    StepAttempt newStepAttempt = databases.getWorkflowDb().stepAttempts().create(0, "", 0, "");
    setStepAttemptId(newStepAttempt.getId());
    save();
    __assoc_step_attempt.clearCache();
    return newStepAttempt;
  }

  public BackgroundWorkflowExecutorInfo createBackgroundWorkflowExecutorInfo(final String host, final int status, final long last_heartbeat) throws IOException {
 
    BackgroundWorkflowExecutorInfo newBackgroundWorkflowExecutorInfo = databases.getWorkflowDb().backgroundWorkflowExecutorInfos().create(host, status, last_heartbeat);
    setBackgroundWorkflowExecutorInfoId(JackUtility.safeLongToInt(newBackgroundWorkflowExecutorInfo.getId()));
    save();
    __assoc_background_workflow_executor_info.clearCache();
    return newBackgroundWorkflowExecutorInfo;
  }

  public BackgroundWorkflowExecutorInfo createBackgroundWorkflowExecutorInfo() throws IOException {
 
    BackgroundWorkflowExecutorInfo newBackgroundWorkflowExecutorInfo = databases.getWorkflowDb().backgroundWorkflowExecutorInfos().create("", 0, 0L);
    setBackgroundWorkflowExecutorInfoId(JackUtility.safeLongToInt(newBackgroundWorkflowExecutorInfo.getId()));
    save();
    __assoc_background_workflow_executor_info.clearCache();
    return newBackgroundWorkflowExecutorInfo;
  }

  public String toString() {
    return "<BackgroundStepAttemptInfo"
        + " id: " + this.getId()
        + " step_attempt_id: " + getStepAttemptId()
        + " serialized_context: " + getSerializedContext()
        + " next_execute_check: " + getNextExecuteCheck()
        + " execute_check_cooldown_seconds: " + getExecuteCheckCooldownSeconds()
        + " claimed_by_worker: " + getClaimedByWorker()
        + " background_workflow_executor_info_id: " + getBackgroundWorkflowExecutorInfoId()
        + ">";
  }

  public void unsetAssociations() {
    unsetDatabaseReference();
    __assoc_step_attempt = null;
    __assoc_background_workflow_executor_info = null;
  }

  public int compareTo(BackgroundStepAttemptInfo that) {
    return Long.valueOf(this.getId()).compareTo(that.getId());
  }
  
  
  public static class Attributes extends AttributesWithId {
    
    public static final long serialVersionUID = 4963514435895128680L;

    // Fields
    private long __step_attempt_id;
    private byte[] __serialized_context;
    private long __next_execute_check;
    private int __execute_check_cooldown_seconds;
    private String __claimed_by_worker;
    private Integer __background_workflow_executor_info_id;

    public Attributes(long id) {
      super(id);
    }

    public Attributes(long id, final long step_attempt_id, final byte[] serialized_context, final long next_execute_check, final int execute_check_cooldown_seconds, final String claimed_by_worker, final Integer background_workflow_executor_info_id) {
      super(id);
      this.__step_attempt_id = step_attempt_id;
      this.__serialized_context = serialized_context;
      this.__next_execute_check = next_execute_check;
      this.__execute_check_cooldown_seconds = execute_check_cooldown_seconds;
      this.__claimed_by_worker = claimed_by_worker;
      this.__background_workflow_executor_info_id = background_workflow_executor_info_id;
    }
    
    public Attributes(long id, final long step_attempt_id, final byte[] serialized_context, final long next_execute_check, final int execute_check_cooldown_seconds) {
      super(id);
      this.__step_attempt_id = step_attempt_id;
      this.__serialized_context = serialized_context;
      this.__next_execute_check = next_execute_check;
      this.__execute_check_cooldown_seconds = execute_check_cooldown_seconds;
    }

    public static Attributes newDefaultInstance(long id) {
      return new Attributes(id, 0L, new byte[0], 0L, 0);
    }

    public Attributes(long id, Map<Enum, Object> fieldsMap) {
      super(id);
      long step_attempt_id = (Long)fieldsMap.get(BackgroundStepAttemptInfo._Fields.step_attempt_id);
      byte[] serialized_context = (byte[])fieldsMap.get(BackgroundStepAttemptInfo._Fields.serialized_context);
      long next_execute_check = (Long)fieldsMap.get(BackgroundStepAttemptInfo._Fields.next_execute_check);
      int execute_check_cooldown_seconds = (Integer)fieldsMap.get(BackgroundStepAttemptInfo._Fields.execute_check_cooldown_seconds);
      String claimed_by_worker = (String)fieldsMap.get(BackgroundStepAttemptInfo._Fields.claimed_by_worker);
      Integer background_workflow_executor_info_id = (Integer)fieldsMap.get(BackgroundStepAttemptInfo._Fields.background_workflow_executor_info_id);
      this.__step_attempt_id = step_attempt_id;
      this.__serialized_context = serialized_context;
      this.__next_execute_check = next_execute_check;
      this.__execute_check_cooldown_seconds = execute_check_cooldown_seconds;
      this.__claimed_by_worker = claimed_by_worker;
      this.__background_workflow_executor_info_id = background_workflow_executor_info_id;
    }

    public Attributes(Attributes other) {
      super(other.getId());
      this.__step_attempt_id = other.getStepAttemptId();
      this.__serialized_context = copyBinary(other.getSerializedContext());
      this.__next_execute_check = other.getNextExecuteCheck();
      this.__execute_check_cooldown_seconds = other.getExecuteCheckCooldownSeconds();
      this.__claimed_by_worker = other.getClaimedByWorker();
      this.__background_workflow_executor_info_id = other.getBackgroundWorkflowExecutorInfoId();
    }

    public long getStepAttemptId() {
      return __step_attempt_id;
    }

    public Attributes setStepAttemptId(long newval) {
      this.__step_attempt_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public byte[] getSerializedContext() {
      return __serialized_context;
    }

    public Attributes setSerializedContext(byte[] newval) {
      this.__serialized_context = newval;
      cachedHashCode = 0;
      return this;
    }

    public long getNextExecuteCheck() {
      return __next_execute_check;
    }

    public Attributes setNextExecuteCheck(long newval) {
      this.__next_execute_check = newval;
      cachedHashCode = 0;
      return this;
    }

    public int getExecuteCheckCooldownSeconds() {
      return __execute_check_cooldown_seconds;
    }

    public Attributes setExecuteCheckCooldownSeconds(int newval) {
      this.__execute_check_cooldown_seconds = newval;
      cachedHashCode = 0;
      return this;
    }

    public String getClaimedByWorker() {
      return __claimed_by_worker;
    }

    public Attributes setClaimedByWorker(String newval) {
      this.__claimed_by_worker = newval;
      cachedHashCode = 0;
      return this;
    }

    public Integer getBackgroundWorkflowExecutorInfoId() {
      return __background_workflow_executor_info_id;
    }

    public Attributes setBackgroundWorkflowExecutorInfoId(Integer newval) {
      this.__background_workflow_executor_info_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public void setField(_Fields field, Object value) {
      switch (field) {
        case step_attempt_id:
          setStepAttemptId((Long)value);
          break;
        case serialized_context:
          setSerializedContext((byte[])value);
          break;
        case next_execute_check:
          setNextExecuteCheck((Long)value);
          break;
        case execute_check_cooldown_seconds:
          setExecuteCheckCooldownSeconds((Integer)value);
          break;
        case claimed_by_worker:
          setClaimedByWorker((String)value);
          break;
        case background_workflow_executor_info_id:
          setBackgroundWorkflowExecutorInfoId((Integer)value);
          break;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }
    }

    public void setField(String fieldName, Object value) {
      if (fieldName.equals("step_attempt_id")) {
        setStepAttemptId((Long)value);
        return;
      }
      if (fieldName.equals("serialized_context")) {
        setSerializedContext((byte[])value);
        return;
      }
      if (fieldName.equals("next_execute_check")) {
        setNextExecuteCheck((Long)value);
        return;
      }
      if (fieldName.equals("execute_check_cooldown_seconds")) {
        setExecuteCheckCooldownSeconds((Integer)value);
        return;
      }
      if (fieldName.equals("claimed_by_worker")) {
        setClaimedByWorker((String)value);
        return;
      }
      if (fieldName.equals("background_workflow_executor_info_id")) {
        setBackgroundWorkflowExecutorInfoId((Integer)value);
        return;
      }
      throw new IllegalStateException("Invalid field: " + fieldName);
    }

    public static Class getFieldType(_Fields field) {
      switch (field) {
        case step_attempt_id:
          return long.class;
        case serialized_context:
          return byte[].class;
        case next_execute_check:
          return long.class;
        case execute_check_cooldown_seconds:
          return int.class;
        case claimed_by_worker:
          return String.class;
        case background_workflow_executor_info_id:
          return Integer.class;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }    
    }

    public static Class getFieldType(String fieldName) {    
      if (fieldName.equals("step_attempt_id")) {
        return long.class;
      }
      if (fieldName.equals("serialized_context")) {
        return byte[].class;
      }
      if (fieldName.equals("next_execute_check")) {
        return long.class;
      }
      if (fieldName.equals("execute_check_cooldown_seconds")) {
        return int.class;
      }
      if (fieldName.equals("claimed_by_worker")) {
        return String.class;
      }
      if (fieldName.equals("background_workflow_executor_info_id")) {
        return Integer.class;
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    @Override
    public Object getField(String fieldName) {
      if (fieldName.equals("id")) {
        return getId();
      }
      if (fieldName.equals("step_attempt_id")) {
        return getStepAttemptId();
      }
      if (fieldName.equals("serialized_context")) {
        return getSerializedContext();
      }
      if (fieldName.equals("next_execute_check")) {
        return getNextExecuteCheck();
      }
      if (fieldName.equals("execute_check_cooldown_seconds")) {
        return getExecuteCheckCooldownSeconds();
      }
      if (fieldName.equals("claimed_by_worker")) {
        return getClaimedByWorker();
      }
      if (fieldName.equals("background_workflow_executor_info_id")) {
        return getBackgroundWorkflowExecutorInfoId();
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    public Object getField(_Fields field) {
      switch (field) {
        case step_attempt_id:
          return getStepAttemptId();
        case serialized_context:
          return getSerializedContext();
        case next_execute_check:
          return getNextExecuteCheck();
        case execute_check_cooldown_seconds:
          return getExecuteCheckCooldownSeconds();
        case claimed_by_worker:
          return getClaimedByWorker();
        case background_workflow_executor_info_id:
          return getBackgroundWorkflowExecutorInfoId();
      }
      throw new IllegalStateException("Invalid field: " + field);
    }

    public boolean hasField(String fieldName) {
      if (fieldName.equals("id")) {
        return true;
      }
      if (fieldName.equals("step_attempt_id")) {
        return true;
      }
      if (fieldName.equals("serialized_context")) {
        return true;
      }
      if (fieldName.equals("next_execute_check")) {
        return true;
      }
      if (fieldName.equals("execute_check_cooldown_seconds")) {
        return true;
      }
      if (fieldName.equals("claimed_by_worker")) {
        return true;
      }
      if (fieldName.equals("background_workflow_executor_info_id")) {
        return true;
      }
      return false;
    }

    public static Object getDefaultValue(_Fields field) {
      switch (field) {
        case step_attempt_id:
          return null;
        case serialized_context:
          return null;
        case next_execute_check:
          return null;
        case execute_check_cooldown_seconds:
          return null;
        case claimed_by_worker:
          return null;
        case background_workflow_executor_info_id:
          return null;
      }
      throw new IllegalStateException("Invalid field: " + field);
    }
    
    @Override
    public Set<Enum> getFieldSet() {
      Set set = EnumSet.allOf(_Fields.class);
      return set;
    }
    
    public String toString() {
      return "<BackgroundStepAttemptInfo.Attributes"
          + " step_attempt_id: " + getStepAttemptId()
          + " serialized_context: " + getSerializedContext()
          + " next_execute_check: " + getNextExecuteCheck()
          + " execute_check_cooldown_seconds: " + getExecuteCheckCooldownSeconds()
          + " claimed_by_worker: " + getClaimedByWorker()
          + " background_workflow_executor_info_id: " + getBackgroundWorkflowExecutorInfoId()
          + ">";
    }
  }

  public static class Id implements ModelIdWrapper<BackgroundStepAttemptInfo.Id> {
    public static final long serialVersionUID = 1L;

    private final long id;

    public Id(Long id) {
      this.id = id;
    }

    @Override
    public Long getId() {
      return id;
    }

    @Override
    public int compareTo(Id other) {
      return this.getId().compareTo(other.getId());
    }

    @Override
    public boolean equals(Object other) {
      if (other instanceof Id) {
        return this.getId().equals(((Id)other).getId());
      }
      return false;
    }

    @Override
    public int hashCode() {
      return this.getId().hashCode();
    }

    @Override
    public String toString() {
      return "<BackgroundStepAttemptInfo.Id: " + this.getId() + ">";
    }
  }

  public static Set<Attributes> convertToAttributesSet(Collection<BackgroundStepAttemptInfo> models) {
    return models.stream()
        .map(BackgroundStepAttemptInfo::getAttributes)
        .collect(Collectors.toSet());
  }

  public static class AssociationMetadata implements IModelAssociationMetadata {

    private List<IAssociationMetadata> meta = new ArrayList<>();

    public AssociationMetadata(){
      meta.add(new DefaultAssociationMetadata(AssociationType.BELONGS_TO, BackgroundStepAttemptInfo.class, StepAttempt.class, "step_attempt_id"));
      meta.add(new DefaultAssociationMetadata(AssociationType.BELONGS_TO, BackgroundStepAttemptInfo.class, BackgroundWorkflowExecutorInfo.class, "background_workflow_executor_info_id"));
    }

    @Override
    public List<IAssociationMetadata> getAssociationMetadata() {
      return meta;
    }
  }

}
